<?php
bolt_decrypt( __FILE__ , 'YOXEOd'); return 0;
##!!!##
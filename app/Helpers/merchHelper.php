<?php
bolt_decrypt( __FILE__ , 'p5SWw1'); return 0;
##!!!##
<?php
bolt_decrypt( __FILE__ , 'kXFZQL'); return 0;
##!!!##CnVzZSBBcHBcTW9kZWxzXFBtc01vZGVsc1xSZXF1aXNpdGlvbjsKdXNlIEFwcFxNb2RlbHNcUG1zTW9kZWxzXFJlcXVpc2l0aW9uVHJhY2tpbmc7CnVzZSBBcHBcTW9kZWxzXFBtc01vZGVsc1xSZXF1aXNpdGlvbkRlbGl2ZXJ5SXRlbTsKdXNlIEFwcFxNb2RlbHNcUG1zTW9kZWxzXE5vdGlmaWNhdGlvbjsKCnVzZSBBcHBcTW9kZWxzXFBtc01vZGVsc1xQdXJjaGFzZVxQdXJjaGFzZU9yZGVyOwp1c2UgQXBwXE1vZGVsc1xQbXNNb2RlbHNcUHVyY2hhc2VcUHVyY2hhc2VPcmRlckF0dGFjaG1lbnQ7CnVzZSBBcHBcTW9kZWxzXFBtc01vZGVsc1xHcm5cR29vZHNSZWNlaXZlZEl0ZW1TdG9ja0luOwoKdXNlIEFwcFxNb2RlbHNcUG1zTW9kZWxzXFN1cHBsaWVyczsKdXNlIEFwcFxNb2RlbHNcUG1zTW9kZWxzXFN1cHBsaWVyUGF5bWVudDsKCnVzZSBBcHBcTW9kZWxzXFBtc01vZGVsc1xSZnBcUmVxdWVzdFByb3Bvc2FsOwp1c2UgQXBwXE1vZGVsc1xQbXNNb2RlbHNcUXVvdGF0aW9uczsKCnVzZSBBcHBcTW9kZWxzXFBtc01vZGVsc1xBY2NvdW50c1xBY2NvdW50Q2xhc3M7CnVzZSBBcHBcTW9kZWxzXFBtc01vZGVsc1xBY2NvdW50c1xBY2NvdW50R3JvdXA7CnVzZSBBcHBcTW9kZWxzXFBtc01vZGVsc1xBY2NvdW50c1xFbnRyeVR5cGU7CnVzZSBBcHBcTW9kZWxzXFBtc01vZGVsc1xBY2NvdW50c1xFbnRyeTsKdXNlIEFwcFxNb2RlbHNcUG1zTW9kZWxzXEFjY291bnRzXEVudHJ5SXRlbTsKCmZ1bmN0aW9uIHVzZXJEYXRhKCl7CiAgICAkdHJhY2tzID0gUmVxdWlzaXRpb25UcmFja2luZzo6d2l0aChbJ3JlcXVpc2l0aW9uJywncmVxdWlzaXRpb24ucmVsVXNlcnNMaXN0LmVtcGxveWVlJ10pLT53aGVuKGlzc2V0KGF1dGgoKS0+dXNlcigpLT5lbXBsb3llZS0+YXNfZGVwYXJ0bWVudF9pZCksZnVuY3Rpb24oJHF1ZXJ5KXsKICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZUhhcygncmVxdWlzaXRpb24ucmVsVXNlcnNMaXN0LmVtcGxveWVlJyxmdW5jdGlvbigkcXVlcnkpewogICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZSgnYXNfZGVwYXJ0bWVudF9pZCcsYXV0aCgpLT51c2VyKCktPmVtcGxveWVlLT5hc19kZXBhcnRtZW50X2lkKTsKICAgICAgICB9KTsKICAgIH0pCiAgICAtPndoZXJlSGFzKCdyZXF1aXNpdGlvbicsIGZ1bmN0aW9uKCRxdWVyeSl7CiAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmUoJ2F1dGhvcl9pZCcsIGF1dGgoKS0+dXNlcigpLT5pZCk7CiAgICB9KS0+Z2V0KCk7CiAgICAKCiAgICAkbm90aWZpY2F0aW9ucyA9IE5vdGlmaWNhdGlvbjo6d2l0aChbJ3JlbFVzZXIuZW1wbG95ZWUnXSktPndoZW4oaXNzZXQoYXV0aCgpLT51c2VyKCktPmVtcGxveWVlLT5hc19kZXBhcnRtZW50X2lkKSxmdW5jdGlvbigkcXVlcnkpewogICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZUhhcygncmVsVXNlci5lbXBsb3llZScsZnVuY3Rpb24oJHF1ZXJ5KXsKICAgICAgICAgICAgICAgIHJldHVybiAkcXVlcnktPndoZXJlKCdhc19kZXBhcnRtZW50X2lkJyxhdXRoKCktPnVzZXIoKS0+ZW1wbG95ZWUtPmFzX2RlcGFydG1lbnRfaWQpOwogICAgICAgICAgICB9KTsKICAgICAgICB9KQogICAgICAgIC0+d2hlcmUoJ3VzZXJfaWQnLGF1dGgoKS0+dXNlcigpLT5pZCkKICAgICAgICAtPmdldCgpOwoKICAgICRkZWxpdmVyZWRSZXF1aXNpdGlvbnMgPSBSZXF1aXNpdGlvbkRlbGl2ZXJ5SXRlbTo6d2l0aChbJ3JlbFJlcXVpc2l0aW9uRGVsaXZlcnkucmVsUmVxdWlzaXRpb24ucmVsVXNlcnNMaXN0LmVtcGxveWVlJywncmVsUmVxdWlzaXRpb25EZWxpdmVyeS5yZWxSZXF1aXNpdGlvbiddKS0+d2hlbihpc3NldChhdXRoKCktPnVzZXIoKS0+ZW1wbG95ZWUtPmFzX2RlcGFydG1lbnRfaWQpLGZ1bmN0aW9uKCRxdWVyeSl7CiAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmVIYXMoJ3JlbFJlcXVpc2l0aW9uRGVsaXZlcnkucmVsUmVxdWlzaXRpb24ucmVsVXNlcnNMaXN0LmVtcGxveWVlJyxmdW5jdGlvbigkcXVlcnkpewogICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZSgnYXNfZGVwYXJ0bWVudF9pZCcsYXV0aCgpLT51c2VyKCktPmVtcGxveWVlLT5hc19kZXBhcnRtZW50X2lkKTsKICAgICAgICB9KTsKICAgIH0pCiAgICAtPndoZXJlSGFzKCdyZWxSZXF1aXNpdGlvbkRlbGl2ZXJ5LnJlbFJlcXVpc2l0aW9uJyxmdW5jdGlvbigkcXVlcnkpewogICAgICAgIHJldHVybiAkcXVlcnktPndoZXJlKCdhdXRob3JfaWQnLGF1dGgoKS0+dXNlcigpLT5pZCk7CiAgICB9KQogICAgLT5nZXQoKTsKCiAgICAvL1VzZXJzIHJlcXVpc3Rpb24gb24gZGVwYXJ0bWVudCBoZWFkCiAgICAkdXNlclJlcXVpc2l0aW9uRGF0YSA9IFJlcXVpc2l0aW9uOjp3aXRoKFsncmVsVXNlcnNMaXN0LmVtcGxveWVlJ10pLT53aGVuKGlzc2V0KEF1dGg6OnVzZXIoKS0+ZW1wbG95ZWUtPmFzX2RlcGFydG1lbnRfaWQpLAogICAgICAgICAgICBmdW5jdGlvbigkcXVlcnkpewogICAgICAgICAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmVIYXMoJ3JlbFVzZXJzTGlzdC5lbXBsb3llZScsZnVuY3Rpb24oJHF1ZXJ5KXsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZSgnYXNfZGVwYXJ0bWVudF9pZCcsQXV0aDo6dXNlcigpLT5lbXBsb3llZS0+YXNfZGVwYXJ0bWVudF9pZCk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICB9KQogICAgICAgIC0+Z2V0KCk7CgogICAgcmV0dXJuIFsKICAgICAgICAncmVxdWlzaXRpb25zJyA9PiBbCiAgICAgICAgICAgICdkcmFmdCcgPT4gY29sbGVjdCgkdHJhY2tzKS0+d2hlcmUoJ3N0YXR1cycsICdkcmFmdCcpLT5jb3VudCgpLAogICAgICAgICAgICAncGVuZGluZycgPT4gY29sbGVjdCgkdHJhY2tzKS0+d2hlcmUoJ3N0YXR1cycsICdwZW5kaW5nJyktPmNvdW50KCksCiAgICAgICAgICAgICdhcHByb3ZlZCcgPT4gY29sbGVjdCgkdHJhY2tzKS0+d2hlcmUoJ3N0YXR1cycsICdhcHByb3ZlZCcpLT5jb3VudCgpLAogICAgICAgICAgICAncHJvY2Vzc2luZycgPT4gY29sbGVjdCgkdHJhY2tzKS0+d2hlcmUoJ3N0YXR1cycsICdwcm9jZXNzaW5nJyktPmNvdW50KCksCiAgICAgICAgICAgICdkZWxpdmVyZWQnID0+IGNvbGxlY3QoJHRyYWNrcyktPndoZXJlKCdzdGF0dXMnLCAnZGVsaXZlcmVkJyktPmNvdW50KCksCiAgICAgICAgICAgICdyZWNlaXZlZCcgPT4gY29sbGVjdCgkdHJhY2tzKS0+d2hlcmUoJ3N0YXR1cycsICdyZWNlaXZlZCcpLT5jb3VudCgpLAogICAgICAgIF0sCiAgICAgICAgJ25vdGlmaWNhdGlvbnMnID0+IFsKICAgICAgICAgICAgJ3JlYWQnID0+IGNvbGxlY3QoJG5vdGlmaWNhdGlvbnMpLT53aGVyZSgndHlwZScsJ3JlYWQnKS0+Y291bnQoKSwKICAgICAgICAgICAgJ3VucmVhZCcgPT4gY29sbGVjdCgkbm90aWZpY2F0aW9ucyktPndoZXJlKCd0eXBlJywndW5yZWFkJyktPmNvdW50KCksCiAgICAgICAgXSwKICAgICAgICAnZGVsaXZlcmVkLXJlcXVpc2l0aW9ucycgPT4gWwogICAgICAgICAgICAncGVuZGluZycgPT4gY29sbGVjdCgkZGVsaXZlcmVkUmVxdWlzaXRpb25zKS0+d2hlcmUoJ3N0YXR1cycsICdwZW5kaW5nJyktPmNvdW50KCksCiAgICAgICAgICAgICdhY2tub3dsZWRnZScgPT4gY29sbGVjdCgkZGVsaXZlcmVkUmVxdWlzaXRpb25zKS0+d2hlcmUoJ3N0YXR1cycsICdhY2tub3dsZWRnZScpLT5jb3VudCgpLAogICAgICAgICAgICAnZGVsaXZlcmVkJyA9PiBjb2xsZWN0KCRkZWxpdmVyZWRSZXF1aXNpdGlvbnMpLT53aGVyZSgnc3RhdHVzJywgJ2RlbGl2ZXJlZCcpLT5jb3VudCgpLAogICAgICAgIF0sCiAgICAgICAgJ3VzZXItcmVxdWlzaXRpb25zJyA9PiBbCiAgICAgICAgICAgICdwZW5kaW5nJyA9PiBjb2xsZWN0KCR1c2VyUmVxdWlzaXRpb25EYXRhKS0+d2hlcmUoJ3N0YXR1cycsIDApLT5jb3VudCgpLAogICAgICAgICAgICAnYWNrbm93bGVkZ2UnID0+IGNvbGxlY3QoJHVzZXJSZXF1aXNpdGlvbkRhdGEpLT53aGVyZSgnc3RhdHVzJywgMSktPmNvdW50KCksCiAgICAgICAgICAgICdoYWx0JyA9PiBjb2xsZWN0KCR1c2VyUmVxdWlzaXRpb25EYXRhKS0+d2hlcmUoJ3N0YXR1cycsIDIpLT5jb3VudCgpLAogICAgICAgIF0sCiAgICBdOwp9CgpmdW5jdGlvbiBzdG9yZURhdGEoKXsKICAgIHJldHVybiBbCiAgICAgICAgJ3N0b3JlLW1hbmFnZScgPT4gWwogICAgICAgICAgICAncmVxdWlzdGlvbnMnID0+IFJlcXVpc2l0aW9uOjp3aXRoKCdyZWxVc2Vyc0xpc3QnKQogICAgICAgICAgICAtPndoZXJlKFsnc3RhdHVzJz0+MSwnZGVsaXZlcnlfc3RhdHVzJz0+J3Byb2Nlc3NpbmcnLCdpc19zZW5kX3RvX3JmcCc9PidubyddKQogICAgICAgICAgICAtPndoZXJlTm90SW4oJ2RlbGl2ZXJ5X3N0YXR1cycsWydkZWxpdmVyZWQnLCdwYXJ0aWFsLWRlbGl2ZXJlZCddKQogICAgICAgICAgICAtPmNvdW50KCksCgogICAgICAgICAgICAncmZwLXJlcXVpc3Rpb25zJyA9PiBSZXF1aXNpdGlvbjo6d2hlcmUoZnVuY3Rpb24oJHF1ZXJ5KXsKICAgICAgICAgICAgICAgIHJldHVybiAkcXVlcnktPndoZXJlKFsnc3RhdHVzJz0+MSwnYXBwcm92ZWRfaWQnPT4xLCdpc19zZW5kX3RvX3JmcCc9Pid5ZXMnLCdkZWxpdmVyeV9zdGF0dXMnPT4ncHJvY2Vzc2luZyddKS0+b3JXaGVyZSgncmVxdWVzdF9zdGF0dXMnLCdyZnAnKTsKICAgICAgICAgICAgfSkKICAgICAgICAgICAgLT5jb3VudCgpLAoKICAgICAgICAgICAgJ3BlbmRpbmctZGVsaXZlcnknID0+IFJlcXVpc2l0aW9uOjp3aGVyZShbJ3N0YXR1cyc9PjEsJ2RlbGl2ZXJ5X3N0YXR1cyc9PidwYXJ0aWFsLWRlbGl2ZXJlZCddKS0+Y291bnQoKSwKCiAgICAgICAgICAgICdjb21wbGV0ZS1kZWxpdmVyeScgPT4gUmVxdWlzaXRpb246OndoZXJlKFsnc3RhdHVzJz0+MSwnZGVsaXZlcnlfc3RhdHVzJz0+J2RlbGl2ZXJlZCddKS0+Y291bnQoKSwKICAgICAgICBdLAogICAgICAgICdncm4nID0+IFsKICAgICAgICAgICAgJ3FjZS1saXN0JyA9PiBQdXJjaGFzZU9yZGVyOjp3aXRoKCdyZWxHb29kUmVjZWl2ZU5vdGUnLCdyZWxHb29kUmVjZWl2ZU5vdGUucmVsR29vZHNSZWNlaXZlZEl0ZW1zJykKICAgICAgICAgICAgICAgIC0+d2hlcmUoJ2lzX3NlbmQnLCd5ZXMnKQogICAgICAgICAgICAgICAgLT53aGVyZUhhcygncmVsR29vZFJlY2VpdmVOb3RlJywgZnVuY3Rpb24gKCRxdWVyeSl7CiAgICAgICAgICAgICAgICAgICAgJHF1ZXJ5LT53aGVyZVJhdygncHVyY2hhc2Vfb3JkZXJzLmlkPWdvb2RzX3JlY2VpdmVkX25vdGVzLnB1cmNoYXNlX29yZGVyX2lkJyk7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgLT53aGVyZUhhcygncmVsR29vZFJlY2VpdmVOb3RlLnJlbEdvb2RzUmVjZWl2ZWRJdGVtcycsIGZ1bmN0aW9uKCRxdWVyeSl7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmVJbignaWQnLCBHb29kc1JlY2VpdmVkSXRlbVN0b2NrSW46OndoZXJlKCdpc19ncm5fY29tcGxldGUnLCdubycpLT5wbHVjaygnZ29vZHNfcmVjZWl2ZWRfaXRlbV9pZCcpLT5hbGwoKSk7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgLT5jb3VudCgpLAoKICAgICAgICAgICAgJ2dybi1saXN0JyA9PiBQdXJjaGFzZU9yZGVyOjp3aXRoKCdyZWxHb29kUmVjZWl2ZU5vdGUnLCdyZWxHb29kUmVjZWl2ZU5vdGUucmVsR29vZHNSZWNlaXZlZEl0ZW1zJykKICAgICAgICAgICAgICAgIC0+d2hlcmUoJ2lzX3NlbmQnLCd5ZXMnKQogICAgICAgICAgICAgICAgLT53aGVyZUhhcygncmVsR29vZFJlY2VpdmVOb3RlJywgZnVuY3Rpb24gKCRxdWVyeSl7CiAgICAgICAgICAgICAgICAgICAgJHF1ZXJ5LT53aGVyZVJhdygncHVyY2hhc2Vfb3JkZXJzLmlkPWdvb2RzX3JlY2VpdmVkX25vdGVzLnB1cmNoYXNlX29yZGVyX2lkJyk7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgLT53aGVyZUhhcygncmVsR29vZFJlY2VpdmVOb3RlLnJlbEdvb2RzUmVjZWl2ZWRJdGVtcycsIGZ1bmN0aW9uKCRxdWVyeSl7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmVJbignaWQnLCBHb29kc1JlY2VpdmVkSXRlbVN0b2NrSW46OndoZXJlKCdpc19ncm5fY29tcGxldGUnLCd5ZXMnKS0+cGx1Y2soJ2dvb2RzX3JlY2VpdmVkX2l0ZW1faWQnKS0+YWxsKCkpOwogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIC0+Y291bnQoKSwKICAgICAgICBdCiAgICBdOwp9CgpmdW5jdGlvbiB0b3BTdXBwbGllcnMoJGhvd01hbnkpewogICAgcmV0dXJuIFN1cHBsaWVyczo6YWRkU2VsZWN0KFsncGF5X2Ftb3VudCcgPT4gU3VwcGxpZXJQYXltZW50OjpzZWxlY3RSYXcoJ3N1bShwYXlfYW1vdW50KSBhcyB0b3RhbF9wYXlfYW1vdW50JykKICAgICAgICAgLT53aGVyZUNvbHVtbignc3VwcGxpZXJfaWQnLCAnc3VwcGxpZXJzLmlkJykKICAgICAgICAgLT5ncm91cEJ5KCdzdXBwbGllcl9pZCcpCiAgICAgXSkKICAgIC0+aGFzKCdyZWxRdW90YXRpb25zLnJlbFB1cmNoYXNlT3JkZXInKQogICAgIC0+b3JkZXJCeSgncGF5X2Ftb3VudCcsICdERVNDJykKICAgICAtPnRha2UoJGhvd01hbnkpCiAgICAgLT5nZXQoKTsKfQoKZnVuY3Rpb24gcHVyY2hhc2VTdGF0cygpewogICAgcmV0dXJuIFsKICAgICAgICAncmZwLXJlcXVpc3Rpb25zJyA9PiBSZXF1aXNpdGlvbjo6d2hlcmUoZnVuY3Rpb24oJHF1ZXJ5KXsKICAgICAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmUoWydzdGF0dXMnPT4xLCdhcHByb3ZlZF9pZCc9PjEsJ2lzX3NlbmRfdG9fcmZwJz0+J3llcycsJ2RlbGl2ZXJ5X3N0YXR1cyc9Pidwcm9jZXNzaW5nJ10pLT5vcldoZXJlKCdyZXF1ZXN0X3N0YXR1cycsJ3JmcCcpOwogICAgICAgIH0pCiAgICAgICAgLT5jb3VudCgpLAogICAgICAgIAogICAgICAgICdwcm9wb3NhbHMnID0+IFJlcXVlc3RQcm9wb3NhbDo6d2l0aCgncmVsUXVvdGF0aW9ucycpLT5jb3VudCgpLAoKICAgICAgICAncXVvdGF0aW9ucycgPT4gUXVvdGF0aW9uczo6d2hlcmUoWydzdGF0dXMnPT4nYWN0aXZlJywgJ2lzX2FwcHJvdmVkJz0+J2FwcHJvdmVkJywgJ2lzX3BvX2dlbmVyYXRlJz0+J3llcyddKS0+Y291bnQoKSwKCiAgICAgICAgJ3B1cmNoYXNlLW9yZGVycycgPT4gUHVyY2hhc2VPcmRlcjo6Y291bnQoKSwKICAgIF07Cn0KCmZ1bmN0aW9uIGRhdGVSYW5nZSgkZnJvbSwgJHRvLCAkZm9ybWF0ID0gIlktbS1kIil7CiAgICAkcmFuZ2UgPSBbXTsKICAgIGlmKHN0cnRvdGltZSgkZnJvbSkgJiYgc3RydG90aW1lKCR0bykpewogICAgICAgICRiZWdpbiA9IG5ldyBcRGF0ZVRpbWUoJGZyb20pOwogICAgICAgICRlbmQgPSBuZXcgXERhdGVUaW1lKCR0byk7CiAgICAgICAgCiAgICAgICAgJGludGVydmFsID0gbmV3IERhdGVJbnRlcnZhbCgnUDFEJyk7CiAgICAgICAgJGRhdGVSYW5nZSA9IG5ldyBEYXRlUGVyaW9kKCRiZWdpbiwgJGludGVydmFsLCAkZW5kKTsKICAgICAgICAKICAgICAgICAKICAgICAgICBmb3JlYWNoICgkZGF0ZVJhbmdlIGFzICRkYXRlKSB7CiAgICAgICAgICAgICRyYW5nZVtdID0gJGRhdGUtPmZvcm1hdCgkZm9ybWF0KTsKICAgICAgICB9CiAgICAgICAgYXJyYXlfcHVzaCgkcmFuZ2UsIGRhdGUoJGZvcm1hdCxzdHJ0b3RpbWUoJHRvKSkpOwogICAgfQogICAgCiAgICByZXR1cm4gJHJhbmdlOwp9CgpmdW5jdGlvbiBiaWxsaW5nRGF0YSgkZnJvbSwgJHRvKXsKICAgICRkYXRlUmFuZ2UgPSBkYXRlUmFuZ2UoJGZyb20sICR0byk7CiAgICAkcHVyY2hhc2VPcmRlcnMgPSBQdXJjaGFzZU9yZGVyOjp3aGVyZSgnaXNfc2VuZCcsJ3llcycpCiAgICAtPndoZXJlSGFzKCdyZWxHb29kUmVjZWl2ZU5vdGUnLCBmdW5jdGlvbiAoJHF1ZXJ5KXsKICAgICAgICAkcXVlcnktPndoZXJlUmF3KCdwdXJjaGFzZV9vcmRlcnMuaWQ9Z29vZHNfcmVjZWl2ZWRfbm90ZXMucHVyY2hhc2Vfb3JkZXJfaWQnKTsKICAgIH0pCiAgICAtPndoZXJlSW4oXERCOjpyYXcoJ3N1YnN0cihgcG9fZGF0ZWAsIDEsIDEwKScpLCAkZGF0ZVJhbmdlKQogICAgLT5wbHVjaygnaWQnKS0+dG9BcnJheSgpOwoKICAgICRkYXRhID0gW107CiAgICBpZihpc3NldCgkZGF0ZVJhbmdlWzBdKSl7CiAgICAgICAgZm9yZWFjaCAoJGRhdGVSYW5nZSBhcyAkZGF0ZSkgewogICAgICAgICAgICAkZGF0YVsncG8nXVtkYXRlKCdkLU0nLCBzdHJ0b3RpbWUoJGRhdGUpKV0gPSBQdXJjaGFzZU9yZGVyOjp3aGVyZUluKCdpZCcsICRwdXJjaGFzZU9yZGVycykKICAgICAgICAgICAgLT53aGVyZShcREI6OnJhdygnc3Vic3RyKGBwb19kYXRlYCwgMSwgMTApJyksICRkYXRlKQogICAgICAgICAgICAtPnN1bSgnZ3Jvc3NfcHJpY2UnKTsKCiAgICAgICAgICAgICRkYXRhWydncm4nXVtkYXRlKCdkLU0nLCBzdHJ0b3RpbWUoJGRhdGUpKV0gPSBHb29kc1JlY2VpdmVkSXRlbVN0b2NrSW46OndoZXJlSW4oJ3B1cmNoYXNlX29yZGVyX2lkJywgJHB1cmNoYXNlT3JkZXJzKQogICAgICAgICAgICAtPndoZXJlKCdpc19ncm5fY29tcGxldGUnLCd5ZXMnKQogICAgICAgICAgICAtPndoZXJlKFxEQjo6cmF3KCdzdWJzdHIoYGNyZWF0ZWRfYXRgLCAxLCAxMCknKSwgJGRhdGUpCiAgICAgICAgICAgIC0+c3VtKCd0b3RhbF9hbW91bnQnKTsKCiAgICAgICAgICAgICRkYXRhWydiaWxsJ11bZGF0ZSgnZC1NJywgc3RydG90aW1lKCRkYXRlKSldID0gUHVyY2hhc2VPcmRlckF0dGFjaG1lbnQ6OndoZXJlSW4oJ3B1cmNoYXNlX29yZGVyX2lkJywgJHB1cmNoYXNlT3JkZXJzKQogICAgICAgICAgICAtPndoZXJlKFxEQjo6cmF3KCdzdWJzdHIoYGNyZWF0ZWRfYXRgLCAxLCAxMCknKSwgJGRhdGUpCiAgICAgICAgICAgIC0+c3VtKCdiaWxsX2Ftb3VudCcpOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiAkZGF0YTsKfQoKZnVuY3Rpb24gYXVkaXRTdGF0KCkKewogICAgJHB1cmNoYXNlT3JkZXJzID0gUHVyY2hhc2VPcmRlcjo6d2hlcmUoJ2lzX3NlbmQnLCd5ZXMnKQogICAgLT53aGVyZUhhcygncmVsR29vZFJlY2VpdmVOb3RlJywgZnVuY3Rpb24gKCRxdWVyeSl7CiAgICAgICAgJHF1ZXJ5LT53aGVyZVJhdygncHVyY2hhc2Vfb3JkZXJzLmlkPWdvb2RzX3JlY2VpdmVkX25vdGVzLnB1cmNoYXNlX29yZGVyX2lkJyk7CiAgICB9KS0+Z2V0KCk7CgogICAgJHBlbmRpbmcgPSBQdXJjaGFzZU9yZGVyOjp3aGVyZSgnaXNfc2VuZCcsJ3llcycpCiAgICAtPndoZXJlSGFzKCdyZWxHb29kUmVjZWl2ZU5vdGUnLCBmdW5jdGlvbiAoJHF1ZXJ5KXsKICAgICAgICAkcXVlcnktPndoZXJlUmF3KCdwdXJjaGFzZV9vcmRlcnMuaWQ9Z29vZHNfcmVjZWl2ZWRfbm90ZXMucHVyY2hhc2Vfb3JkZXJfaWQnKTsKICAgIH0pLT53aGVyZUhhcygncmVsUG9BdHRhY2htZW50JywgZnVuY3Rpb24gKCRxdWVyeSl7CiAgICAgICAgICAgICAgICRxdWVyeS0+d2hlcmUoJ2JpbGxfdHlwZScsJ3BvJyktPndoZXJlKCdzdGF0dXMnLCdwZW5kaW5nJyk7CiAgICAgICAgICAgIH0pLT5jb3VudCgpOwoKICAgICRhcHByb3ZlZCA9IFB1cmNoYXNlT3JkZXI6OndoZXJlKCdpc19zZW5kJywneWVzJykKICAgIC0+d2hlcmVIYXMoJ3JlbEdvb2RSZWNlaXZlTm90ZScsIGZ1bmN0aW9uICgkcXVlcnkpewogICAgICAgICRxdWVyeS0+d2hlcmVSYXcoJ3B1cmNoYXNlX29yZGVycy5pZD1nb29kc19yZWNlaXZlZF9ub3Rlcy5wdXJjaGFzZV9vcmRlcl9pZCcpOwogICAgfSktPndoZXJlSGFzKCdyZWxQb0F0dGFjaG1lbnQnLCBmdW5jdGlvbiAoJHF1ZXJ5KXsKICAgICAgICAgICAgICAgJHF1ZXJ5LT53aGVyZSgnYmlsbF90eXBlJywncG8nKS0+d2hlcmUoJ3N0YXR1cycsJ2FwcHJvdmVkJyk7CiAgICAgICAgICAgIH0pLT5jb3VudCgpOwoKICAgIAogICAgIHJldHVybiBbCiAgICAgICAgJ3B1cmNoYXNlLW9yZGVycycgPT4gWwogICAgICAgICAgICAndG90YWwtYmlsbCcgPT4gY29sbGVjdCgkcHVyY2hhc2VPcmRlcnMpLT5jb3VudCgpLAogICAgICAgICAgICAncGVuZGluZy1iaWxsJyA9PiAkcGVuZGluZyAsCiAgICAgICAgICAgICdhcHByb3ZlZC1iaWxsJyA9PiAgJGFwcHJvdmVkLAogICAgICAgIF0sCiAgICAgICAgCiAgICBdOwp9CgpmdW5jdGlvbiB0eXBlV2lzZUVudHJpZXMoJGZyb20gPSBmYWxzZSwgJHRvID0gZmFsc2UsICR0eXBlcyA9IFtdKXsKICAgICRkYXRhID0gW107CiAgICBpZihpc3NldCgkdHlwZXNbMF0pKXsKICAgICAgICBmb3JlYWNoICgkdHlwZXMgYXMgJGtleSA9PiAkdHlwZSkgewogICAgICAgICAgICAkZGF0YVskdHlwZS0+bmFtZV0gPSBFbnRyeTo6d2hlcmUoJ2VudHJ5X3R5cGVfaWQnLCAkdHlwZS0+aWQpCiAgICAgICAgICAgIC0+d2hlbigkZnJvbSwgZnVuY3Rpb24oJHF1ZXJ5KSB1c2UoJGZyb20pewogICAgICAgICAgICAgICAgcmV0dXJuICRxdWVyeS0+d2hlcmUoJ2RhdGUnLCAnPj0nLCAkZnJvbSk7CiAgICAgICAgICAgIH0pCiAgICAgICAgICAgIC0+d2hlbigkdG8sIGZ1bmN0aW9uKCRxdWVyeSkgdXNlKCR0byl7CiAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZSgnZGF0ZScsICc8PScsICR0byk7CiAgICAgICAgICAgIH0pCiAgICAgICAgICAgIC0+c3VtKCdkZWJpdCcpOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiAkZGF0YTsKfQoKZnVuY3Rpb24gZ2V0RGF0ZVdpc2VUb3RhbFRyYW5zYWN0aW9ucygkZnJvbSwgJHRvLCAkZW50cnlfdHlwZV9pZCA9IDApewogICAgJGRhdGVSYW5nZSA9IGRhdGVSYW5nZSgkZnJvbSwgJHRvKTsKICAgICRkYXRhID0gW107CiAgICBpZihpc3NldCgkZGF0ZVJhbmdlWzBdKSl7CiAgICAgICAgZm9yZWFjaCAoJGRhdGVSYW5nZSBhcyAka2V5ID0+ICRkYXRlKSB7CiAgICAgICAgICAgICRkYXRhW2RhdGUoJ2QtTScsIHN0cnRvdGltZSgkZGF0ZSkpXSA9IEVudHJ5Ojp3aGVyZSgnZGF0ZScsICRkYXRlKQogICAgICAgICAgICAtPndoZW4oJGVudHJ5X3R5cGVfaWQgPiAwLCBmdW5jdGlvbigkcXVlcnkpIHVzZSgkZW50cnlfdHlwZV9pZCl7CiAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZSgnZW50cnlfdHlwZV9pZCcsICRlbnRyeV90eXBlX2lkKTsKICAgICAgICAgICAgfSkKICAgICAgICAgICAgLT5zdW0oJ2RlYml0Jyk7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuICRkYXRhOwp9CgpmdW5jdGlvbiBjbGFzc1dpc2VCYWxhbmNlKCRmcm9tLCAkdG8sICRjbGFzc19pZCwgJGFsbCA9IFtdKXsKICAgICRjbGFzcyA9IEFjY291bnRDbGFzczo6ZmluZCgkY2xhc3NfaWQpOwogICAgJGdyb3VwID0gQWNjb3VudEdyb3VwOjpkb2VzbnRIYXZlKCdwYXJlbnQnKS0+d2hlcmUoJ2FjY291bnRfY2xhc3NfaWQnLCAkY2xhc3NfaWQpLT5maXJzdCgpOwogICAgJGRhdGVSYW5nZSA9IGRhdGVSYW5nZSgkZnJvbSA/ICRmcm9tIDogZGF0ZSgnWS1tLTAxJyksICR0byA/ICR0byA6IGRhdGUoJ1ktbS10JykpOwogICAgJGRhdGEgPSBbXTsKICAgIGlmKGlzc2V0KCRkYXRlUmFuZ2VbMF0pKXsKICAgICAgICBmb3JlYWNoICgkZGF0ZVJhbmdlIGFzICRrZXkgPT4gJGRhdGUpIHsKICAgICAgICAgICAgJGRlYml0ID0gRW50cnlJdGVtOjp3aGVyZUhhcygnZW50cnknLCBmdW5jdGlvbigkcXVlcnkpIHVzZSgkZGF0ZSl7CiAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZSgnZGF0ZScsICRkYXRlKTsKICAgICAgICAgICAgfSkKICAgICAgICAgICAgLT53aGVyZUluKCdjaGFydF9vZl9hY2NvdW50X2lkJywgY2FsbF91c2VyX2Z1bmNfYXJyYXkoJ2FycmF5X21lcmdlJywgZ2V0QWxsQWNjb3VudHMoaXNzZXQoJGdyb3VwLT5pZCkgPyAkZ3JvdXAtPmlkIDogMCwgW10sICRhbGwpKSkKICAgICAgICAgICAgLT53aGVyZSgnZGViaXRfY3JlZGl0JywgJ0QnKQogICAgICAgICAgICAtPnN1bSgnYW1vdW50Jyk7CgogICAgICAgICAgICAkY3JlZGl0ID0gRW50cnlJdGVtOjp3aGVyZUhhcygnZW50cnknLCBmdW5jdGlvbigkcXVlcnkpIHVzZSgkZGF0ZSl7CiAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZSgnZGF0ZScsICRkYXRlKTsKICAgICAgICAgICAgfSkKICAgICAgICAgICAgLT53aGVyZUluKCdjaGFydF9vZl9hY2NvdW50X2lkJywgY2FsbF91c2VyX2Z1bmNfYXJyYXkoJ2FycmF5X21lcmdlJywgZ2V0QWxsQWNjb3VudHMoaXNzZXQoJGdyb3VwLT5pZCkgPyAkZ3JvdXAtPmlkIDogMCwgW10sICRhbGwpKSkKICAgICAgICAgICAgLT53aGVyZSgnZGViaXRfY3JlZGl0JywgJ0MnKQogICAgICAgICAgICAtPnN1bSgnYW1vdW50Jyk7CgogICAgICAgICAgICAkZGF0YVtkYXRlKCdkLU0nLCBzdHJ0b3RpbWUoJGRhdGUpKV0gPSAoYWN0dWFsVmFsdWUoJGNsYXNzLCAnRCcsICRkZWJpdCktYWN0dWFsVmFsdWUoJGNsYXNzLCAnQycsICRjcmVkaXQpKTsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gJGRhdGE7Cn0KCmZ1bmN0aW9uIGJhbGFuY2VzKCRhbGwpewogICAgJGJhbGFuY2VzID0gW107CiAgICAkY2xhc3NlcyA9IEFjY291bnRDbGFzczo6YWxsKCk7CiAgICBmb3JlYWNoKCRjbGFzc2VzIGFzICRrZXkgPT4gJGNsYXNzKXsKICAgICAgICAkZ3JvdXAgPSBBY2NvdW50R3JvdXA6OmRvZXNudEhhdmUoJ3BhcmVudCcpLT53aGVyZSgnYWNjb3VudF9jbGFzc19pZCcsICRjbGFzcy0+aWQpLT5maXJzdCgpOwogICAgICAgICRkZWJpdCA9IEVudHJ5SXRlbTo6d2hlcmVJbignY2hhcnRfb2ZfYWNjb3VudF9pZCcsIGNhbGxfdXNlcl9mdW5jX2FycmF5KCdhcnJheV9tZXJnZScsIGdldEFsbEFjY291bnRzKGlzc2V0KCRncm91cC0+aWQpID8gJGdyb3VwLT5pZCA6IDAsIFtdLCAkYWxsKSkpCiAgICAgICAgLT53aGVyZSgnZGViaXRfY3JlZGl0JywgJ0QnKQogICAgICAgIC0+c3VtKCdhbW91bnQnKTsKICAgICAgICAkY3JlZGl0ID0gRW50cnlJdGVtOjp3aGVyZUluKCdjaGFydF9vZl9hY2NvdW50X2lkJywgY2FsbF91c2VyX2Z1bmNfYXJyYXkoJ2FycmF5X21lcmdlJywgZ2V0QWxsQWNjb3VudHMoaXNzZXQoJGdyb3VwLT5pZCkgPyAkZ3JvdXAtPmlkIDogMCwgW10sICRhbGwpKSkKICAgICAgICAtPndoZXJlKCdkZWJpdF9jcmVkaXQnLCAnQycpCiAgICAgICAgLT5zdW0oJ2Ftb3VudCcpOwoKICAgICAgICAkYmFsYW5jZXNbJGNsYXNzLT5uYW1lXSA9IChhY3R1YWxWYWx1ZSgkY2xhc3MsICdEJywgJGRlYml0KS1hY3R1YWxWYWx1ZSgkY2xhc3MsICdDJywgJGNyZWRpdCkpOwogICAgfQogICAgcmV0dXJuICRiYWxhbmNlczsKfQoKZnVuY3Rpb24gZ2F0ZU1hbmFnZXJEYXRhKCRmcm9tID0gZmFsc2UsICR0byA9IGZhbHNlKXsKICAgICRkYXRlUmFuZ2UgPSBkYXRlUmFuZ2UoJGZyb20gPyAkZnJvbSA6IGRhdGUoJ1ktbS1kJywgc3RydG90aW1lKCctMSBtb250aHMnKSksICR0byA/ICR0byA6IGRhdGUoJ1ktbS1kJykpOwogICAgJHBvRGF0YSA9IFtdOwogICAgJGdhdGVJbkRhdGEgPSBbXTsKCiAgICBpZihpc3NldCgkZGF0ZVJhbmdlWzBdKSl7CiAgICAgICAgZm9yZWFjaCAoJGRhdGVSYW5nZSBhcyAka2V5ID0+ICRkYXRlKSB7CiAgICAgICAgICAgICRwb0RhdGFbZGF0ZSgnZC1NJywgc3RydG90aW1lKCRkYXRlKSldID0gUHVyY2hhc2VPcmRlcjo6d2hlcmUoJ2lzX3NlbmQnLCd5ZXMnKS0+d2hlcmUoXERCOjpyYXcoJ3N1YnN0cihgcG9fZGF0ZWAsIDEsIDEwKScpLCAkZGF0ZSktPmNvdW50KCk7CiAgICAgICAgICAgICRnYXRlSW5EYXRhW2RhdGUoJ2QtTScsIHN0cnRvdGltZSgkZGF0ZSkpXSA9IFB1cmNoYXNlT3JkZXI6OndpdGgoWydyZWxHb29kUmVjZWl2ZU5vdGUnXSktPndoZXJlKCdpc19zZW5kJywneWVzJykKICAgICAgICAgICAgLT53aGVyZUhhcygncmVsR29vZFJlY2VpdmVOb3RlJyxmdW5jdGlvbiAoJHF1ZXJ5KXsKICAgICAgICAgICAgICAgICRxdWVyeS0+d2hlcmVSYXcoJ3B1cmNoYXNlX29yZGVycy5pZD1nb29kc19yZWNlaXZlZF9ub3Rlcy5wdXJjaGFzZV9vcmRlcl9pZCcpOwogICAgICAgICAgICB9KQogICAgICAgICAgICAtPndoZXJlKFxEQjo6cmF3KCdzdWJzdHIoYHBvX2RhdGVgLCAxLCAxMCknKSwgJGRhdGUpCiAgICAgICAgICAgIC0+Y291bnQoKTsKICAgICAgICB9CiAgICB9CiAgICAKICAgIHJldHVybiBbCiAgICAgICAgJ3BvJyA9PiAkcG9EYXRhLAogICAgICAgICdnYXRlLWluJyA9PiAkZ2F0ZUluRGF0YQogICAgXTsKfQoKZnVuY3Rpb24gZ2F0ZVF1YWxpdHlDb250cm9sbGVyRGF0YSgkZnJvbSA9IGZhbHNlLCAkdG8gPSBmYWxzZSl7CiAgICAkZGF0ZVJhbmdlID0gZGF0ZVJhbmdlKCRmcm9tID8gJGZyb20gOiBkYXRlKCdZLW0tZCcsIHN0cnRvdGltZSgnLTMwIGRheXMnKSksICR0byA/ICR0byA6IGRhdGUoJ1ktbS1kJykpOwogICAgJGdhdGVJbiA9IFtdOwogICAgJGFwcHJvdmVkID0gW107CiAgICAkcmV0dXJuZWQgPSBbXTsKICAgICRyZXR1cm5lZENoYW5nZWQgPSBbXTsKCiAgICBpZihpc3NldCgkZGF0ZVJhbmdlWzBdKSl7CiAgICAgICAgZm9yZWFjaCAoJGRhdGVSYW5nZSBhcyAka2V5ID0+ICRkYXRlKSB7CiAgICAgICAgICAgICRnYXRlSW5bZGF0ZSgnZC1NJywgc3RydG90aW1lKCRkYXRlKSldID0gUHVyY2hhc2VPcmRlcjo6d2hlcmUoJ2lzX3NlbmQnLCd5ZXMnKQogICAgICAgICAgICAtPndoZXJlSGFzKCdyZWxHb29kUmVjZWl2ZU5vdGUnLGZ1bmN0aW9uICgkcXVlcnkpewogICAgICAgICAgICAgICAgJHF1ZXJ5LT53aGVyZVJhdygncHVyY2hhc2Vfb3JkZXJzLmlkPWdvb2RzX3JlY2VpdmVkX25vdGVzLnB1cmNoYXNlX29yZGVyX2lkJyk7CiAgICAgICAgICAgIH0pCiAgICAgICAgICAgIC0+d2hlcmUoXERCOjpyYXcoJ3N1YnN0cihgcG9fZGF0ZWAsIDEsIDEwKScpLCAkZGF0ZSkKICAgICAgICAgICAgLT5jb3VudCgpOwoKICAgICAgICAgICAgJGFwcHJvdmVkW2RhdGUoJ2QtTScsIHN0cnRvdGltZSgkZGF0ZSkpXSA9IFB1cmNoYXNlT3JkZXI6OndoZXJlKCdpc19zZW5kJywneWVzJykKICAgICAgICAgICAgLT53aGVyZUhhcygncmVsR29vZFJlY2VpdmVOb3RlLnJlbEdvb2RzUmVjZWl2ZWRJdGVtcycsZnVuY3Rpb24gKCRxdWVyeSl7CiAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZSgncXVhbGl0eV9lbnN1cmUnLCAnYXBwcm92ZWQnKTsKICAgICAgICAgICAgfSkKICAgICAgICAgICAgLT53aGVyZShcREI6OnJhdygnc3Vic3RyKGBwb19kYXRlYCwgMSwgMTApJyksICRkYXRlKQogICAgICAgICAgICAtPmNvdW50KCk7CgogICAgICAgICAgICAkcmV0dXJuZWRbZGF0ZSgnZC1NJywgc3RydG90aW1lKCRkYXRlKSldID0gUHVyY2hhc2VPcmRlcjo6d2hlcmUoJ2lzX3NlbmQnLCd5ZXMnKQogICAgICAgICAgICAtPndoZXJlSGFzKCdyZWxHb29kUmVjZWl2ZU5vdGUucmVsR29vZHNSZWNlaXZlZEl0ZW1zJyxmdW5jdGlvbiAoJHF1ZXJ5KXsKICAgICAgICAgICAgICAgIHJldHVybiAkcXVlcnktPndoZXJlKCdxdWFsaXR5X2Vuc3VyZScsICdyZXR1cm4nKTsKICAgICAgICAgICAgfSkKICAgICAgICAgICAgLT53aGVyZShcREI6OnJhdygnc3Vic3RyKGBwb19kYXRlYCwgMSwgMTApJyksICRkYXRlKQogICAgICAgICAgICAtPmNvdW50KCk7CgogICAgICAgICAgICAkcmV0dXJuZWRDaGFuZ2VkW2RhdGUoJ2QtTScsIHN0cnRvdGltZSgkZGF0ZSkpXSA9IFB1cmNoYXNlT3JkZXI6OndoZXJlKCdpc19zZW5kJywneWVzJykKICAgICAgICAgICAgLT53aGVyZUhhcygncmVsR29vZFJlY2VpdmVOb3RlLnJlbEdvb2RzUmVjZWl2ZWRJdGVtcycsZnVuY3Rpb24gKCRxdWVyeSl7CiAgICAgICAgICAgICAgICByZXR1cm4gJHF1ZXJ5LT53aGVyZSgncXVhbGl0eV9lbnN1cmUnLCAncmV0dXJuLWNoYW5nZScpOwogICAgICAgICAgICB9KQogICAgICAgICAgICAtPndoZXJlKFxEQjo6cmF3KCdzdWJzdHIoYHBvX2RhdGVgLCAxLCAxMCknKSwgJGRhdGUpCiAgICAgICAgICAgIC0+Y291bnQoKTsKICAgICAgICB9CiAgICB9CiAgICAKICAgIHJldHVybiBbCiAgICAgICAgJ2dhdGUtaW4nID0+ICRnYXRlSW4sCiAgICAgICAgJ2FwcHJvdmVkJyA9PiAkYXBwcm92ZWQsCiAgICAgICAgJ3JldHVybmVkJyA9PiAkcmV0dXJuZWQsCiAgICAgICAgJ3JldHVybi1jaGFuZ2VkJyA9PiAkcmV0dXJuZWRDaGFuZ2VkLAogICAgXTsKfQoKZnVuY3Rpb24gbWFuYWdlbWVudERhdGEoJGZyb20gPSBmYWxzZSwgJHRvID0gZmFsc2UpewogICAgJGRhdGVSYW5nZSA9IGRhdGVSYW5nZSgkZnJvbSA/ICRmcm9tIDogZGF0ZSgnWS1tLWQnLCBzdHJ0b3RpbWUoJy0zMCBkYXlzJykpLCAkdG8gPyAkdG8gOiBkYXRlKCdZLW0tZCcpKTsKICAgICR0b3RhbCA9IFtdOwogICAgJHByb2Nlc3NpbmcgPSBbXTsKICAgICRhcHByb3ZlZCA9IFtdOwogICAgJGhhbHQgPSBbXTsKCiAgICBpZihpc3NldCgkZGF0ZVJhbmdlWzBdKSl7CiAgICAgICAgZm9yZWFjaCAoJGRhdGVSYW5nZSBhcyAka2V5ID0+ICRkYXRlKSB7CiAgICAgICAgICAgICRwcm9jZXNzaW5nW2RhdGUoJ2QtTScsIHN0cnRvdGltZSgkZGF0ZSkpXSA9IFF1b3RhdGlvbnM6OndoZXJlKFsKICAgICAgICAgICAgICAgICdzdGF0dXMnID0+ICdhY3RpdmUnLAogICAgICAgICAgICAgICAgJ2lzX3BvX2dlbmVyYXRlJyA9PiAnbm8nCiAgICAgICAgICAgIF0pCiAgICAgICAgICAgIC0+d2hlcmUoJ2lzX2FwcHJvdmVkJywgJ3Byb2Nlc3NpbmcnKQogICAgICAgICAgICAtPndoZXJlKFxEQjo6cmF3KCdzdWJzdHIoYHF1b3RhdGlvbl9kYXRlYCwgMSwgMTApJyksICRkYXRlKQogICAgICAgICAgICAtPmdyb3VwQnkoJ3JlcXVlc3RfcHJvcG9zYWxfaWQnKQogICAgICAgICAgICAtPmNvdW50KCk7CgogICAgICAgICAgICAkYXBwcm92ZWRbZGF0ZSgnZC1NJywgc3RydG90aW1lKCRkYXRlKSldID0gUXVvdGF0aW9uczo6d2hlcmUoWwogICAgICAgICAgICAgICAgJ3N0YXR1cycgPT4gJ2FjdGl2ZScsCiAgICAgICAgICAgICAgICAnaXNfcG9fZ2VuZXJhdGUnID0+ICdubycKICAgICAgICAgICAgXSkKICAgICAgICAgICAgLT53aGVyZSgnaXNfYXBwcm92ZWQnLCAnYXBwcm92ZWQnKQogICAgICAgICAgICAtPndoZXJlKFxEQjo6cmF3KCdzdWJzdHIoYHF1b3RhdGlvbl9kYXRlYCwgMSwgMTApJyksICRkYXRlKQogICAgICAgICAgICAtPmdyb3VwQnkoJ3JlcXVlc3RfcHJvcG9zYWxfaWQnKQogICAgICAgICAgICAtPmNvdW50KCk7CgogICAgICAgICAgICAkaGFsdFtkYXRlKCdkLU0nLCBzdHJ0b3RpbWUoJGRhdGUpKV0gPSBRdW90YXRpb25zOjp3aGVyZShbCiAgICAgICAgICAgICAgICAnc3RhdHVzJyA9PiAnYWN0aXZlJywKICAgICAgICAgICAgICAgICdpc19wb19nZW5lcmF0ZScgPT4gJ25vJwogICAgICAgICAgICBdKQogICAgICAgICAgICAtPndoZXJlKCdpc19hcHByb3ZlZCcsICdoYWx0JykKICAgICAgICAgICAgLT53aGVyZShcREI6OnJhdygnc3Vic3RyKGBxdW90YXRpb25fZGF0ZWAsIDEsIDEwKScpLCAkZGF0ZSkKICAgICAgICAgICAgLT5ncm91cEJ5KCdyZXF1ZXN0X3Byb3Bvc2FsX2lkJykKICAgICAgICAgICAgLT5jb3VudCgpOwoKICAgICAgICAgICAgJHRvdGFsW2RhdGUoJ2QtTScsIHN0cnRvdGltZSgkZGF0ZSkpXSA9IFF1b3RhdGlvbnM6OndoZXJlKFsKICAgICAgICAgICAgICAgICdzdGF0dXMnID0+ICdhY3RpdmUnLAogICAgICAgICAgICAgICAgJ2lzX3BvX2dlbmVyYXRlJyA9PiAnbm8nCiAgICAgICAgICAgIF0pCiAgICAgICAgICAgIC0+d2hlcmVJbignaXNfYXBwcm92ZWQnLCBbJ3Byb2Nlc3NpbmcnLCAnYXBwcm92ZWQnLCAnaGFsdCddKQogICAgICAgICAgICAtPndoZXJlKFxEQjo6cmF3KCdzdWJzdHIoYHF1b3RhdGlvbl9kYXRlYCwgMSwgMTApJyksICRkYXRlKQogICAgICAgICAgICAtPmdyb3VwQnkoJ3JlcXVlc3RfcHJvcG9zYWxfaWQnKQogICAgICAgICAgICAtPmNvdW50KCk7CiAgICAgICAgfQogICAgfQogICAgCiAgICByZXR1cm4gWwogICAgICAgICd0b3RhbCcgPT4gJHRvdGFsLAogICAgICAgICdwcm9jZXNzaW5nJyA9PiAkcHJvY2Vzc2luZywKICAgICAgICAnYXBwcm92ZWQnID0+ICRhcHByb3ZlZCwKICAgICAgICAnaGFsdCcgPT4gJGhhbHQsCiAgICBdOwp9
<?php
bolt_decrypt( __FILE__ , 'aPpXN0'); return 0;
##!!!##
<?php
bolt_decrypt( __FILE__ , '6jOOWV'); return 0;
##!!!##
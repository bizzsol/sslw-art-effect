<?php
bolt_decrypt( __FILE__ , 'aXOC2n'); return 0;
##!!!##
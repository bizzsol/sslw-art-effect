<?php
bolt_decrypt( __FILE__ , 'SSBt2j'); return 0;
##!!!##
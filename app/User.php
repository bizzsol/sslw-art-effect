<?php
bolt_decrypt( __FILE__ , '0YcLIv'); return 0;
##!!!##
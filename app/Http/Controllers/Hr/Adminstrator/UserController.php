<?php
bolt_decrypt( __FILE__ , 'w4Gme4'); return 0;
##!!!##
<?php
bolt_decrypt( __FILE__ , 'F0YeWW'); return 0;
##!!!##
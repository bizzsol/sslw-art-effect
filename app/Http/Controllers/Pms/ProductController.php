<?php
bolt_decrypt( __FILE__ , '1LHneJ'); return 0;
##!!!##
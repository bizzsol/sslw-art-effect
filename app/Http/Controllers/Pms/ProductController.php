<?php
bolt_decrypt( __FILE__ , '8eMqk1'); return 0;
##!!!##
<?php
bolt_decrypt( __FILE__ , 'YOTAz4'); return 0;
##!!!##
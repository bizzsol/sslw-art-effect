<?php
bolt_decrypt( __FILE__ , 'Hz2AjC'); return 0;
##!!!##
<?php
bolt_decrypt( __FILE__ , 'rDGJLe'); return 0;
##!!!##
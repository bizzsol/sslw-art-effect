<?php
bolt_decrypt( __FILE__ , 'tMZTCV'); return 0;
##!!!##
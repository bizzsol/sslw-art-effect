<?php
bolt_decrypt( __FILE__ , 'MXa1Cq'); return 0;
##!!!##
<?php
bolt_decrypt( __FILE__ , '5fhgZ3'); return 0;
##!!!##
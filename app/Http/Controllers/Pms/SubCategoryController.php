<?php
bolt_decrypt( __FILE__ , 'SCy3Wg'); return 0;
##!!!##

namespace App\Http\Controllers\Pms;

use App\Http\Controllers\Controller;
use App\Imports\CategoryImport;
use App\Models\PmsModels\Category;
use App\Models\PmsModels\ProductAttribute;
use App\Models\PmsModels\RequisitionType;
use App\Models\PmsModels\Warehouses;
use App\Models\PmsModels\CategoryDepartment;
use App\Models\Hr\Department;
use Illuminate\Http\Request;
use Illuminate\Validation\Rule;
use Maatwebsite\Excel\Facades\Excel;

use \App\Models\PmsModels\Attribute;
use \App\Models\PmsModels\AttributeOption;
use \App\Models\PmsModels\CategoryAttribute;

use DB, DataTables;

class SubCategoryController extends Controller
{
    public function headerColumns($value='')
    {
        return array(
            ['SL', 'SL', 'text-center'],
            ['product_type', 'product_type', 'text-center'],
            ['main_category', 'main_category', 'text-center'],
            ['code', 'code', 'text-center'],
            ['name', 'name', 'text-center'],
            ['attributes', 'attributes'],
            ['service', 'service', 'text-center'],
            ['actions', 'actions', 'text-center']
        );
    }
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        try {
            $title = 'Sub Category';

            $is_fixed_asset = request()->has('fixed-assets');
            $is_cwip = request()->has('cwip');

            $categories = Category::has('category')
            ->with(['category', 'attributes.attribute'])
            // ->where('is_fixed_asset', $is_fixed_asset)
            // ->where('is_cwip', $is_cwip)
            ->when(!datatableOrdering(), function($query){
                return $query->orderby('parent_id', 'desc');
            });

            if (request()->ajax()) {
                $attributeOptions = AttributeOption::all();
                return Datatables::of($categories)
                ->addIndexColumn()
                ->addColumn('product_type', function($subCategory){
                    return $subCategory->category->is_fixed_asset == 1 ? 'Fixed Asset' : ($subCategory->category->is_cwip == 1 ? 'CWIP' : 'Products');
                })
                ->addColumn('service', function ($category){
                    return $category->is_service == 1 ? '<a class="btn btn-success btn-xs">Yes</a>' : '<a class="btn btn-dark btn-xs">No</a>';
                })
                ->addColumn('main_category', function($subCategory){
                    return isset($subCategory->category->name)?$subCategory->category->name:'';
                })
                ->filterColumn('main_category', function ($query, $keyword) {
                    return $query->whereHas('category', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->addColumn('attributes', function ($subCategory) use($attributeOptions){
                    $attr ='';
                    $attributes = isset($subCategory->attributes[0]) ? collect($subCategory->attributes)->sortBy('serial')->values()->all() : [];
                    if (isset($attributes[0])) {
                        $attr .='<ul>';
                            foreach($attributes as $key => $categoryAttribute){
                                $attr .='<li><strong>'.$categoryAttribute->attribute->name.':</strong> '.$attributeOptions->where('attribute_id', $categoryAttribute->attribute_id)->whereIn('id', (!empty($categoryAttribute->options) ? json_decode($categoryAttribute->options, true) : []))->pluck('name')->implode(', ').'</li>';
                            }
                        $attr .='</ul>';
                    }
                    return $attr;
                })
                ->filterColumn('attributes', function ($query, $keyword) {
                    return $query->whereHas('attributes.attribute', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    })->orWhereHas('attributes.attribute.options', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('attributes', function ($query, $order) {
                    return pleaseSortMe($query, $order, CategoryAttribute::select('attributes.code')
                        ->join('attributes', 'attributes.id', '=', 'category_attributes.attribute_id')
                        ->whereColumn('category_attributes.category_id', 'categories.id')
                        ->take(1)
                    );
                })
                ->addColumn('actions', function($subCategory){
                    $actions = '';

                    $actions .='<a href="'.url('pms/product-management/sub-category/'.$subCategory->id.'/create-attributes').'" class="btn btn-success m-1 btn-xs"><i class="las la-sitemap"></i></a>';

                    $url = route('pms.product-management.sub-category.edit', $subCategory->id);
                    if(request()->has('fixed-assets')){
                        $url = url('pms/fixed-assets/sub-category/edit/'.$subCategory->id.'?fixed-assets');
                    }elseif(request()->has('cwip')){
                        $url = url('pms/cwip/sub-category/'.$subCategory->id.'/edit?cwip');
                    }
                    $actions .= '<a href="'. $url .'" class="btn btn-info m-1 btn-xs"><i class="las la-edit"></i></a>';
                    $actions .= '<a href="javascript:void(0)" data-role="delete" data-src="'. route('pms.product-management.sub-category.destroy', $subCategory->id) .'" class="btn btn-danger m-1 btn-xs deleteBtn" onclick="deleteFromCRUD($(this))"><i class="las la-trash"></i></a>';

                    return $actions;
                })
                ->rawColumns(['attributes', 'actions', 'service'])
                ->make(true);
            }

            return view('pms.backend.pages.sub-category.index',[
                'title' =>$title,
                'headerColumns' => $this->headerColumns(),
                'is_fixed_asset' => $is_fixed_asset,
                'is_cwip' => $is_cwip,
            ]);

        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

 
    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $title = "Sub Category Create";
        $categories = Category::with([
            'category', 'departmentsList'
        ])
        ->doesntHave('category')
        // ->where('is_fixed_asset',request()->has('fixed-assets'))
        // ->where('is_cwip',request()->has('cwip'))
        ->orderby('code', 'asc')
        ->get();
        $requisitions = RequisitionType::all();
        $departments= Department::all();
        $code = uniqueCode(7,'CT-','categories','id');
        $chartOfAccountsOptions = chartOfAccountsOptions([], 0, 0, getAllGroupAndLedgers());

        return view('pms.backend.pages.sub-category.create', compact('title', 'categories','requisitions','departments','code', 'chartOfAccountsOptions'));
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function createAttributes($category_id)
    {
        $category = Category::findOrFail($category_id);
        $data = [
            'title' => "Attributes for #".$category->name,
            'subcategory' => $category,
            'attributes' => Attribute::has('options')->with(['options'])->get(),
            'categoryAttributes' => CategoryAttribute::where('category_id', $category->id)->pluck('attribute_id')->toArray(),
        ];

        return view('pms.backend.pages.sub-category.attributes', $data);
    }

    public function updateAttributes(Request $request, $id)
    {
        DB::beginTransaction();
        try {
            $category = Category::findOrFail($id);
            $category->fill($request->all())->save();

            if(isset($request->productAttributes[0])){
                foreach ($request->productAttributes as $key => $attribute_id) {
                    CategoryAttribute::updateOrCreate([
                            'category_id' => $category->id,
                            'attribute_id' => $attribute_id
                    ], [
                        'serial' => $request->attributeSerials[$attribute_id],
                        'options' => json_encode($request->attributeOptions[$attribute_id]),
                    ]);
                }
            }

            CategoryAttribute::where('category_id', $category->id)
            ->whereNotIn('attribute_id', $request->productAttributes)
            ->delete();

            $productAttributes = ProductAttribute::whereHas('attributeOption.attribute.categories', function($query) use($category){
                return $query->where('category_id', $category->id);
            })->get();

            if(isset($productAttributes[0])){
                foreach($productAttributes as $key => $productAttribute){
                    $serial = CategoryAttribute::where('category_id', $category->id)
                    ->whereHas('attribute.options', function($query) use($productAttribute){
                        return $query->where('id', $productAttribute->attribute_option_id);
                    })
                    ->first();
                    $productAttribute->serial_no = (isset($serial->serial) ? $serial->serial : 0);
                    $productAttribute->save();
                }
            }
            
            DB::commit();
            return $this->backWithSuccess('Sub Category Attributes have benn updated. ');
        }catch (\Throwable $th){
            DB::rollback();
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $this->validate($request, [
            'code' => ['required', 'string', 'max:255', 'unique:categories'],
            'name' => ['required', 'string', 'max:255'],
            'parent_id' => ['nullable', 'integer'],
            // 'requisition_type_id' => ['required', 'integer'],
        ]);
        try {
            $inputs = $request->all();
            unset($inputs['_token']);
            unset($inputs['_method']);

            $category = Category::create($inputs);

            $parent = Category::find($request->parent_id);
            $category->is_fixed_asset = $parent->is_fixed_asset;
            $category->is_cwip = $parent->is_cwip;
            $category->is_service = $parent->is_service;
            $category->save();

            $departments = CategoryDepartment::where('category_id', $request->parent_id)->pluck('hr_department_id')->toArray();
            $category->department()->sync($departments);

            // return $this->redirectBackWithSuccess('Sub Category created successfully','pms.product-management.sub-category.index');

            $url = url('pms/product-management/sub-category');
            if($parent->is_fixed_asset == 1){
                $url = url('pms/fixed-assets/sub-category').'?fixed-assets';
            }elseif($parent->is_cwip == 1){
                $url = url('pms/cwip/sub-category').'?cwip';
            }

            return $this->urlRedirectBack('Sub Category updated successfully', $url, 'success');
            
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($category_id)
    {
        try {
            $category = Category::findOrFail($category_id);
            $category->src = route('pms.product-management.sub-category.update', $category->id);
            $category->req_type = 'put';
            $category->parent_id = !$category->category?null:$category->category;

            $array=[];
            foreach($category->departmentsList as $key => $department){
                array_push($array,$department->hr_department_id);
            }

            $new_array=[];

            foreach(Department::whereIn('hr_department_id',$array)->select('hr_department_id')->get() as $values){
                array_push($new_array, $values->hr_department_id);
            }

            $data = [
                'status' => 'success',
                'category' => $category,
                'departments' => Department::all(),
                'departmentsId'=>Department::whereIn('hr_department_id',$array)->pluck('hr_department_id')->all(),
                'inventory_account_id' => chartOfAccountsOptions([], $category->inventory_account_id),
                'cogs_account_id' => chartOfAccountsOptions([], $category->cogs_account_id),
                'inventory_adjustments_account_id' => chartOfAccountsOptions([], $category->inventory_adjustments_account_id),
            ];

            return response()->json($data);
        }catch (\Throwable $th){
            $data = [
                'status' => null,
                'info' => $th->getMessage()
            ];
            return response()->json($data);
        }
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        try {
            $category = Category::findOrFail($id);
            $category->parent_id = !$category->category?null:$category->category;

            $data = [
                'title' => 'Edit Sub-Category',
                'category' => $category,
                'categories' => Category::doesntHave('category')
                ->with([
                    'departmentsList', 'category'
                ])
                ->orderby('code', 'asc')
                ->get(),
                'departments' => Department::all(),
                'departmentsId' => $category->departmentsList->pluck('hr_department_id')->toArray(),
                'chartOfAccountsOptions' => chartOfAccountsOptions([], 0, 0, getAllGroupAndLedgers())
            ];

            return view('pms.backend.pages.sub-category.edit', $data);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $category_id)
    {
        $category = Category::findOrFail($category_id);

        $this->validate($request, [
            'code' => ['required', 'string', 'max:255', Rule::unique('categories')->ignore($category->id)],
            'name' => ['required', 'string', 'max:255'],
            'parent_id' => ['nullable', 'integer'],
            // 'requisition_type_id' => ['required', 'integer'],
        ]);
        try {
            $departments = CategoryDepartment::where('category_id', $category->parent_id)->pluck('hr_department_id')->toArray();

            $inputs = $request->all();
            unset($inputs['_token']);
            unset($inputs['_method']);

            $parent = Category::find($request->parent_id);
            $category->is_fixed_asset = $parent->is_fixed_asset;
            $category->is_cwip = $parent->is_cwip;
            $category->save();

            $category->update($inputs);

            $category->department()->sync($departments);

            return $this->urlRedirectBack('Sub Category updated successfully', url('pms/product-management/sub-category'), 'success');

        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($category_id)
    {
        try {

            $category = Category::findOrFail($category_id);

            if ($category->products->count() > 0 || $category->subCategory->count() > 0) {
                return response()->json([
                    'success' => false,
                    'message' => 'SubCategory can not be deleted.'
                ]);
            }

            $category->subCategory->each->delete();
            CategoryDepartment::where('category_id', $category->id)->delete();
            $category->delete();
            return response()->json([
                'success' => true,
                'message' => 'SubCategory Successfully Deleted.'
            ]);

        }catch (\Throwable $th){
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }


    public function importCategory(Request $request){

        $this->validate($request, [
            'category_file' => 'required|mimes:xls,xlsx'
        ]);

        $path = $request->file('category_file')->getRealPath();

        try {
            Excel::import(new CategoryImport(), $path);

            return $this->backWithSuccess('Category Data Imported successfully.');

        }catch (\Maatwebsite\Excel\Validators\ValidationException $e) {

            $errorMessage='';
            $rowNumber=1;
            $rowNumber+=$e->failures()[0]->row();
            $column=$e->failures()[0]->attribute();

            $errorMessage.=$e->failures()[0]->errors()[0].' for row '.$rowNumber.' on Column '.$column;

            return $this->backWithError($errorMessage);
        }
    }
}

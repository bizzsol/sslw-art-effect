<?php
bolt_decrypt( __FILE__ , 'GHlm3M'); return 0;
##!!!##
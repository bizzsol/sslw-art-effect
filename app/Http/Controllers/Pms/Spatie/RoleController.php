<?php
bolt_decrypt( __FILE__ , 'SsO82x'); return 0;
##!!!##
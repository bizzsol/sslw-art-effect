<?php
bolt_decrypt( __FILE__ , 'XnQELP'); return 0;
##!!!##
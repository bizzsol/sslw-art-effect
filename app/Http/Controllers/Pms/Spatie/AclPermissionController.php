<?php
bolt_decrypt( __FILE__ , 'NNxJCV'); return 0;
##!!!##
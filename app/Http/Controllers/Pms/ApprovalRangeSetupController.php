<?php
bolt_decrypt( __FILE__ , 'p1aOw0'); return 0;
##!!!##
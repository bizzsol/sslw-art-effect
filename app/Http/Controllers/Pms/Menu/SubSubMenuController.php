<?php
bolt_decrypt( __FILE__ , 'DFmMJi'); return 0;
##!!!##
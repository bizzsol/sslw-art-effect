<?php
bolt_decrypt( __FILE__ , 'XAW6jg'); return 0;
##!!!##
<?php
bolt_decrypt( __FILE__ , 'V2uEu4'); return 0;
##!!!##
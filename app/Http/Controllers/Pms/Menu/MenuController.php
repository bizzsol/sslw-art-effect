<?php
bolt_decrypt( __FILE__ , 'b7kw3R'); return 0;
##!!!##

namespace App\Http\Controllers\Pms\Menu;

use App\Http\Controllers\Controller;

use App\Models\PmsModels\Menu\Menu;
use App\Models\PmsModels\Menu\SubMenu;
use App\Models\PmsModels\Menu\SubSubMenu;
use Illuminate\Http\Request;

use App\Http\Requests;

use Image, DB, Validator, DataTables;
use Spatie\Permission\Models\Permission;

class MenuController extends Controller
{
    public function __construct(){
        $this->middleware('auth');
    }

    public function headerColumns($value = '')
    {
        return array(
            ['SL', 'SL'],
            ['serial', 'serial', 'text-center'],
            ['module', 'module', 'text-center'],
            ['name', 'name'],
            ['url', 'url'],
            ['menu_for', 'menu_for', 'text-center'],
            ['sub_menu', 'sub_menu', 'text-center'],
            ['status', 'status', 'text-center'],
            ['created_at', 'created_at', 'text-center'],
            ['actions', 'actions', 'text-center'],
        );
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        /*
        $projectMenus = \App\Models\PmsModels\Accounts\Menu\AccountsMenu::with([
            'subMenu'
        ])->get();
        foreach($projectMenus as $menu){
            $newMenu = Menu::create([
                'module' => 'finance',
                'name' => $menu->name,
                'name_bn' => $menu->name_bn,
                'url' => $menu->url,
                'icon_class' => $menu->icon_class,
                'icon' => $menu->icon,
                'big_icon' => $menu->big_icon,
                'status' => $menu->status,
                'slug' => $menu->slug,
                'serial_num' => $menu->serial_num,
                'menu_for' => $menu->menu_for,
                'open_new_tab' => $menu->open_new_tab,
                'created_by' => $menu->created_by,
                'updated_by' => $menu->updated_by,
            ]);

            if($newMenu){
                if($menu->subMenu->count() > 0){
                    foreach($menu->subMenu as $key => $sub_menu){
                        SubMenu::create([
                            'module' => $newMenu->module,
                            'menu_id' => $newMenu->id,
                            'name' => $sub_menu->name,
                            'name_bn' => $sub_menu->name_bn,
                            'url' => $sub_menu->url,
                            'icon_class' => $sub_menu->icon_class,
                            'icon' => $sub_menu->icon,
                            'big_icon' => $sub_menu->big_icon,
                            'status' => $sub_menu->status,
                            'slug' => $sub_menu->slug,
                            'serial_num' => $sub_menu->serial_num,
                            'menu_for' => $sub_menu->menu_for,
                            'open_new_tab' => $sub_menu->open_new_tab,
                            'created_by' => $sub_menu->created_by,
                            'updated_by' => $sub_menu->updated_by,
                        ]);
                    }
                }
            }
        }

        return Menu::with([
            'subMenu'
        ])->where('module', 'finance')->get();
        */

        try{
            if (request()->ajax()) {
                $menus = Menu::with([
                    'subMenu'
                ])
                ->when(!datatableOrdering(), function($query){
                    return $query->orderby('serial_num', 'desc');
                });

                return DataTables::of($menus)
                    ->addIndexColumn()
                    ->addColumn('serial', function ($menu) {
                        return $menu->serial_num;
                    })
                    ->filterColumn('serial', function ($query, $keyword) {
                        return $query->where('serial_num', 'LIKE', '%' . $keyword . '%');
                    })
                    ->orderColumn('serial', function ($query, $order) {
                        return $query->orderby('serial_num', $order);
                    })
                    ->editColumn('module', function ($menu) {
                        return ucwords(implode(' ', explode('-', $menu->module)));
                    })
                    ->editColumn('name', function ($menu) {
                        return '<a href="'.route('pms.acl.menu.edit', $menu->id).'"><i class="'.$menu->icon_class.'"></i> '.$menu->name.'</a>';
                    })
                    ->editColumn('url', function ($menu) {
                        return '<a href="'.url($menu->url).'" target="_blank">'.url($menu->url).'</a>';
                    })
                    ->editColumn('menu_for', function ($menu) {
                        return '<span class="text-success">'.$menu->menu_for.'</span>';
                    })
                    ->addColumn('sub_menu', function ($menu) {
                        return '<a href="'.route('pms.acl.sub-menu.show', $menu->id).'" class="btn btn-primary btn-sm" style="color: #fff;">Sub Menu ('.$menu->subMenu->count('id').')</a>';
                    })
                    ->addColumn('status', function ($menu) {
                        return '<i class="'.($menu->status == Menu::ACTIVE ? 'fa fa-check-circle text-success' : 'fa fa-times-circle').'"></i>';
                    })
                    ->editColumn('created_at', function ($menu) {
                        return date('Y-m-d g:i a', strtotime($menu->created_at));
                    })
                    ->addColumn('actions', function ($menu) {
                        return '<a class="btn btn-xs btn-primary m-1" href="'.route('pms.acl.menu.edit', $menu->id).'"><i class="la la-edit"></i></a>
                                <a class="btn btn-xs btn-danger  m-1" onclick="deleteFromCRUD($(this))" data-src="'.route('pms.acl.menu.destroy', $menu->id).'"><i class="la la-trash"></i></a>';
                    })
                    ->rawColumns(['name', 'url', 'menu_for', 'sub_menu', 'status', 'actions'])
                    ->toJson();
            }

            return view('pms.backend.pages.menu.index', [
                'title' => 'Menu', 
                'headerColumns' => $this->headerColumns(),
            ]);

        }catch (\Throwable $th) {
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $title='Create New Menu';
        $max_serial=Menu::max('serial_num');
        $permissions = Permission::orderBy('id','DESC')->pluck('name', 'name');
        $menuFor=[
            Menu::ADMIN_MENU => Menu::ADMIN_MENU,
            Menu::CLIENT_MENU => Menu::CLIENT_MENU,
            Menu::USER_MENU => Menu::USER_MENU
        ];
        $status=[Menu::ACTIVE  => Menu::ACTIVE ,
            Menu::INACTIVE  => Menu::INACTIVE];

        $openTab=[Menu::NO_OPEN_NEW_TAB  => Menu::NO_OPEN_NEW_TAB ,
            Menu::OPEN_NEW_TAB  => Menu::OPEN_NEW_TAB];
        return view('pms.backend.pages.menu.create',compact('title','max_serial','permissions','menuFor','status','openTab'));

    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {

        try{
            $input = $request->all();

            if(isset($input['page'])){
                $page=Page::select('name','name_bn')->where('link',$input['page'])->first();
                $input['module']=$page['module'];
                $input['name']=$page['name'];
                $input['name_bn']=$page['name_bn'];
                $input['url']="page/".$input['page'];
            }


            $validator = Validator::make($input, [
                'module'=> 'required',
                'name'=> 'required',
                'url'=> 'required',
                'icon' => 'mimes:jpeg,jpg,bmp,png'
            ]);

            if ($validator->fails()) {
                return redirect()->back()->withErrors($validator)->withInput();
            }
            $input['slug']=json_encode($request->slug);

            if ($request->hasFile('icon')){
                $input['icon']=$this->photoUpload($request->file('icon'),'images/menu/icon',32);
                //$input['big_icon']=$this->photoUpload($request->file('icon'),'images/menu/big-icon/',128);
            }

            Menu::create($input);

            return $this->backWithSuccess('Menu created successfully');

        }catch(\Exception $e){
            return $this->backWithError($e->getMessage());
        }

    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        $title='Edit Menu Data';
        $max_serial=Menu::max('serial_num');
        $data=Menu::findOrFail($id);
        $permissions = Permission::orderBy('id','DESC')->pluck('name', 'name');
        $menuFor=[
            Menu::ADMIN_MENU => Menu::ADMIN_MENU,
            Menu::CLIENT_MENU => Menu::CLIENT_MENU,
            Menu::USER_MENU => Menu::USER_MENU
        ];
        $status=[Menu::ACTIVE  => Menu::ACTIVE ,
            Menu::INACTIVE  => Menu::INACTIVE];

        $openTab=[Menu::NO_OPEN_NEW_TAB  => Menu::NO_OPEN_NEW_TAB ,
            Menu::OPEN_NEW_TAB  => Menu::OPEN_NEW_TAB];

        return view('pms.backend.pages.menu.edit',compact('title','data','max_serial','permissions','menuFor','status','openTab'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {

        $input = $request->all();
        $data=Menu::findOrFail($id);

        $validator = Validator::make($input, [
            'module'    => 'required',
            'name'    => 'required',
            'url'          => 'required',
            'icon' => 'mimes:jpeg,jpg,bmp,png'
        ]);

        if ($validator->fails()) {
            return redirect()->back()->withErrors($validator)->withInput();
        }

        $input['slug']=json_encode($request->slug);
        try{

            if ($request->hasFile('icon')){
                $input['icon']=$this->photoUpload($request->file('icon'),'images/menu/icon',32);

                if (file_exists(asset($data->icon))){ unlink(asset($data->icon));  }
                if (file_exists(asset($data->big_icon))){ unlink(asset($data->big_icon));  }
            }

            $data->update($input);
            return $this->backWithSuccess('User created successfully');
        }catch(\Exception $e){
            return $this->backWithError($e->getMessage());
        }

    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        $data = Menu::findOrFail($id);
        DB::beginTransaction();
        try {
            SubMenu::whereIn('menu_id', [$id])->delete();
            SubSubMenu::whereIn('menu_id', [$id])->delete();
            $data->delete();
            $bug = 0;
            if (file_exists(asset($data->icon))){ unlink(asset($data->icon)); }
            if (file_exists(asset($data->big_icon))){ unlink(asset($data->big_icon)); }
            DB::commit();

            return response()->json([
                'success' => true,
                'message' => 'Menu Deleted successfully'
            ]);
        } catch (\Exception $e) {
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }


    public function page(){
        $max_serial=Menu::max('serial_num');
        $page=Page::where('status',1)->pluck('name','link');
        return view('backend.menu.pageMenu',compact('max_serial','page'));
    }
}

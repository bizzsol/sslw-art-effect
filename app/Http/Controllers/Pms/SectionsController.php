<?php
bolt_decrypt( __FILE__ , 'ih2RRY'); return 0;
##!!!##

namespace App\Http\Controllers\Pms;

use App\Http\Controllers\Controller;
use Cache, DB;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Http\Request;
use App\Models\PmsModels\Requisition;
use App\Models\PmsModels\Notification;
use App\Models\PmsModels\RequisitionDeliveryItem;
use App\Models\PmsModels\Grn\GoodsReceivedItemStockIn;
use App\Models\PmsModels\Purchase\PurchaseOrder;
use App\Models\PmsModels\Rfp\RequestProposal;
use App\Models\PmsModels\Quotations;
use App\Models\PmsModels\QuotationsItems;
use App\Models\UserColumnVisibility;
use App\Models\SystemInformation;
use App\Module;
use App\Models\Hr\Unit;
use App\Models\Hr\Department;
use App\Models\Hr\Section;
use Auth, DataTables;

class SectionsController extends Controller
{  
    public function headerColumns()
    {
        return  array(
            ['SL', 'SL', 'text-center'],
            ['SBU', 'SBU'],
            ['department', 'department'],
            ['section_code', 'section_code', 'text-center'],
            ['section_name', 'section_name', 'text-center'],
            ['actions', 'actions', 'text-center'],
        );
    }
    
    public function index(Request $request)
    {
        /*
            $departments = Department::doesntHave('sections')->get();
            if($departments->count() > 0){
                foreach($departments as $key => $department){
                    Section::updateOrCreate([
                        'hr_section_department_id' => $department->hr_department_id,
                        'hr_section_name' => $department->hr_department_name,
                        'hr_section_name_bn' => $department->hr_department_name,
                        'hr_section_code' => $department->hr_department_code,
                    ], [
                        
                    ]);
                }
            }
            return 'ok';
        */
        
        try {
            if (request()->ajax()) {
                return Datatables::of(
                        Section::with([
                            'department.unit'
                        ])
                        ->whereHas('department.unit', function($query){
                            return $query->whereIn('company_id', auth()->user()->companies->pluck('company_id')->toArray());
                        })
                        ->whereIn('hr_section_id', auth()->user()->priorities->pluck('hr_section_id')->toArray())
                    )
                    ->addIndexColumn()

                    ->addColumn('SBU', function($section){
                        return  isset($section->department->unit->hr_unit_name) ? '['.$section->department->unit->hr_unit_code.'] '.$section->department->unit->hr_unit_name : '';
                    })
                    ->filterColumn('SBU', function ($query, $keyword) {
                        return $query->whereHas('department.unit', function ($query) use($keyword) {
                            $query->where('hr_unit_code', 'LIKE', '%'.$keyword.'%')
                                  ->orWhere('hr_unit_name', 'LIKE', '%'.$keyword.'%');
                        });
                    })
                    ->orderColumn('SBU', function ($query, $order) {
                        return pleaseSortMe($query, $order, Department::select('hr_unit.hr_unit_code')
                            ->join('hr_unit', 'hr_unit.hr_unit_id', '=',  'hr_department.hr_unit_id')
                            ->whereColumn('hr_department.hr_department_id', 'hr_section.hr_section_department_id')
                            ->take(1)
                        );
                    })

                    ->addColumn('department', function($section){
                        return  isset($section->department->hr_department_name) ? '['.$section->department->hr_department_code.'] '.$section->department->hr_department_name : '';
                    })
                    ->filterColumn('department', function ($query, $keyword) {
                        return $query->whereHas('department', function ($query) use($keyword) {
                            $query->where('hr_department_name', 'LIKE', '%'.$keyword.'%')
                                  ->orWhere('hr_department_code', 'LIKE', '%'.$keyword.'%');
                        });
                    })
                    ->orderColumn('department', function ($query, $order) {
                        return pleaseSortMe($query, $order, Department::select('hr_department.hr_department_code')
                            ->whereColumn('hr_department.hr_department_id', 'hr_section.hr_section_department_id')
                            ->take(1)
                        );
                    })
                    
                    ->addColumn('section_code', function($section){
                        return $section->hr_section_code;
                    })
                    ->filterColumn('section_code', function ($query, $keyword) {
                        return $query->where('hr_section_code', 'LIKE', '%'.$keyword.'%');
                    })
                    ->orderColumn('section_code', function ($query, $order) {
                        return $query->orderby('hr_section_code', $order);
                    })

                    ->addColumn('section_name', function($section){
                        return $section->hr_section_name;
                    })
                    ->filterColumn('section_name', function ($query, $keyword) {
                        return $query->where('hr_section_name', 'LIKE', '%'.$keyword.'%');
                    })
                    ->orderColumn('section_name', function ($query, $order) {
                        return $query->orderby('hr_section_name', $order);
                    })

                    ->addColumn('actions', function($section){
                        return '<a href="'.url('pms/sections/'.$section->hr_section_id.'/edit').'" class="btn btn-info btn-xs"><i class="la la-edit"></i></a><a class="btn btn-xs btn-danger ml-2" onclick="deleteFromCRUD($(this))" data-src="'.route('pms.sections.destroy', $section->hr_section_id).'"><i class="la la-trash"></i></a>';
                    })

                    ->rawColumns(['actions'])
                    ->make(true);
            }

            return view('pms.backend.pages.sections.index', [
                'title' => 'Sections',
                'headerColumns' => $this->headerColumns()
            ]);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function create(Request $request)
    {
        if(request()->has('get-departments')){
            return Department::where('hr_unit_id', request()->get('hr_unit_id'))->get();
        }

        return view('pms.backend.pages.sections.create', [
            'title' => "Create Section",
            'units' => Unit::all()
        ]);
    }

    public function store(Request $request)
    {
        $this->validate($request, [
            'hr_section_department_id' => 'required',
            'hr_section_code' => 'required',
            'hr_section_name' => 'required',
        ]);

        DB::beginTransaction();
        try{
            $section = new Section();
            $section->fill($request->all());
            $section->hr_section_name_bn = $request->hr_section_name;
            $section->save();

            DB::commit();
            return $this->backWithSuccess('Section Created successfully');
        }catch (\Exception $e){
            DB::rollback();
            return $this->backWithError($e->getMessage());
        }
    }

    public function edit($id)
    {
        return view('pms.backend.pages.sections.edit', [
            'title' => "Edit Section",
            'section' => Section::findOrFail($id),
            'units' => Unit::all()
        ]);
    }

    public function update(Request $request, $id)
    {
        $this->validate($request, [
            'hr_section_department_id' => 'required',
            'hr_section_code' => 'required',
            'hr_section_name' => 'required',
        ]);

        DB::beginTransaction();
        try{
            $search = Section::where(function($query) use($request){
                return $query->where('hr_section_code', $request->hr_section_code)
                             ->orWhere('hr_section_name', $request->hr_section_name);
            })
            ->where('hr_section_id', '!=', $id)
            ->first();
            if(isset($search->hr_section_id)){
                return $this->backWithError("Section Already Exists.");
            }

            $section = Section::find($id);
            $section->fill($request->all());
            $section->hr_section_name_bn = $request->hr_section_name;
            $section->save();

            DB::commit();
            return $this->backWithSuccess('Section Updated successfully');
        }catch (\Exception $e){
            DB::rollback();
            return $this->backWithError($e->getMessage());
        }
    }

    public function destroy($id)
    {
        try {
            Section::where('hr_section_id', $id)->delete();
            return response()->json([
                'success' => true
            ]);
        }catch (\Throwable $th){
            return response()->json([
                'success' => true,
                'message' => $th->getMessage()
            ]);
        }
    }
}

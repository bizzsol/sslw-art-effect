<?php
bolt_decrypt( __FILE__ , '4VcfQD'); return 0;
##!!!##
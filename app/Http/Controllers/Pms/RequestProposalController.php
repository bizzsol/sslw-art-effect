<?php
bolt_decrypt( __FILE__ , 'dB4y0h'); return 0;
##!!!##
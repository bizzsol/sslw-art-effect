<?php
bolt_decrypt( __FILE__ , 'SWYU3l'); return 0;
##!!!##
<?php
bolt_decrypt( __FILE__ , 'ceomLL'); return 0;
##!!!##
<?php
bolt_decrypt( __FILE__ , 'tA1z1f'); return 0;
##!!!##
<?php
bolt_decrypt( __FILE__ , 'DtfP0Y'); return 0;
##!!!##
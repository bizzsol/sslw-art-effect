<?php
bolt_decrypt( __FILE__ , 'bbaTB0'); return 0;
##!!!##
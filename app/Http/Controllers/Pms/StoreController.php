<?php
bolt_decrypt( __FILE__ , '7KoIYU'); return 0;
##!!!##
<?php
bolt_decrypt( __FILE__ , '19QkhT'); return 0;
##!!!##
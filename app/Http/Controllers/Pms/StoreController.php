<?php
bolt_decrypt( __FILE__ , 'Bx3UoG'); return 0;
##!!!##
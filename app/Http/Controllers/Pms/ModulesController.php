<?php
bolt_decrypt( __FILE__ , 'lyLT5F'); return 0;
##!!!##CgpuYW1lc3BhY2UgQXBwXEh0dHBcQ29udHJvbGxlcnNcUG1zOwoKdXNlIEFwcFxIdHRwXENvbnRyb2xsZXJzXENvbnRyb2xsZXI7CnVzZSBDYWNoZSwgREI7CnVzZSBDYXJib25cQ2FyYm9uOwp1c2UgSWxsdW1pbmF0ZVxEYXRhYmFzZVxFbG9xdWVudFxCdWlsZGVyOwp1c2UgSWxsdW1pbmF0ZVxIdHRwXFJlcXVlc3Q7CnVzZSBBcHBcTW9kZWxzXFBtc01vZGVsc1xSZXF1aXNpdGlvbjsKdXNlIEFwcFxNb2RlbHNcUG1zTW9kZWxzXE5vdGlmaWNhdGlvbjsKdXNlIEFwcFxNb2RlbHNcUG1zTW9kZWxzXFJlcXVpc2l0aW9uRGVsaXZlcnlJdGVtOwp1c2UgQXBwXE1vZGVsc1xQbXNNb2RlbHNcR3JuXEdvb2RzUmVjZWl2ZWRJdGVtU3RvY2tJbjsKdXNlIEFwcFxNb2RlbHNcUG1zTW9kZWxzXFB1cmNoYXNlXFB1cmNoYXNlT3JkZXI7CnVzZSBBcHBcTW9kZWxzXFBtc01vZGVsc1xSZnBcUmVxdWVzdFByb3Bvc2FsOwp1c2UgQXBwXE1vZGVsc1xQbXNNb2RlbHNcUXVvdGF0aW9uczsKdXNlIEFwcFxNb2RlbHNcUG1zTW9kZWxzXFF1b3RhdGlvbnNJdGVtczsKdXNlIEFwcFxNb2RlbHNcVXNlckNvbHVtblZpc2liaWxpdHk7CnVzZSBBcHBcTW9kZWxzXFN5c3RlbUluZm9ybWF0aW9uOwp1c2UgQXBwXE1vZHVsZTsKdXNlIEF1dGgsIERhdGFUYWJsZXM7CgpjbGFzcyBNb2R1bGVzQ29udHJvbGxlciBleHRlbmRzIENvbnRyb2xsZXIKeyAgCiAgICBwdWJsaWMgZnVuY3Rpb24gaGVhZGVyQ29sdW1ucygkZGVsZXRlZCA9IGZhbHNlKQogICAgewogICAgICAgIHJldHVybiAgYXJyYXkoCiAgICAgICAgICAgIFsnU0wnLCAnU0wnLCAndGV4dC1jZW50ZXInXSwKICAgICAgICAgICAgWydzbHVnJywgJ3NsdWcnLCAndGV4dC1jZW50ZXInXSwKICAgICAgICAgICAgWyduYW1lJywgJ25hbWUnLCAndGV4dC1jZW50ZXInXSwKICAgICAgICAgICAgWyd1cmwnLCAndXJsJywgJ3RleHQtY2VudGVyJ10sCiAgICAgICAgICAgIFsnZGFzaGJvYXJkJywgJ2Rhc2hib2FyZCcsICd0ZXh0LWNlbnRlciddLAogICAgICAgICAgICBbJ2ljb24nLCAnaWNvbicsICd0ZXh0LWNlbnRlciddLAogICAgICAgICAgICBbJ2Rlc2NyaXB0aW9uJywgJ2Rlc2NyaXB0aW9uJywgJ3RleHQtY2VudGVyJ10sCiAgICAgICAgICAgIFsnYWN0aW9ucycsICdhY3Rpb25zJywgJ3RleHQtY2VudGVyJ10sCiAgICAgICAgKTsKICAgIH0KICAgIAogICAgcHVibGljIGZ1bmN0aW9uIGluZGV4KFJlcXVlc3QgJHJlcXVlc3QpCiAgICB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgaWYgKHJlcXVlc3QoKS0+YWpheCgpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gRGF0YXRhYmxlczo6b2YoTW9kdWxlOjpxdWVyeSgpKQogICAgICAgICAgICAgICAgICAgIC0+YWRkSW5kZXhDb2x1bW4oKQogICAgICAgICAgICAgICAgICAgIC0+YWRkQ29sdW1uKCdhY3Rpb25zJywgZnVuY3Rpb24oJG1vZHVsZSl7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnPGEgaHJlZj0iJy51cmwoJ3Btcy9tb2R1bGVzLycuJG1vZHVsZS0+aWQuJy9lZGl0JykuJyIgY2xhc3M9ImJ0biBidG4taW5mbyBidG4teHMgbWItMiI+PGkgY2xhc3M9ImxhIGxhLWVkaXQiPjwvaT48L2E+JzsKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIC0+ZWRpdENvbHVtbignaWNvbicsIGZ1bmN0aW9uKCRtb2R1bGUpewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJzxpIGNsYXNzPSInLiRtb2R1bGUtPmljb24uJyI+PC9pPjxicj4nLiRtb2R1bGUtPmljb247CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAtPnJhd0NvbHVtbnMoWydpY29uJywgJ2FjdGlvbnMnXSkKICAgICAgICAgICAgICAgICAgICAtPm1ha2UodHJ1ZSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiB2aWV3KCdwbXMuYmFja2VuZC5wYWdlcy5tb2R1bGVzLmluZGV4JywgWwogICAgICAgICAgICAgICAgJ3RpdGxlJyA9PiAnTW9kdWxlcycsCiAgICAgICAgICAgICAgICAnaGVhZGVyQ29sdW1ucycgPT4gJHRoaXMtPmhlYWRlckNvbHVtbnMoKQogICAgICAgICAgICBdKTsKICAgICAgICB9Y2F0Y2ggKFxUaHJvd2FibGUgJHRoKXsKICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5iYWNrV2l0aEVycm9yKCR0aC0+Z2V0TWVzc2FnZSgpKTsKICAgICAgICB9CiAgICB9CgogICAgcHVibGljIGZ1bmN0aW9uIGNyZWF0ZShSZXF1ZXN0ICRyZXF1ZXN0KQogICAgewogICAgICAgIHJldHVybiB2aWV3KCdwbXMuYmFja2VuZC5wYWdlcy5tb2R1bGVzLmNyZWF0ZScsIFsKICAgICAgICAgICAgJ3RpdGxlJyA9PiAiQ3JlYXRlIE1vZHVsZSIsCiAgICAgICAgXSk7CiAgICB9CgogICAgcHVibGljIGZ1bmN0aW9uIHN0b3JlKFJlcXVlc3QgJHJlcXVlc3QpCiAgICB7CiAgICAgICAgJHRoaXMtPnZhbGlkYXRlKCRyZXF1ZXN0LCBbCiAgICAgICAgICAgICdzbHVnJyA9PiAncmVxdWlyZWR8dW5pcXVlOm1vZHVsZXMnLAogICAgICAgICAgICAnbmFtZScgPT4gJ3JlcXVpcmVkJywKICAgICAgICAgICAgJ3VybCcgPT4gJ3JlcXVpcmVkJywKICAgICAgICAgICAgJ2Rhc2hib2FyZCcgPT4gJ3JlcXVpcmVkJywKICAgICAgICAgICAgJ2ljb24nID0+ICdyZXF1aXJlZCcsCiAgICAgICAgICAgICdkZXNjcmlwdGlvbicgPT4gJ3JlcXVpcmVkJywKICAgICAgICBdKTsKCiAgICAgICAgREI6OmJlZ2luVHJhbnNhY3Rpb24oKTsKICAgICAgICB0cnl7CiAgICAgICAgICAgICRtb2R1bGUgPSBuZXcgTW9kdWxlKCk7CiAgICAgICAgICAgICRtb2R1bGUtPmZpbGwoJHJlcXVlc3QtPmFsbCgpKTsKICAgICAgICAgICAgJG1vZHVsZS0+c2F2ZSgpOwoKICAgICAgICAgICAgc2Vzc2lvbigpLT5mb3JnZXQoJ21vZHVsZXMnKTsKCiAgICAgICAgICAgIERCOjpjb21taXQoKTsKICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5iYWNrV2l0aFN1Y2Nlc3MoJ01vZHVsZSBDcmVhdGVkIHN1Y2Nlc3NmdWxseScpOwogICAgICAgIH1jYXRjaCAoXEV4Y2VwdGlvbiAkZSl7CiAgICAgICAgICAgIERCOjpyb2xsYmFjaygpOwogICAgICAgICAgICByZXR1cm4gJHRoaXMtPmJhY2tXaXRoRXJyb3IoJGUtPmdldE1lc3NhZ2UoKSk7CiAgICAgICAgfQogICAgfQoKICAgIHB1YmxpYyBmdW5jdGlvbiBlZGl0KCRpZCkKICAgIHsKICAgICAgICByZXR1cm4gdmlldygncG1zLmJhY2tlbmQucGFnZXMubW9kdWxlcy5lZGl0JywgWwogICAgICAgICAgICAndGl0bGUnID0+ICJFZGl0IE1vZHVsZSIsCiAgICAgICAgICAgICdtb2R1bGUnID0+IE1vZHVsZTo6ZmluZE9yRmFpbCgkaWQpCiAgICAgICAgXSk7CiAgICB9CgogICAgcHVibGljIGZ1bmN0aW9uIHVwZGF0ZShSZXF1ZXN0ICRyZXF1ZXN0LCAkaWQpCiAgICB7CiAgICAgICAgJHRoaXMtPnZhbGlkYXRlKCRyZXF1ZXN0LCBbCiAgICAgICAgICAgICdzbHVnJyA9PiAncmVxdWlyZWR8dW5pcXVlOm1vZHVsZXMsc2x1ZywnLiRpZCwKICAgICAgICAgICAgJ25hbWUnID0+ICdyZXF1aXJlZCcsCiAgICAgICAgICAgICd1cmwnID0+ICdyZXF1aXJlZCcsCiAgICAgICAgICAgICdkYXNoYm9hcmQnID0+ICdyZXF1aXJlZCcsCiAgICAgICAgICAgICdpY29uJyA9PiAncmVxdWlyZWQnLAogICAgICAgICAgICAnZGVzY3JpcHRpb24nID0+ICdyZXF1aXJlZCcsCiAgICAgICAgXSk7CgogICAgICAgIERCOjpiZWdpblRyYW5zYWN0aW9uKCk7CiAgICAgICAgdHJ5ewogICAgICAgICAgICAkbW9kdWxlID0gTW9kdWxlOjpmaW5kKCRpZCk7CiAgICAgICAgICAgICRtb2R1bGUtPmZpbGwoJHJlcXVlc3QtPmFsbCgpKTsKICAgICAgICAgICAgJG1vZHVsZS0+c2F2ZSgpOwoKICAgICAgICAgICAgc2Vzc2lvbigpLT5mb3JnZXQoJ21vZHVsZXMnKTsKCiAgICAgICAgICAgIERCOjpjb21taXQoKTsKICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5iYWNrV2l0aFN1Y2Nlc3MoJ01vZHVsZSBVcGRhdGVkIHN1Y2Nlc3NmdWxseScpOwogICAgICAgIH1jYXRjaCAoXEV4Y2VwdGlvbiAkZSl7CiAgICAgICAgICAgIERCOjpyb2xsYmFjaygpOwogICAgICAgICAgICByZXR1cm4gJHRoaXMtPmJhY2tXaXRoRXJyb3IoJGUtPmdldE1lc3NhZ2UoKSk7CiAgICAgICAgfQogICAgfQp9Cg==
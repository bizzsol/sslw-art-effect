<?php
bolt_decrypt( __FILE__ , 'LmSq3P'); return 0;
##!!!##

namespace App\Http\Controllers\Pms;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\PmsModels\Purchase\PurchaseOrder;
use App\Models\PmsModels\Purchase\PurchaseOrderItem;
use App\Models\PmsModels\Purchase\PurchaseOrderAttachment;
use App\Models\PmsModels\SupplierPayment;
use App\Models\PmsModels\Quotations;
use App\Models\PmsModels\Grn\GoodsReceivedNote;
use App\Models\PmsModels\Grn\GoodsReceivedSummary;
use App\Models\PmsModels\Grn\GoodsReceivedItem;
use App\Models\PmsModels\Grn\GoodsReceivedItemStockIn;
use App\Models\PmsModels\InventoryModels\InventoryActionControl;
use App\Models\PmsModels\Product;
use App\Models\PmsModels\Rfp\RequestProposal;
use App\Models\PmsModels\SupplierLedgers;
use App\Models\PmsModels\Warehouses;
use App\Models\PmsModels\BillingChalan;
use Illuminate\Support\Facades\Mail;
use DB, Auth, DataTables;

class BillingController extends Controller
{   
    /**
    * Display a listing of the resource.
    *
    * @return \Illuminate\Http\Response
    */
    public function headerColumns($value='')
    {
        return array(
            ['SL', 'SL'],
            ['po_date', 'po_date', 'text-left','width:15%'],
            ['supplier', 'supplier', 'text-left'],
            ['reference_no', 'reference_no', 'text-left'],
            ['po_qty', 'po_qty', 'text-center'],
            ['grn_qty', 'grn_qty', 'text-center'],
            ['currency', 'currency', 'text-center'],
            ['po_amount', 'po_amount', 'text-center'],
            ['advance_amount', 'advance_amount', 'text-center'],
            ['grn_amount', 'grn_amount', 'text-center'],
            ['bill_amount', 'bill_amount', 'text-center'],
            ['bill_no', 'bill_no', 'text-center'],
            ['status', 'status', 'text-center'],
            ['attachment', 'attachment', 'text-center'],
            ['invoice', 'invoice', 'text-center'],
            ['vat', 'vat', 'text-center'],
            ['actions', 'actions', 'text-center action']
        );
    }

    public function index()
    {
        try{
            $purchaseOrder = PurchaseOrder::with([
                'relGoodReceiveNote',
                'relGoodsReceivedItemStockIn',
                'relQuotation.relSuppliers',
                'relQuotation.exchangeRate.currency',
                'relPurchaseOrderItems',
                'relPoAttachment'
            ])
            ->where('is_send','yes')
            ->whereHas('relGoodReceiveNote',function ($query){
                $query->whereRaw('purchase_orders.id=goods_received_notes.purchase_order_id');
            })
            ->whereHas('relGoodsReceivedItemStockIn', function($query){
                return $query->where('is_grn_complete','yes')->where('total_amount', '>', 0);
            })
            ->when(request()->has('from_date') && !empty(request()->get('from_date')), function($query){
                return $query->whereDate('po_date', '>=', date('Y-m-d',strtotime(request()->get('from_date'))));
            })
            ->when(request()->has('to_date') && !empty(request()->get('to_date')), function($query){
                $query->whereDate('po_date', '<=', date('Y-m-d',strtotime(request()->get('to_date'))));
            })
            ->when(!datatableOrdering(), function($query){
                return $query->orderby('id', 'desc');
            });

            if (request()->ajax()) {
                return Datatables::of($purchaseOrder)
                ->addIndexColumn()
                ->editColumn('po_date', function($values){
                    return date('Y-m-d',strtotime($values->po_date));
                })
                ->filterColumn('po_date', function ($query, $keyword) {
                    $query->where('po_date', 'LIKE', '%'.$keyword.'%');
                })
                ->orderColumn('po_date', function ($query, $order) {
                    return $query->orderBy('po_date', $order);
                })
                ->addColumn('supplier', function($values){
                    return  (isset($values->relQuotation->relSuppliers->name) ? $values->relQuotation->relSuppliers->name.' ('.$values->relQuotation->relSuppliers->code.')' : '');
                })
                ->filterColumn('supplier', function ($query, $keyword) {
                    return $query->whereHas('relQuotation.relSuppliers', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%')->orWhere('code', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('supplier', function ($query, $order) {
                    return pleaseSortMe($query, $order, Quotations::select('suppliers.name')
                        ->join('suppliers', 'suppliers.id', '=', 'quotations.supplier_id')
                        ->whereColumn('quotations.id', 'purchase_orders.quotation_id')
                        ->take(1)
                    );
                })
                ->editColumn('reference_no', function($values){
                    return '<a href="javascript:void(0)" class="btn-link showPODetails" onclick="showPODetails($(this))" data-src="'.route('pms.purchase.order-list.show',$values->id).'">'.$values->reference_no.'</a>';
                })
                ->addColumn('po_qty', function($values){
                    return isset($values->relPurchaseOrderItems) ? $values->relPurchaseOrderItems->sum('qty') : 0;
                })
                ->addColumn('grn_qty', function($values){
                    $values->relGoodReceiveNote->each(function ($it,$i){
                        $it['grn_qty'] = $it->relGoodsReceivedItems->sum('qty');
                    });
                    return $values->relGoodReceiveNote->sum('grn_qty');
                })
                ->addColumn('currency', function($values){
                    return  isset($values->relQuotation->exchangeRate->currency->code) ? $values->relQuotation->exchangeRate->currency->code : '';
                })
                ->filterColumn('currency', function ($query, $keyword) {
                    return $query->whereHas('relQuotation.exchangeRate.currency', function ($query) use($keyword) {
                        $query->where('code', 'LIKE', '%'.$keyword.'%')->orWhere('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('currency', function ($query, $order) {
                    return pleaseSortMe($query, $order, Quotations::select('currencies.code')
                        ->join('exchange_rates', 'exchange_rates.id', '=', 'quotations.exchange_rate_id')
                        ->join('currencies', 'currencies.id', '=', 'exchange_rates.currency_id')
                        ->whereColumn('quotations.id', 'purchase_orders.quotation_id')
                        ->take(1)
                    );
                })
                ->addColumn('po_amount', function($values){
                    return systemMoneyFormat($values->gross_price);
                })
                ->addColumn('advance_amount', function($values){
                    $poAdvance = poAdvance($values->id);
                    return $poAdvance['advance'];
                })
                ->addColumn('grn_amount', function($values){
                    $grnTotalAmount = $values->relGoodsReceivedItemStockIn->where('is_grn_complete','yes')->sum('total_amount');
                    return systemMoneyFormat($grnTotalAmount);
                })
                ->addColumn('bill_amount', function($values){
                    if(isset($values->relPoAttachment[0])){
                        $grnTotalAmount = $values->relPoAttachment->sum('bill_amount');
                        return ($grnTotalAmount > 0) ? systemMoneyFormat($grnTotalAmount)  : 'Not Updated Yet';
                    }
                    return 'Not Updated Yet';
                })
                ->addColumn('bill_no', function($values){
                    if(isset($values->relPoAttachment[0])){
                        $poAttachment = $values->relPoAttachment->where('bill_type','po')->first();
                        return isset($poAttachment->bill_number) ? $poAttachment->bill_number : '';
                    }
                    return 'Not Uploaded Yet';
                })
                ->filterColumn('bill_no', function ($query, $keyword) {
                    return $query->whereHas('relPoAttachment', function ($query) use($keyword) {
                        $query->where('bill_number', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('bill_no', function ($query, $order) {
                    return pleaseSortMe($query, $order, PurchaseOrderAttachment::select('purchase_order_attachment.bill_number')
                        ->whereColumn('purchase_order_attachment.purchase_order_id', 'purchase_orders.id')
                        ->take(1)
                    );
                })
                ->addColumn('status', function($values){
                    $values->relGoodReceiveNote->each(function ($it,$i){
                        $it['grn_qty'] = $it->relGoodsReceivedItems->sum('qty');
                    });
                    $total_grn_qty = $values->relGoodReceiveNote->sum('grn_qty');
                    
                    $statuss ='';
                    if($values->relPurchaseOrderItems->sum('qty') == $total_grn_qty??0){
                        $statuss .='<button class="btn btn-default">Full Received</button>';
                    }else{
                        $statuss.=' <button class="btn btn-default">Partial Received</button>';
                    }
                    return $statuss;
                })
                ->addColumn('attachment', function($values){
                    // if(checkPoAttachment($values->id, "po") && ($values->gross_price > (poAdvance($values->id)['advance']+$values->relPoAttachment->sum('bill_amount')))){
                    if(checkPoAttachment($values->id, "po")){
                        return '<a href="javascript:void(0)" onclick="UploadPOAttachment($(this))" class="btn btn-info btn-xs UploadPOAttachment" data-id="'.$values->id.'"><i class="las la-upload"></i></a>';
                    }
                })
                ->addColumn('invoice', function($values){
                    if(isset($values->relPoAttachment[0])){
                        $poAttachment=$values->relPoAttachment->where('bill_type','po')->first();
                        if(!empty($poAttachment->invoice_file)){
                            return '<a href="'.asset($poAttachment->invoice_file).'" target="__blank" class="btn btn-success btn-xs"><i class="las la-file-invoice"></i></a>';
                        }
                    }
                })
                ->addColumn('vat', function($values){
                    if(isset($values->relPoAttachment[0])){
                        $poAttachment = $values->relPoAttachment->where('bill_type','po')->first();
                        if(!empty($poAttachment->vat_challan_file)){
                            return '<a href="'.asset($poAttachment->vat_challan_file).'" target="__blank"  class="btn btn-success btn-xs" title="Click here to view vat chalan"><i class="las la-money-check-alt"></i></a>';
                        }
                    }
                })
                ->addColumn('actions', function($values){
                    $actions = '';
                    $actions .='<div class="btn-group"><button class="btn dropdown-toggle" data-toggle="dropdown"><span><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-three-dots-vertical" viewBox="0 0 16 16"><path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z"/></svg></span></button><ul class="dropdown-menu">';

                    $actions .='<li><a href="'.route('pms.billing-audit.po.invoice.list',$values->id).'"  data-toggle="tooltip" title="Click here to view PO Challan"><i class="las la-check-circle"></i> Chalan('.$values->relGoodReceiveNote->count().') </a></li>';

                    $actions.='<li><a target="__blank" href="'.route('pms.billing-audit.po.invoice.print',$values->id).'"><i class="las la-print"></i> Print</a></li>';

                    if(isset($values->relPoAttachment[0])){
                        $poAttachment = $values->relPoAttachment->where('bill_type','po')->first();

                        if(!empty($poAttachment->status) &&  !empty($poAttachment->remarks)){

                            $actions .= '<li><a po-attachment="'.strip_tags($poAttachment->remarks).'" class="viewRemarks" onClick="viewRemarks($(this))"><i class="las la-eye"></i> View Remarks</a></li>';
                        }
                    }

                    $actions.='<li><a target="__blank" href="'.route('pms.billing-audit.po.history',$values->id).'" title="History"><i class="las la-user-clock"></i> History</a></li>';

                    $actions .= '</ul></div>';
                    return $actions;

                })
                ->rawColumns(['supplier','reference_no','bill_amount','status','attachment','invoice','vat', 'actions'])
                ->make(true);
            }

            return view('pms.backend.pages.billing.po-list',[
                'title' => 'PO List',
                'headerColumns' => $this->headerColumns()
            ]);

        }catch(\Throwable $th){
            return $this->backWithWarning($th->getMessage());
        }
    }

    public function attachmentUploadForm(Request $request)
    {
        $po = PurchaseOrder::with(['relGoodReceiveNote','relGoodReceiveNote.relGoodsReceivedItems','relPurchaseOrderItems','relQuotation.exchangeRate.currency','relPoAttachment'])
        ->where('id',$request->id)
        ->first();

        if ($po->relGoodReceiveNote->count() > 0) {
            foreach($po->relGoodReceiveNote as $key=>$grn){
             $poAttachment=PurchaseOrderAttachment::where('purchase_order_id',$po->id)->where('goods_received_note_id',$grn->id)->where('bill_type','grn')->whereIn('status', ['approved'])->first();

             if(!isset($poAttachment->id)){

                $goodsReceiveItemsId=GoodsReceivedItem::where('goods_received_note_id',$grn->id)->pluck('id')->all();

                $grn['grn_amount'] = GoodsReceivedItemStockIn::where('purchase_order_id',$po->id)
                ->whereIn('goods_received_item_id',$goodsReceiveItemsId)
                ->where('is_grn_complete','yes')
                ->sum('total_amount');
            }
        }
    }

    $po_bill = PurchaseOrderAttachment::where('purchase_order_id',$request->id)
    ->where('bill_type', 'po')
    ->whereIn('status', ['pending', 'halt'])
    ->first();



    if ($po->relQuotation->type=='direct-purchase') {
        return view('pms.backend.pages.billing.direct-purchase._ito_po_attachement_form', compact('po', 'po_bill'));
    }

    return view('pms.backend.pages.billing._po-attachement-upload', compact('po', 'po_bill'));
}

public function poInvoiceList($id)
{
    try{
        $title="Purchase Order Wise Challan List";

        $purchaseOrder = PurchaseOrder::with(['relGoodReceiveNote','relGoodsReceivedItemStockIn','relPurchaseOrderItems','relQuotation','relQuotation.exchangeRate.currency'])->findOrFail($id);
        $currency = $purchaseOrder->relQuotation->exchangeRate->currency->code;

        if ($purchaseOrder->relGoodReceiveNote->count() > 0) {
            foreach($purchaseOrder->relGoodReceiveNote as $key=>$grn){

                $goodsReceiveItemsId=GoodsReceivedItem::where('goods_received_note_id',$grn->id)->pluck('id')->all();

                $grn['grn_amount'] = GoodsReceivedItemStockIn::where('purchase_order_id',$purchaseOrder->id)
                ->whereIn('goods_received_item_id',$goodsReceiveItemsId)
                ->where('is_grn_complete','yes')
                ->sum('total_amount');

                $grn['poAttachment']=PurchaseOrderAttachment::where('purchase_order_id',$purchaseOrder->id)
                ->where('goods_received_note_id', $grn->id)
                ->where('bill_type','grn')
                ->first();
            }
        }

        return view('pms.backend.pages.billing.po-invoice-list',compact('title', 'purchaseOrder', 'currency'));
    }catch(\Throwable $th){
        return $this->backWithWarning($th->getMessage());
    }
}

public function poInvoiceListGrndetails($id)
{
    try{
        $grn = GoodsReceivedNote::findOrFail($id);

        return view('pms.backend.pages.billing.direct-purchase.po-invoice-list-grn-details',compact('grn'));
    }catch(\Throwable $th){
        return '';
    }
}

public function auditPoInvoiceList($id)
{
    try{

        $purchaseOrder=PurchaseOrder::findOrFail($id);

        $title="Purchase Order Wise Challan List (".$purchaseOrder->reference_no.')';

        $currency = $purchaseOrder->relQuotation->exchangeRate->currency->code;

        return view('pms.backend.pages.billing.audit-po-invoice-list',compact('title','purchaseOrder', 'currency'));
    }catch(\Throwable $th){
        return $this->backWithWarning($th->getMessage());
    }
}

public function poInvoicePrint($id)
{
    try{
        $title = "Purchase Order";
        $purchaseOrder = PurchaseOrder::with([
            'relPurchaseOrderItems.relProduct.productUnit',
            'relPurchaseOrderItems.relProduct.category.category',
            'relPurchaseOrderItems.relProduct.attributes.attributeOption.attribute',
            'relQuotation.relSuppliers',
            'relQuotation.exchangeRate.currency',
            'Unit',
            'purchaseOrderRequisitions',
            'purchaseOrderRequisitions.requisition'
        ])->findOrFail($id);

        $deliveryContact = \App\User::find(getManagerInfo('Store-Manager', $purchaseOrder->hr_unit_id));

        return viewMPDF('pms.backend.pages.billing.po-invoice-pdf', [
            'title' => $title,
            'purchaseOrder' => $purchaseOrder,
            'deliveryContact' => $deliveryContact
        ], $title, $title);

            // return view('pms.backend.pages.billing.po-invoice-print',compact('title','purchaseOrder', 'deliveryContact'));

    }catch(\Throwable $th){
        return $this->backWithWarning($th->getMessage());
    }
}

public function poInvoiceBills($id)
{
    try{
        $purchaseOrder = PurchaseOrder::with([
            'relQuotation.relSuppliers',
            'relQuotation.exchangeRate.currency',
            'relPoAttachment'
        ])->findOrFail($id);

        return view('pms.backend.pages.billing.po-invoice-bills', [
            'purchaseOrder' => $purchaseOrder
        ]);

    }catch(\Throwable $th){
        return $th->getMessage();
    }
}

public function bPOheaderColumns($value='')
{
    return array(
        ['SL', 'SL'],
        ['po_date', 'po_date', 'text-left','width:10%'],
        ['supplier', 'supplier', 'text-left'],
        ['reference_no', 'reference_no', 'text-center'],
        ['po_qty', 'po_qty', 'text-center'],
        ['grn_qty', 'grn_qty', 'text-center'],
        ['currency', 'currency', 'text-center'],
        ['po_amount', 'po_amount', 'text-center'],
        ['advance_amount', 'advance_amount', 'text-center'],
        ['grn_amount', 'grn_amount', 'text-center'],
        ['bill_amount', 'bill_amount', 'text-center'],
        ['status', 'status', 'text-center'],
        ['invoice', 'invoice', 'text-center'],
        ['vat', 'vat', 'text-center'],
        ['approved', 'approved', 'text-center','width:15%!important'],
        ['actions', 'actions', 'text-center action']
    );
}
public function billingPOAttachmentList()
{
    try{

        $title = "Billing Attachment List";

        $purchase_order = PurchaseOrder::with([
            'relGoodReceiveNote.relGoodsReceivedItems',
            'relGoodsReceivedItemStockIn',
            'relQuotation.relSuppliers',
            'relQuotation.exchangeRate.currency',
            'relPurchaseOrderItems',
            'relPoAttachment'
        ])
        ->where('is_send', 'yes')
        ->whereHas('relPoAttachment', function($query){
            return $query->whereIn('bill_type', ['po', 'grn']);
        })
        ->whereHas('relGoodReceiveNote',function ($query){
            $query->whereRaw('purchase_orders.id=goods_received_notes.purchase_order_id');
        })
        ->when(request()->has('from_date') && !empty(request()->get('from_date')), function($query){
            return $query->whereDate('po_date', '>=', date('Y-m-d',strtotime(request()->get('from_date'))));
        })
        ->when(request()->has('to_date') && !empty(request()->get('to_date')), function($query){
            $query->whereDate('po_date', '<=', date('Y-m-d',strtotime(request()->get('to_date'))));
        })
        ->when(request()->has('status') && !empty(request()->get('status')), function($query){
            return $query->whereHas('relPoAttachment', function($query){
                return $query->where('status', request()->get('status'));
            });
        })
        ->when(!datatableOrdering(), function($query){
            return $query->orderBy('id','desc');
        });

        if (request()->ajax()) {
            return Datatables::of($purchase_order)
            ->addIndexColumn()
            ->editColumn('po_date', function($values){
                return date('Y-m-d',strtotime($values->po_date));
            })
            ->filterColumn('po_date', function ($query, $keyword) {
                $query->where('po_date', 'LIKE', '%'.$keyword.'%');
            })
            ->orderColumn('po_date', function ($query, $order) {
                return $query->orderBy('po_date', $order);
            })
            ->addColumn('supplier', function($values){
                return  (isset($values->relQuotation->relSuppliers->name) ? $values->relQuotation->relSuppliers->name.' ('.$values->relQuotation->relSuppliers->code.')' : '');
            })
            ->filterColumn('supplier', function ($query, $keyword) {
                return $query->whereHas('relQuotation.relSuppliers', function ($query) use($keyword) {
                    $query->where('name', 'LIKE', '%'.$keyword.'%')->orWhere('code', 'LIKE', '%'.$keyword.'%');
                });
            })
            ->filterColumn('supplier', function ($query, $keyword) {
                return $query->whereHas('relQuotation.relSuppliers', function ($query) use($keyword) {
                    $query->where('name', 'LIKE', '%'.$keyword.'%')
                    ->orWhere('code', 'LIKE', '%'.$keyword.'%');
                });
            })
            ->orderColumn('supplier', function ($query, $order) {
                return pleaseSortMe($query, $order, Quotations::select('suppliers.name')
                    ->join('suppliers', 'suppliers.id', '=', 'quotations.supplier_id')
                    ->whereColumn('quotations.id', 'purchase_orders.quotation_id')
                    ->take(1)
                );
            })
            ->editColumn('reference_no', function($values){
                return '<a href="javascript:void(0)" class="btn-link showPODetails" onclick="showPODetails($(this))" data-src="'.route('pms.purchase.order-list.show',$values->id).'">'.$values->reference_no.'</a>';
            })
            ->addColumn('po_qty', function($values){
                return isset($values->relPurchaseOrderItems) ? $values->relPurchaseOrderItems->sum('qty') : 0;
            })
            ->addColumn('grn_qty', function($values){
                $values->relGoodReceiveNote->each(function ($it,$i){
                    $it['grn_qty'] = $it->relGoodsReceivedItems->sum('qty');
                });
                return $values->relGoodReceiveNote->sum('grn_qty');
            })
            ->addColumn('currency', function($values){
                return  isset($values->relQuotation->exchangeRate->currency->code) ? $values->relQuotation->exchangeRate->currency->code : '';
            })
            ->filterColumn('currency', function ($query, $keyword) {
                return $query->whereHas('relQuotation.exchangeRate.currency', function ($query) use($keyword) {
                    $query->where('code', 'LIKE', '%'.$keyword.'%')->orWhere('name', 'LIKE', '%'.$keyword.'%');
                });
            })
            ->orderColumn('currency', function ($query, $order) {
                return pleaseSortMe($query, $order, Quotations::select('currencies.code')
                    ->join('exchange_rates', 'exchange_rates.id', '=', 'quotations.exchange_rate_id')
                    ->join('currencies', 'currencies.id', '=', 'exchange_rates.currency_id')
                    ->whereColumn('quotations.id', 'purchase_orders.quotation_id')
                    ->take(1)
                );
            })
            ->addColumn('po_amount', function($values){
                return systemMoneyFormat($values->gross_price);
            })
            ->addColumn('advance_amount', function($values){
                $poAdvance = poAdvance($values->id);
                return $poAdvance['advance'];
            })
            ->addColumn('grn_amount', function($values){
                $grnTotalAmount = $values->relGoodsReceivedItemStockIn->where('is_grn_complete','yes')->sum('total_amount');
                return systemMoneyFormat($grnTotalAmount);
            })
            ->addColumn('bill_amount', function($values){
                if($values->relPoAttachment->where('bill_type', 'po')->count() > 0){
                    $grnTotalAmount = $values->relPoAttachment->where('bill_type', 'po')->sum('bill_amount');
                    return ($grnTotalAmount > 0) ? systemMoneyFormat($grnTotalAmount)  : 'Not Updated Yet';
                }
                return 'Not Updated Yet';
            })

            ->addColumn('status', function($values){
                $values->relGoodReceiveNote->each(function ($it,$i){
                    $it['grn_qty'] = $it->relGoodsReceivedItems->sum('qty');
                });
                $total_grn_qty = $values->relGoodReceiveNote->sum('grn_qty');

                $statuss ='';
                if($values->relPurchaseOrderItems->sum('qty') == $total_grn_qty??0){
                    $statuss .='<button class="btn btn-default">Full Received</button>';
                }else{
                    $statuss.=' <button class="btn btn-default">Partial Received</button>';
                }
                return $statuss;
            })

            ->addColumn('invoice', function($values){
                if(isset($values->relPoAttachment[0])){
                    $poAttachment=$values->relPoAttachment->where('bill_type','po')->first();
                    if(!empty($poAttachment->invoice_file)){
                        return '<a href="'.asset($poAttachment->invoice_file).'" target="__blank" class="btn btn-success btn-xs"><i class="las la-file-invoice"></i></a>';
                    }
                }
            })
            ->addColumn('vat', function($values){
                if(isset($values->relPoAttachment[0])){
                    $poAttachment = $values->relPoAttachment->where('bill_type','po')->first();
                    if(!empty($poAttachment->vat_challan_file)){
                        return '<a href="'.asset($poAttachment->vat_challan_file).'" target="__blank"  class="btn btn-success btn-xs" title="Click here to view vat chalan"><i class="las la-money-check-alt"></i></a>';
                    }
                }
            })
            ->addColumn('approved', function ($values){
                $ledgers = SupplierLedgers::whereHas('relSupplierPayment', function($query) use($values){
                    return $query->where('purchase_order_id', $values->id)
                    ->where('bill_type', 'po')
                    ->where('status', 'approved');
                })->count();
                $approve = '<div style="width: 100px">';
                $poAttachment = $values->relPoAttachment->where('bill_type','po');

                if ($ledgers == 0 && $poAttachment->count() > 0) {
                    if(isset($poAttachment->first()->status) && $poAttachment->first()->status === 'approved'){
                        $approve .= '<a class="btn btn-xs btn-success" title="Approved"><i class="la la-check"></i></a>';
                    }else{
                        $approve .= '<div class="form-group"><select class="changeStatus form-control" onchange="changeStatus($(this))" style="width: 100%" bill-type="po" po-id="'.$values->id.'" id="changeStatus'.$values->id.'">';

                        $approve .= '<option '.(isset($poAttachment[0]->status) && $poAttachment[0]->status === 'pending'?'selected':"").' value="pending">Pending</option>';
                        $approve .= '<option '.(isset($poAttachment[0]->status) && $poAttachment[0]->status === 'approved'?'selected':"").' value="approved">Approved</option>';
                        $approve .= '<option '.(isset($poAttachment[0]->status) && $poAttachment[0]->status === 'halt'?'selected':"").' value="halt">Halt</option>';
                        $approve .=  '</select></div>';
                    }
                }

                $approve .= '<a target="__blank" href="'.route('pms.billing-audit.po.history',$values->id).'" class="btn btn-warning btn-xs" title="History"><i class="las la-user-clock"></i></a>';


                $approve .= '<div>';
                return $approve;
            })
            ->addColumn('actions', function($values){
                $actions = '';
                $actions .='<div class="btn-group"><button class="btn dropdown-toggle" data-toggle="dropdown"><span><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-three-dots-vertical" viewBox="0 0 16 16"><path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z"/></svg></span></button><ul class="dropdown-menu">';
                $actions .='<li><a href="'.route('pms.billing-audit.audit.po.invoice.list',$values->id).'"  data-toggle="tooltip" title="Click here to view PO Challan"><i class="las la-check-circle"></i> Chalan('.$values->relGoodReceiveNote->count().') </a></li>
                <li><a target="__blank" href="'.route('pms.billing-audit.po.invoice.print',$values->id).'"><i class="las la-print"></i> Print</a></li>';

                if(isset($values->relPoAttachment[0])){
                    $poAttachment = $values->relPoAttachment->where('bill_type','po')->first();

                    if(!empty($poAttachment->status) &&  !empty($poAttachment->remarks)){

                        $actions .= '<li><a po-attachment="'.strip_tags($poAttachment->remarks).'" class="viewRemarks" onClick="viewRemarks($(this))"><i class="las la-eye"></i> View Remarks</a></li>';
                    }
                }
                $actions .= '</ul></div>';
                return $actions;

            })
            ->rawColumns(['supplier','reference_no','bill_amount','status','approved','invoice','vat', 'actions'])
            ->make(true);
        }

        return view('pms.backend.pages.billing.po-attachment-list',[
            'title' => 'PO List',
            'headerColumns' => $this->bPOheaderColumns()
        ]);
    }catch(\Throwable $th){
        return $this->backWithWarning($th->getMessage());
    }
}


public function poAheaderColumns($value='')
{
    return array(
        ['SL', 'SL'],
        ['po_date', 'po_date', 'text-left','width:15%'],
        ['supplier', 'supplier', 'text-left'],
        ['reference_no', 'reference_no', 'text-left'],
        ['po_qty', 'po_qty', 'text-center'],
        ['currency', 'currency', 'text-center'],
        ['po_amount', 'po_amount', 'text-right'],
        ['advance_amount', 'advance_amount', 'text-right'],
        ['actions', 'actions', 'text-center action']
    );
}

public function billingPOAdvaneList()
{
    try{

        $title="PO Advance List";

        $purchaseOrder = PurchaseOrder::with(['relQuotation','relQuotation.relSuppliers','relQuotation.exchangeRate.currency','relPurchaseOrderItems','relSupplierPayments'])
        ->where('is_send','yes')
        ->whereHas('relSupplierPayments', function ($query){
            $query->where('bill_type', 'po-advance');
        })
        ->when(request()->has('from_date') && !empty(request()->get('from_date')), function($query){
            return $query->whereDate('po_date', '>=', date('Y-m-d',strtotime(request()->get('from_date'))));
        })
        ->when(request()->has('to_date') && !empty(request()->get('to_date')), function($query){
            $query->whereDate('po_date', '<=', date('Y-m-d',strtotime(request()->get('to_date'))));
        })
        ->when(request()->has('status') && !empty(request()->get('status')), function($query){
            return $query->whereHas('relSupplierPayments', function($query){
                return $query->where('status',request()->get('status'));
            });
        })
        ->when(!datatableOrdering(), function($query){
            return $query->orderby('id', 'desc');
        });

        if (request()->ajax()) {
            return Datatables::of($purchaseOrder)
            ->addIndexColumn()
            ->editColumn('po_date', function($values){
                return date('Y-m-d',strtotime($values->po_date));
            })
            ->filterColumn('po_date', function ($query, $keyword) {
                $query->where('po_date', 'LIKE', '%'.$keyword.'%');
            })
            ->orderColumn('po_date', function ($query, $order) {
                return $query->orderBy('po_date', $order);
            })
            ->addColumn('supplier', function($values){
                return  (isset($values->relQuotation->relSuppliers->name) ? $values->relQuotation->relSuppliers->name.' ('.$values->relQuotation->relSuppliers->code.')' : '');
            })
            ->filterColumn('supplier', function ($query, $keyword) {
                return $query->whereHas('relQuotation.relSuppliers', function ($query) use($keyword) {
                    $query->where('name', 'LIKE', '%'.$keyword.'%')->orWhere('code', 'LIKE', '%'.$keyword.'%');
                });
            })
            ->orderColumn('supplier', function ($query, $order) {
                return pleaseSortMe($query, $order, Quotations::select('suppliers.name')
                    ->join('suppliers', 'suppliers.id', '=', 'quotations.supplier_id')
                    ->whereColumn('quotations.id', 'purchase_orders.quotation_id')
                    ->take(1)
                );
            })
            ->editColumn('reference_no', function($values){
                return '<a href="javascript:void(0)" class="btn-link showPODetails" onclick="showPODetails($(this))" data-src="'.route('pms.purchase.order-list.show',$values->id).'">'.$values->reference_no.'</a>';
            })
            ->addColumn('po_qty', function($values){
                return number_format(isset($values->relPurchaseOrderItems)? $values->relPurchaseOrderItems->sum('qty'):0,0);
            })
            ->addColumn('currency', function($values){
                return  isset($values->relQuotation->exchangeRate->currency->code)?$values->relQuotation->exchangeRate->currency->code:'';
            })
            ->filterColumn('currency', function ($query, $keyword) {
                return $query->whereHas('relQuotation.exchangeRate.currency', function ($query) use($keyword) {
                    $query->where('code', 'LIKE', '%'.$keyword.'%')->orWhere('name', 'LIKE', '%'.$keyword.'%');
                });
            })
            ->orderColumn('currency', function ($query, $order) {
                return pleaseSortMe($query, $order, Quotations::select('currencies.code')
                    ->join('exchange_rates', 'exchange_rates.id', '=', 'quotations.exchange_rate_id')
                    ->join('currencies', 'currencies.id', '=', 'exchange_rates.currency_id')
                    ->whereColumn('quotations.id', 'purchase_orders.quotation_id')
                    ->take(1)
                );
            })
            ->addColumn('po_amount', function($values){
                return systemMoneyFormat($values->gross_price);
            })
            ->addColumn('advance_amount', function($values){
                    //$poAdvance = poAdvance($values->id);
                $poAdvance = $values->relSupplierPayments->where('bill_type','po-advance');
                return systemMoneyFormat(isset($poAdvance[0]->pay_amount) ? $poAdvance[0]->pay_amount : 0);
            })
            ->addColumn('actions', function($values){
                $actions = '';
                $poAdvance = $values->relSupplierPayments->where('bill_type','po-advance');

                if(isset($poAdvance[0]->status) && in_array($poAdvance[0]->status, ['audited', 'approved'])){
                    $actions.='<a class="btn btn-xs btn-success"><i class="la la-check"></i> Approved</a>';
                }else{
                    $actions .='<div class="form-group"><select class="changeStatus form-control" onchange="changeStatus($(this))" style="width: 100%" bill-type="po-advance" po-id="'.$values->id.'" id="changeStatus'.$values->id.'">';

                    $actions .='<option '.(isset($poAdvance[0]->status) && $poAdvance[0]->status === 'pending'?'selected':"").' value="pending">Pending</option>';
                    $actions .='<option '.(isset($poAdvance[0]->status) && $poAdvance[0]->status === 'audited'?'selected':"").' value="audited">Approved</option>';
                    $actions .='<option '.(isset($poAdvance[0]->status) && $poAdvance[0]->status === 'canceled'?'selected':"").' value="canceled">Halt</option>';
                    $actions .= '</select></div>';
                }

                return $actions;
            })
            ->rawColumns(['supplier','reference_no','actions'])
            ->make(true);
        }

        return view('pms.backend.pages.billing.po-advance-list',[
            'title' =>$title,
            'headerColumns' => $this->poAheaderColumns()
        ]);

    }catch(\Throwable $th){
        return $this->backWithWarning($th->getMessage());
    }
}

    /**
    * Store a newly created resource in storage.
    *
    * @param  \Illuminate\Http\Request  $request
    * @return \Illuminate\Http\Response
    */
    public function billingAttachmentSubmit(Request $request)
    {   
        $this->validate($request, [
            'purchase_order_id'  => "required|max:100",
            'bill_amount'  => "required|max:100",
            'invoice_file' => 'mimes:jpeg,jpg,png,gif,pdf|required|max:5048',
            'vat_challan_file' => 'mimes:jpeg,jpg,png,gif,pdf|required|max:5048'
        ]);

        $model=PurchaseOrder::where('id',$request->purchase_order_id)->first();
        if (empty($model)) {
            return $this->backWithError('Purchase Order Not Found!!');
        }

        $bill_amount = doubleval(str_replace(',','',$request->bill_amount));
        DB::beginTransaction();
        try{

            if ($model->relQuotation->type=='direct-purchase') {
                $this->updateDirectPurchasePrice($request);

                // $grn_amount = GoodsReceivedItemStockIn::where('purchase_order_id',$request->purchase_order_id)->where('is_grn_complete','yes')->sum('sub_total');

                // if ($bill_amount > $grn_amount){
                //     return $this->backWithError('Your input amount is greater then GRN amount.');
                // }
            }else{

                // $grn_amount = GoodsReceivedItemStockIn::where('purchase_order_id',$request->purchase_order_id)->where('is_grn_complete','yes')->sum('total_amount');

                // if ($bill_amount > $grn_amount){
                //     return $this->backWithError('Your input amount is greater then GRN amount.');
                // }
            }


            $invoice_file='';
            $vat_challan_file='';

            $exising_attachment=PurchaseOrderAttachment::where(['purchase_order_id'=>$request->purchase_order_id,'bill_type'=>'po'])->whereIn('status', ['pending', 'halt'])->first();

            if ($request->hasFile('invoice_file') || $request->hasFile('vat_challan_file'))
            {   

                if (isset($exising_attachment) && !empty($exising_attachment->invoice_file)) {
                    if(file_exists(public_path($exising_attachment->invoice_file))){
                        unlink(public_path($exising_attachment->invoice_file));   
                    }

                    if(file_exists(public_path($exising_attachment->vat_challan_file))){
                        unlink(public_path($exising_attachment->vat_challan_file));   
                    }
                }

                $invoice_file=$this->fileUpload($request->file('invoice_file'),'upload/purchase-order/invoice');

                $vat_challan_file=$this->fileUpload($request->file('vat_challan_file'),'upload/purchase-order/vat-chalan');
            }


            $PurchaseOrderAttachment=PurchaseOrderAttachment::updateOrCreate(
                [
                    'purchase_order_id' =>  $request->purchase_order_id,
                    'bill_type' => 'po'
                ],
                [
                    'purchase_order_id'=>$request->purchase_order_id,
                    'invoice_file'=>$invoice_file,
                    'vat_challan_file'=>$vat_challan_file,
                    'bill_amount'=>$bill_amount,
                    'bill_number'=>$request->bill_number,
                    'status'=>'pending',
                    'created_by'=>\Auth::user()->id,
                    'updated_by'=>\Auth::user()->id,
                ]
            );

            $PurchaseOrderAttachment=PurchaseOrderAttachment::where([
                'purchase_order_id' =>  $request->purchase_order_id,
                'bill_type' => 'po'
            ])
            ->update([
                'status'=>"pending",
            ]);

            $PurchaseOrderAttachment=PurchaseOrderAttachment::where([
                'purchase_order_id' =>  $request->purchase_order_id,
                'bill_type' => 'po'
            ])
            ->first();

            $supplier_payment=SupplierPayment::updateOrCreate(
                [
                    'supplier_id' => $model->relQuotation->supplier_id,
                    'purchase_order_id' => $request->purchase_order_id,
                    'bill_type' => 'po',
                    'bill_number' => $request->bill_number
                ],
                [
                    'transection_date' => date('Y-m-d H:i:s'),
                    'transection_type' => 'purchase',
                    'exchange_rate_id' => $model->relQuotation->exchange_rate_id,
                    'bill_amount' => $bill_amount,
                ]
            );

            $grns = GoodsReceivedNote::doesntHave('relPoAttachment')
            ->where('purchase_order_id', $request->purchase_order_id)
            ->get('id');
            if(isset($grns[0])){
                BillingChalan::where('purchase_order_attachment_id', $PurchaseOrderAttachment->id)->delete();
                foreach($grns as $key => $grn){
                    BillingChalan::create([
                        'purchase_order_attachment_id' => $PurchaseOrderAttachment->id,
                        'goods_received_note_id' => $grn->id
                    ]);
                }
            }

    //Notification
            $message = '<span class="notification-links" data-src="'.route('pms.purchase.order-list.show',$model->id).'?view" data-title="Purchase Order Details">Reference No:'.$model->reference_no.'. Waiting for the Audited.</span>';

            CreateOrUpdateNotification('',getManagerInfo('Audit'),$message,'unread','send-to-audit','');

    //data commit
            DB::commit();

            return $this->backWithSuccess('Successfully uploaded po invoice & vat file.');

        }catch (Exception $e){
    //data rollback if someting wrong
            DB::rollback();
            return $this->backWithError($e->getMessage());
        }

    }

    public function updateDirectPurchasePrice($request)
    {
        if (isset($request->unit_amount)) {

            foreach($request->unit_amount as $grnId=>$data){
                $grnSubTotal=0;
                $grnDiscount=0;
                $grnVat=0;
                $grnGrossTotal=0;

                foreach($data as $grnItemId=>$unitAmount){

                    $goodsReceiveItem=GoodsReceivedItem::where('id',$grnItemId)->first();
                    if (isset($goodsReceiveItem->id)) {

                        $qty = $goodsReceiveItem->qty;
                        $subTotal = $unitAmount*$qty;
                        $grnSubTotal += $subTotal;
                        $discountAmount = ($goodsReceiveItem->discount_percentage*($unitAmount*$qty))/100;
                        $grnDiscount += $discountAmount;
                        $vatAmount = ($goodsReceiveItem->vat_percentage*($unitAmount*$qty))/100;
                        $grnVat += $vatAmount;
                        $grossTotal = ($subTotal+$vatAmount)-$discountAmount;
                        $grnGrossTotal += $grossTotal;

                        $goodsReceiveItem->update([
                            'unit_amount' => $unitAmount,
                            'sub_total' => $subTotal,
                            'discount' => $discountAmount,
                            'vat' => $vatAmount,
                            'total_amount' => $grossTotal,
                        ]);

                        GoodsReceivedItemStockIn::where('purchase_order_id',$request->purchase_order_id)->where('goods_received_item_id',$grnItemId)
                        ->update([
                            'unit_amount' => $unitAmount,
                            'sub_total' => $subTotal,
                            'discount' => $discountAmount,
                            'vat' => $vatAmount,
                            'total_amount' => $grossTotal,
                        ]);

                        latestProductPriceUpdate($goodsReceiveItem->product_id,$unitAmount);

                    }
                }

                $goodsReceiveNote = GoodsReceivedNote::where('id',$grnId)->first();


                if (isset($goodsReceiveNote->id)) {
                    $goodsReceiveNote->update([
                        'total_price' => $grnSubTotal,
                        'discount' => $grnDiscount,
                        'vat' => $grnVat,
                        'gross_price' => $grnGrossTotal,
                    ]);   
                }

            }

            return true;
        }

        return false;
    }

    /**
    * Store a newly created resource in storage.s
    *
    * @param  \Illuminate\Http\Request  $request
    * @return \Illuminate\Http\Response
    */
    public function grnAttachmentUpload(Request $request)
    {
        $this->validate($request, [
            'purchase_order_id'  => "required|max:100",
            'goods_received_note_id'  => "required|max:100",
            'bill_amount'  => "required|max:100",
            'invoice_file' => 'mimes:jpeg,jpg,png,gif,pdf|required|max:5048',
            'vat_challan_file' => 'mimes:jpeg,jpg,png,gif,pdf|required|max:5048'
        ]);

        $model=PurchaseOrder::where('id',$request->purchase_order_id)->first();
        if (empty($model)) {
            return $this->backWithError('Purchase Order Not Found!!');
        }

        $bill_amount=doubleval(str_replace(',','',$request->bill_amount));


        if ($model->relQuotation->type=='direct-purchase') {
            $this->updateDirectPurchasePrice($request);

            $goodsReceiveItemsId = GoodsReceivedItem::where('goods_received_note_id',$request->goods_received_note_id)
            ->pluck('id')
            ->all();
            $subtotalAmount= $model->relGoodsReceivedItemStockIn()
            ->whereIn('goods_received_item_id',$goodsReceiveItemsId)
            ->where('is_grn_complete','yes')
            ->sum('total_amount');

            //dd(doubleval($subtotalAmount));
            //dd($bill_amount);

            if (doubleval($subtotalAmount)!==$bill_amount){
                return $this->backWithError('Your input amount is greater then GRN amount.');
            }
        }else{
    // $goodsReceiveItemsId=GoodsReceivedItem::where('goods_received_note_id',$request->goods_received_note_id)
    //     ->pluck('id')
    //     ->all();

    // if (doubleval($model->relGoodsReceivedItemStockIn()
    //             ->whereIn('goods_received_item_id',$goodsReceiveItemsId)
    //             ->where('is_grn_complete','yes')
    //             ->sum('total_amount'))!==$bill_amount){

    //     return $this->backWithError('Your input amount is greater then GRN amount.');
    // }
        }


    //begain transaction
        DB::beginTransaction();
        try{

            $invoice_file='';
            $vat_challan_file='';

            if ($request->hasFile('invoice_file') || $request->hasFile('vat_challan_file'))
            {   
                $exising_attachment=PurchaseOrderAttachment::where(['purchase_order_id'=>$request->purchase_order_id,'goods_received_note_id'=>$request->goods_received_note_id,'bill_type'=>'grn'])->whereIn('status',['pending','halt'])->first();

                if (isset($exising_attachment) && !empty($exising_attachment->invoice_file)) {
                    if(file_exists(public_path($exising_attachment->invoice_file))){
                        unlink(public_path($exising_attachment->invoice_file));   
                    }

                    if(file_exists(public_path($exising_attachment->vat_challan_file))){
                        unlink(public_path($exising_attachment->vat_challan_file));   
                    }
                }

                $invoice_file=$this->fileUpload($request->file('invoice_file'),'upload/purchase-order/invoice');

                $vat_challan_file=$this->fileUpload($request->file('vat_challan_file'),'upload/purchase-order/vat-chalan');
            }

            $PurchaseOrderAttachment=PurchaseOrderAttachment::updateOrCreate(
                [
                    'purchase_order_id' =>  $request->purchase_order_id,
                    'goods_received_note_id' =>  $request->goods_received_note_id,
                    'bill_type' => 'grn'
                ],
                [
                    'purchase_order_id'=>$request->purchase_order_id,
                    'goods_received_note_id'=>$request->goods_received_note_id,
                    'invoice_file'=>$invoice_file,
                    'vat_challan_file'=>$vat_challan_file,
                    'bill_amount'=>$bill_amount,
                    'bill_type'=>'grn',
                    'bill_number'=>$request->bill_number,
                    'status'=>"pending",
                    'created_by'=>\Auth::user()->id,
                    'updated_by'=>\Auth::user()->id,
                ]
            );

            $PurchaseOrderAttachment=PurchaseOrderAttachment::where([
                'purchase_order_id' =>  $request->purchase_order_id,
                'goods_received_note_id' =>  $request->goods_received_note_id,
                'bill_type' => 'grn'
            ])
            ->update([
                'status'=>"pending",
            ]);

            $PurchaseOrderAttachment=PurchaseOrderAttachment::where([
                'purchase_order_id' =>  $request->purchase_order_id,
                'goods_received_note_id' =>  $request->goods_received_note_id,
                'bill_type' => 'grn'
            ])
            ->first();

            if(!isset($exising_attachment->purchase_order_id)){
                $supplier_payment = new SupplierPayment();
                $supplier_payment->supplier_id = $model->relQuotation->supplier_id;
                $supplier_payment->purchase_order_id = $request->purchase_order_id;
                $supplier_payment->goods_received_note_id = $request->goods_received_note_id;
                $supplier_payment->transection_date = date('Y-m-d h:i:s');
                $supplier_payment->transection_type = 'purchase';
                $supplier_payment->bill_number = $request->bill_number;
                $supplier_payment->exchange_rate_id = $model->relQuotation->exchange_rate_id;
                $supplier_payment->bill_amount = $bill_amount;
                $supplier_payment->bill_type = "grn";
                $supplier_payment->save();
            }

            $grn = GoodsReceivedNote::find($request->goods_received_note_id);
            BillingChalan::updateOrCreate([
                'purchase_order_attachment_id' => $PurchaseOrderAttachment->id
            ],[
                'goods_received_note_id' => $grn->id
            ]);

            $message = '<span class="notification-links" data-src="'.route('pms.grn.grn-process.show',$grn->id).'?view" data-title="GRN Details">Reference No:'.$grn->reference_no.'. Waiting for the Audited.</span>';

            CreateOrUpdateNotification('',getManagerInfo('Audit'),'Reference No: <strong>'.$grn->reference_no.'</strong>. Waiting for the Audited','unread','send-to-audit','');

    //data commit
            DB::commit();

            return $this->backWithSuccess('Successfully uploaded po invoice & vat file.');

        }catch (Exception $e){
    //data rollback if someting wrong
            DB::rollback();
            return $this->backWithError($e->getMessage());
        }

    }

    public function billingUpdateAction(Request $request)
    {   
        $id = $request->po_id;
        $billType = $request->bill_type;
        $status = $request->status;
        $grnId = isset($request->grn_id)?$request->grn_id:'';

        DB::beginTransaction();
        try {
            PurchaseOrderAttachment::where('purchase_order_id',$id)
            ->when(!empty($grnId), function($query) use($grnId){
                return $query->where('goods_received_note_id', $grnId);
            })
            ->where('bill_type', $billType)
            ->update([
                'status' => $status,
                'remarks' => $request->remarks
            ]);

            if ($status == 'pending') {
                $auditStatus = 'pending';
                $purchaseMessage="Billing status updated to pending";
            }elseif($status == 'approved'){
                $auditStatus = 'audited';
                $purchaseMessage="Successfully audited by audit department";
            }elseif($status == 'halt'){
                $auditStatus = 'canceled';
                $purchaseMessage="This bill halt by audit department. Please upload it again.";
            }

            SupplierPayment::where('purchase_order_id',$id)
            ->when(!empty($grnId), function($query) use($grnId){
                return $query->where('goods_received_note_id', $grnId);
            })
            ->where('bill_type', $billType)
            ->update([
                'status' => $auditStatus
            ]);


            $model = PurchaseOrder::findOrFail($id);

            if ($status == 'approved') {

    //GR/IR Process
                $amount = PurchaseOrderAttachment::where([
                    'purchase_order_id' => $id,
                    'bill_type' => $billType,
                    'status' => $status,
                    'remarks' => $request->remarks
                ])
                ->when(!empty($grnId), function($query) use($grnId){
                    return $query->where('goods_received_note_id', $grnId);
                })
                ->sum('bill_amount');

                $poBill = PurchaseOrderAttachment::where('purchase_order_id', $id)
                ->when(!empty($grnId), function($query) use($grnId){
                    return $query->where('goods_received_note_id', $grnId);
                })
                ->where('bill_type', $billType)
                ->first();

                $array = array([
                    'cost_centre_id' => $model->cost_centre_id,
                    'chart_of_account_id' => accountDefaultSettings()['grir_account'],
                    'debit' => $amount,
                    'credit' => 0,
                    'narration' => 'Bill Approval :: GR/IR Debit',
                    'type' => 'po-bill',
                    'source' => $poBill->id
                ],[
                    'cost_centre_id' => $model->cost_centre_id,
                    'chart_of_account_id' => (isset($model->relQuotation->relSuppliers->payable_account_id) && $model->relQuotation->relSuppliers->payable_account_id > 0 ? $model->relQuotation->relSuppliers->payable_account_id : accountDefaultSettings()['supplier_payable_account']),
                    'debit' => 0,
                    'credit' => $amount,
                    'narration' => 'Bill Approval :: Supplier Payable Credit',
                    'type' => 'po-bill',
                    'source' => $poBill->id
                ]);

                $entry = saveLedgerEntries(5, date('Y-m-d H:i:s'), 1, '', 'Bill Approval', $array, $model->relQuotation->exchange_rate_id, 0, 0, 0, getCostCentreCompany($model->cost_centre_id));
                if($entry['success']){
                    \App\Models\PmsModels\Purchase\PurchaseOrderEntry::updateOrCreate([
                        'supplier_id' => $model->relQuotation->supplier_id,
                        'purchase_order_id' => $model->id,
                        'type' => 'bill-approval',
                        'entry_id' => $entry['entry']->id,
                    ],[
                        'updated_at' => date('Y-m-d H:i:s')
                    ]);

                    saveSupplierLedger($model->relQuotation->supplier_id, date('Y-m-d'), 0, $amount, '', '', 'Bill Approval :: Supplier Payable Credit', 0, 0, $model->relQuotation->exchange_rate_id);
                }
    //GR/IR Process


                $message = '<span class="notification-links" data-src="'.route('pms.purchase.order-list.show',$model->id).'?view" data-title="Purchase Order Details">Reference No:'.$model->reference_no.'. Waiting for Payments.</span>';
                CreateOrUpdateNotification('',getManagerInfo('Accounts'),$message,'unread','send-to-accounts','');
            }

            $message = '<span class="notification-links" data-src="'.route('pms.purchase.order-list.show',$model->id).'?view" data-title="Purchase Order Details">Reference No:'.$model->reference_no.'.'.$purchaseMessage.'.</span>';
            CreateOrUpdateNotification('',getManagerInfo('Purchase-Department'),$message,'unread','send-to-purchase','');

            DB::commit();
            
            if(!empty($grnId)){
                session()->flash('alert-type', 'success');
                session()->flash('message', "Billing Invoice updated successfully");
            }
            
            return response()->json([
                'success' => true,
                'message' => "Billing Invoice updated successfully"
            ]);
        }catch (\Throwable $th){
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }

    public function poAdvanceUpdateAction (Request $request)
    {   
        $id = $request->po_id;
        $billType = $request->bill_type;
        $status = $request->status;

        DB::beginTransaction();
        try {
            SupplierPayment::where('purchase_order_id',$id)
            ->where('bill_type', $billType)
            ->update([
                'status' => $status,
            ]);

            //start supplier payment update
            if ($status == 'pending') {
                $auditStatus = 'pending';
                $purchaseMessage="Advance status updated to pending";
            }elseif($status == 'audited'){
                $auditStatus = 'audited';
                $purchaseMessage="Successfully audited by audit department";
            }elseif($status == 'canceled'){
                $auditStatus = 'canceled';
                $purchaseMessage="This Advance halt by audit department. Please upload it again.";
            }
            //end supplier payment update

            $model = PurchaseOrder::where('id',$id)->first();

            if ($status == 'audited') {
                $message = '<span class="notification-links" data-src="'.route('pms.purchase.order-list.show',$model->id).'?view" data-title="Purchase Order Details">Reference No:'.$model->reference_no.'. Waiting for Payments.</span>';
                CreateOrUpdateNotification('',getManagerInfo('Accounts'),$message,'unread','send-to-accounts','');
            }

            $message = '<span class="notification-links" data-src="'.route('pms.purchase.order-list.show',$model->id).'?view" data-title="Purchase Order Details">Reference No:'.$model->reference_no.'.'.$purchaseMessage.'.</span>';
            CreateOrUpdateNotification('',getManagerInfo('Purchase-Department'),$message,'unread','send-to-purchase','');

            DB::commit();
            return response()->json([
                'success' => true,
                'message' => 'Advance Status updated successfully'
            ]);
        }catch (\Throwable $th){
            DB::rollback();
            return response()->json([
                'success' => true,
                'message' => $th->getMessage()
            ]);
        }
    }

    public function history($id)
    {
        try{

            $title = "Purchase Order History";
            $purchaseOrder = PurchaseOrder::with(['relGoodReceiveNote','relGoodReceiveNote.relPurchaseOrder','relGoodReceiveNote.relGoodsReceivedItems'])->where('id',$id)
            ->first();

            $proposals = RequestProposal::with(['requestProposalRequisition.relRequisition.relUsersList.employee.unit','relQuotations.relSuppliers'])
            ->whereHas('relQuotations',function($query) use($purchaseOrder){
                return $query->where('request_proposal_id', (isset($purchaseOrder->relQuotation->request_proposal_id) ? $purchaseOrder->relQuotation->request_proposal_id : 0));
            })
            ->orderby('id','desc')->first();


            $billManage = PurchaseOrder::with(['relGoodsReceivedItemStockIn',
                'relQuotation.relSuppliers',
                'relQuotation.exchangeRate.currency',
                'relPurchaseOrderItems',
                'relPoAttachment'
            ])
            ->where('is_send','yes')
            ->whereHas('relGoodReceiveNote',function ($query){
                $query->whereRaw('purchase_orders.id=goods_received_notes.purchase_order_id');
            })
            ->whereHas('relGoodsReceivedItemStockIn', function($query){
                return $query->where('is_grn_complete','yes')->where('total_amount', '>', 0);
            })
            ->where('id',$id)
            ->first();

            return view('pms.backend.pages.billing.po-history',compact('title','purchaseOrder','proposals','billManage'));
        }catch(\Throwable $th){
            return $this->backWithWarning($th->getMessage());
        }
    }
}

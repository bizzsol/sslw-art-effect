<?php
bolt_decrypt( __FILE__ , 'Lc2dMX'); return 0;
##!!!##
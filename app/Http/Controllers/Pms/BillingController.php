<?php
bolt_decrypt( __FILE__ , 'pE4gu3'); return 0;
##!!!##
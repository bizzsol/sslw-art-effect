<?php
bolt_decrypt( __FILE__ , 'Als2WN'); return 0;
##!!!##
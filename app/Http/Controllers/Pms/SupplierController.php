<?php
bolt_decrypt( __FILE__ , '3mzBBZ'); return 0;
##!!!##
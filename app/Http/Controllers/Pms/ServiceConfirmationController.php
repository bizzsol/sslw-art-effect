<?php
bolt_decrypt( __FILE__ , 'rWt0J1'); return 0;
##!!!##
<?php
bolt_decrypt( __FILE__ , 'V4tIcN'); return 0;
##!!!##
<?php
bolt_decrypt( __FILE__ , 'rQ82Ng'); return 0;
##!!!##
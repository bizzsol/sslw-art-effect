<?php
bolt_decrypt( __FILE__ , '1ZzSDd'); return 0;
##!!!##

namespace App\Http\Controllers\Pms;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Http\Requests;
use App\Models\PmsModels\Product;
use App\Models\PmsModels\Suppliers;
use App\Models\PmsModels\Purchase\PurchaseOrder;
use App\Models\PmsModels\Purchase\PurchaseOrderItem;
use App\Models\PmsModels\Rfp\RequestProposal;
use App\Models\PmsModels\Rfp\RequestProposalDetails;
use App\Models\PmsModels\Rfp\RequestProposalDefineSupplier;
use App\Models\PmsModels\Quotations;
use App\Models\PmsModels\QuotationsItems;
use App\Models\PmsModels\SupplierPaymentTerm;
use App\Models\PmsModels\SupplierPayment;
use App\Models\PmsModels\Requisition;
use App\Models\PmsModels\RequisitionTracking;
use App\Models\PmsModels\RequisitionItem;
use App\Models\PmsModels\Purchase\PurchaseOrderRequisition;
use App\Models\PmsModels\Accounts\CurrencyType;
use App\Models\PmsModels\Accounts\ExchangeRate;
use App\Models\PmsModels\Accounts\CostCentre;
use App\Models\Hr\Unit;
use App\Models\Hr\Department;
use App\Models\PmsModels\Category;
use App,DB,PDF,DataTables;
use Illuminate\Support\Facades\Auth;

class QuotationController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $title='Quotations List';
        try {

            $quotations = Quotations::with([
                'relRequestProposal',
                'relSuppliers',
                'exchangeRate.currency'
            ])
            ->whereNotIn('type', ['direct-purchase'])
            ->when(!datatableOrdering(), function($query){
                return $query->orderby('id', 'desc');
            });

            if (request()->ajax()) {
                return DataTables::of($quotations)
                ->addIndexColumn()
                ->addColumn('request_proposal', function($values){
                    return '<a href="javascript:void(0)" onclick="openRequestProposalModal('.$values->request_proposal_id.')"  class="btn btn-link">'.$values->relRequestProposal->reference_no.'</a>';
                })
                ->filterColumn('request_proposal', function ($query, $keyword) {
                    return $query->whereHas('relRequestProposal', function ($query) use($keyword) {
                        $query->where('reference_no', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('request_proposal', function ($query, $order) {
                    return pleaseSortMe($query, $order, RequestProposal::select('request_proposals.reference_no')
                        ->whereColumn('request_proposals.id', 'quotations.request_proposal_id')
                        ->take(1)
                    );
                })
                ->editColumn('quotation_date', function($values){
                    return date('Y-m-d',strtotime($values->quotation_date));
                })
                ->filterColumn('quotation_date', function ($query, $keyword) {
                    $query->where('quotation_date', 'LIKE', '%'.$keyword.'%');
                })
                ->orderColumn('quotation_date', function ($query, $order) {
                    return $query->orderBy('quotation_date', $order);
                })
                ->editColumn('reference_no', function($values){
                    return '<a href="javascript:void(0)" onclick="openModal('.$values->id.')"  class="btn btn-link">'.$values->reference_no.'</a>';
                })
                ->addColumn('supplier', function($values){
                    return  $values->relSuppliers->name.' ('.$values->relSuppliers->code.')';
                })
                ->filterColumn('supplier', function ($query, $keyword) {
                    return $query->whereHas('relSuppliers', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('supplier', function ($query, $order) {
                    return pleaseSortMe($query, $order, Suppliers::select('suppliers.name')
                        ->whereColumn('suppliers.id', 'quotations.supplier_id')
                        ->take(1)
                    );
                })
                ->addColumn('currency', function($values){
                    return  isset($values->exchangeRate->currency->code)?$values->exchangeRate->currency->code:'';
                })
                ->filterColumn('currency', function ($query, $keyword) {
                    return $query->whereHas('exchangeRate.currency', function ($query) use($keyword) {
                        $query->where('code', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('currency', function ($query, $order) {
                    return pleaseSortMe($query, $order, ExchangeRate::select('currencies.code')
                        ->join('currencies', 'currencies.id', '=', 'exchange_rates.currency_id')
                        ->whereColumn('exchange_rates.id', 'quotations.exchange_rate_id')
                        ->take(1)
                    );
                })
                // ->editColumn('total_price', function($values){
                //     return  number_format($values->total_price,2);
                // })
                // ->editColumn('gross_price', function($values){
                //     return  number_format($values->gross_price,2);
                // })
                ->editColumn('status', function($values){
                    return  ucfirst($values->status);
                })
                ->editColumn('type', function($values){
                    return  ucfirst($values->type);
                })
                ->addColumn('actions', function($values){
                    $actions = '';
                    $actions .='<a href="javascript:void(0)" onclick="openModal('.$values->id.')"  class="btn btn-xs btn-info"><i class="las la-eye"></i></a>';

                    if($values->is_approved == "pre-processing"){

                     $actions .= '<a onclick="sendToManagement('.$values->id.')" class="btn btn-xs btn-success"><i class="las la-check"></i>&nbsp;Send to Management</a>';
                 }
                 return $actions;
             })
                ->rawColumns(['request_proposal','reference_no', 'actions'])
                ->make(true);
            }

            return view('pms.backend.pages.quotation.index', [
                'title' =>$title,
                'headerColumns' => $this->estimateHeaderColumns()
            ]);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function estimateHeaderColumns($value='')
    {
        return array(
            ['SL', 'SL'],
            ['request_proposal', 'request_proposal', 'text-center','width:15%'],
            ['quotation_date', 'quotation_date', 'text-center'],
            ['reference_no', 'reference_no', 'text-center'],
            ['supplier', 'supplier', 'text-left'],
            ['currency', 'currency', 'text-center'],
            // ['total_price', 'total_price', 'text-right'],
            // ['discount', 'discount', 'text-right'],
            // ['vat', 'vat', 'text-right'],
            // ['gross_price', 'gross_price', 'text-right'],
            // ['status', 'status', 'text-center'],
            // ['type', 'type', 'text-center'],
            ['actions', 'actions', 'text-center']
        );
    }

    public function estimate()
    {
        $title='Estimate List';
        try {

            $quotations = Quotations::with([
                'relRequestProposal',
                'relSuppliers',
                'exchangeRate.currency'
            ])
            ->where('type','direct-purchase')
            ->when(!datatableOrdering(), function($query){
                return $query->orderby('id', 'desc');
            });

            if (request()->ajax()) {
                return DataTables::of($quotations)
                ->addIndexColumn()
                ->addColumn('request_proposal', function($values){
                   return '<a href="javascript:void(0)" onclick="openRequestProposalModal('.$values->request_proposal_id.')"  class="btn btn-link">'.$values->relRequestProposal->reference_no.'</a>';
               })
                ->filterColumn('request_proposal', function ($query, $keyword) {
                    return $query->whereHas('relRequestProposal', function ($query) use($keyword) {
                        $query->where('reference_no', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('request_proposal', function ($query, $order) {
                    return pleaseSortMe($query, $order, RequestProposal::select('request_proposals.reference_no')
                        ->whereColumn('request_proposals.id', 'quotations.request_proposal_id')
                        ->take(1)
                    );
                })
                ->editColumn('quotation_date', function($values){
                    return date('Y-m-d', strtotime($values->quotation_date));
                })
                ->filterColumn('quotation_date', function ($query, $keyword) {
                    $query->where('quotation_date', 'LIKE', '%'.$keyword.'%');
                })
                ->orderColumn('quotation_date', function ($query, $order) {
                    return $query->orderBy('quotation_date', $order);
                })
                ->editColumn('reference_no', function($values){
                    return '<a href="javascript:void(0)" onclick="openModal('.$values->id.')"  class="btn btn-link">'.$values->reference_no.'</a>';
                })
                ->addColumn('supplier', function($values){
                    return  $values->relSuppliers->name.' ('.$values->relSuppliers->code.')';
                })
                ->filterColumn('supplier', function ($query, $keyword) {
                    return $query->whereHas('relSuppliers', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('supplier', function ($query, $order) {
                    return pleaseSortMe($query, $order, Suppliers::select('suppliers.name')
                        ->whereColumn('suppliers.id', 'quotations.supplier_id')
                        ->take(1)
                    );
                })
                ->addColumn('currency', function($values){
                    return  isset($values->exchangeRate->currency->code)?$values->exchangeRate->currency->code:'';
                })
                ->filterColumn('currency', function ($query, $keyword) {
                    return $query->whereHas('exchangeRate.currency', function ($query) use($keyword) {
                        $query->where('code', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('currency', function ($query, $order) {
                    return pleaseSortMe($query, $order, ExchangeRate::select('currencies.code')
                        ->join('currencies', 'currencies.id', '=', 'exchange_rates.currency_id')
                        ->whereColumn('exchange_rates.id', 'quotations.exchange_rate_id')
                        ->take(1)
                    );
                })
                // ->editColumn('total_price', function($values){
                //     return  number_format($values->total_price,2);
                // })
                // ->editColumn('gross_price', function($values){
                //     return  number_format($values->gross_price,2);
                // })
                ->editColumn('status', function($values){
                    return  ucfirst($values->status);
                })
                ->editColumn('type', function($values){
                    return  ucfirst($values->type);
                })
                ->addColumn('actions', function($values){
                    $actions = '';
                    $actions .='<a href="javascript:void(0)" onclick="openModal('.$values->id.')"  class="btn btn-xs btn-info"><i class="las la-eye"></i></a>';

                    if($values->is_approved == "pre-processing"){

                     $actions .= '<a onclick="sendToManagement('.$values->id.')" class="btn btn-xs btn-success"><i class="las la-check"></i>&nbsp;Send to Management</a>';
                 }
                 return $actions;
             })
                ->rawColumns(['request_proposal','reference_no', 'actions'])
                ->make(true);
            }

            return view('pms.backend.pages.quotation.estimate_index', [
                'title' =>$title,
                'headerColumns' => $this->estimateHeaderColumns()
            ]);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function sendToManagement($quotation_id)
    {
        if(auth()->user()->hasRole('Purchase-Department')){
            $quotation = Quotations::findOrFail($quotation_id);
            $quotation->is_approved = 'processing';
            $quotation->save();

            $message= '<span class="notification-links" data-src="'.route('pms.quotation.quotations.cs.proposal.details',$quotation->request_proposal_id).'" data-ttile="Request Proposal Details">Reference No:'.$quotation->relRequestProposal->reference_no.'.Watting for Management approval.</span>';
            CreateOrUpdateNotification('',getManagerInfo('Management'), $message,'unread','send-to-manager','');

            return $this->redirectBackWithSuccess('Successfully send to Management.','pms.estimate.index');
        }

        return $this->backWithError("Sorry! You don't have the access to to this.");
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */

    public function analysisIndexHeaderColumns($value='')
    {
        return array(
            ['SL', 'SL'],
            ['request_proposal', 'request_proposal', 'text-center'],
            ['requisitions', 'requisitions', 'text-center'],
            ['products', 'products', 'text-center'],
            ['suppliers', 'suppliers', 'text-left'],
            ['options', 'options', 'text-center'],
        );
    }

    public function analysisIndex(){
        try {
            $quotations = Quotations::with([
                'relRequestProposal.requestProposalDetails.product.attributes.attributeOption.attribute',
                'relRequestProposal.requestProposalRequisition.relRequisition',
                'relSelfQuotationSupplierByProposalId.relSuppliers'
            ])
            ->where('status','active')
            ->whereDoesntHave('relSelfQuotationSupplierByProposalId', function($query){
                return $query->whereIn('is_approved', ['approved', 'halt']);
            })
            ->when(auth()->user()->hasRole('Purchase-Department'), function($query){
                return $query->whereIn('is_approved', ['pending', 'pre-processing', 'processing',]);
            })
            ->when(auth()->user()->hasRole('Purchase-Employee'), function($query){
                return $query->whereIn('is_approved', ['pending', 'pre-processing', 'processing',]);
            })
            ->groupBy('request_proposal_id')
            ->when(!datatableOrdering(), function($query){
                return $query->orderby('id', 'desc');
            });

            if (request()->ajax()) {
                return DataTables::of($quotations)
                ->addIndexColumn()
                ->addColumn('request_proposal', function($quotation){
                    return '<a href="javascript:void(0)" onclick="openModal('.$quotation->relRequestProposal->id.')"  class="btn btn-link">'.$quotation->relRequestProposal->reference_no.'</a>';
                })
                ->filterColumn('request_proposal', function ($query, $keyword) {
                    return $query->whereHas('relRequestProposal', function ($query) use($keyword) {
                        $query->where('reference_no', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('request_proposal', function ($query, $order) {
                    return pleaseSortMe($query, $order, RequestProposal::select('request_proposals.reference_no')
                        ->whereColumn('request_proposals.id', 'quotations.request_proposal_id')
                        ->take(1)
                    );
                })

                ->addColumn('requisitions', function($quotation){
                    $requisitions = '';
                    
                    if($quotation->relRequestProposal->requestProposalRequisition->count() > 0){
                        foreach($quotation->relRequestProposal->requestProposalRequisition as $key => $requisition){
                            $requisitions .= ($key > 0 ? ', ' : '').'<a href="javascript:void(0)" data-src="'.route('pms.requisition.list.view.show',$requisition->relRequisition->id).'" class="text-primary requisition m-1 rounded showRequistionDetails" onclick="requistionDetails($(this))">'. $requisition->relRequisition->reference_no .'</a>';
                        }
                    }

                    return $requisitions;
                })
                ->filterColumn('requisitions', function ($query, $keyword) {
                    $query->whereHas('relRequestProposal.requestProposalRequisition.relRequisition', function($query) use($keyword){
                        return $query->where('reference_no', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('requisitions', function ($query, $order) {
                    return pleaseSortMe($query, $order, RequestProposal::select('requisitions.reference_no')
                        ->join('requisitions', 'requisitions.id', '=', 'request_proposal_requisitions.requisition_id')
                        ->join('request_proposal_requisitions', 'request_proposal_requisitions.request_proposal_id', '=', 'request_proposals.id')
                        ->whereColumn('request_proposals.id', 'quotations.request_proposal_id')
                        ->take(1)
                    );
                })

                ->addColumn('products', function($quotation){
                    $products = '';
                    $sl = 0;
                    if($quotation->relRequestProposal->requestProposalDetails->count() > 0){
                        foreach($quotation->relRequestProposal->requestProposalDetails as $key => $product){
                            if(isset($product->product->id)){
                                $sl++;
                                $products .= ($sl > 1 ? ', ' : '').$product->product->name.' '.getProductAttributesFaster($product->product);
                            }
                        }
                    }

                    return $products;
                })
                ->filterColumn('products', function ($query, $keyword) {
                    return $query->where(function($query) use($keyword){
                        return $query->where(function($query) use($keyword){
                            return  $query->whereHas('relRequestProposal.requestProposalDetails.product', function($query) use($keyword){
                                return $query->where('name', 'LIKE', '%'.$keyword.'%');
                            });
                        })
                         ->orWhere(function($query) use($keyword){
                            return $query->whereHas('relRequestProposal.requestProposalDetails.product.attributes.attributeOption', function ($query) use($keyword) {
                                $query->where('name', 'LIKE', '%'.$keyword.'%');
                            })
                            ->orWhereHas('relRequestProposal.requestProposalDetails.product.attributes.attributeOption.attribute', function ($query) use($keyword) {
                                $query->where('name', 'LIKE', '%'.$keyword.'%');
                            });
                         });
                    });
                    
                })
                ->orderColumn('products', function ($query, $order) {
                    return pleaseSortMe($query, $order, RequestProposal::select('products.name')
                        ->join('products', 'products.id', '=', 'request_proposal_details.product_id')
                        ->join('request_proposal_details', 'request_proposal_details.request_proposal_id', '=', 'request_proposals.id')
                        ->join('request_proposal_requisitions', 'request_proposal_requisitions.request_proposal_id', '=', 'request_proposals.id')
                        ->whereColumn('request_proposals.id', 'quotations.request_proposal_id')
                        ->take(1)
                    );
                })

                ->addColumn('suppliers', function($quotation){
                    $suppliers = '';
                    foreach(collect($quotation->relSelfQuotationSupplierByProposalId) as $key => $supplier){
                        if(isset($supplier->relSuppliers->id)){
                            $suppliers .= '<button class="btn btn-xs btn-primary">'.$supplier->relSuppliers->name.' ('.$supplier->relSuppliers->code.') ['.ucwords($supplier->is_approved).']</button>&nbsp;';
                        }
                    }
                    return $suppliers;
                })
                ->filterColumn('suppliers', function ($query, $keyword) {
                    return $query->whereHas('relSelfQuotationSupplierByProposalId', function ($query) use($keyword){
                        return $query->whereIn('is_approved', (auth()->user()->hasRole('Purchase-Department') ? ['pending', 'pre-processing'] : ['pending', 'pre-processing']));
                    })
                    ->whereHas('relSelfQuotationSupplierByProposalId.relSuppliers', function ($query) use($keyword){
                        return $query->where(function($query) use($keyword){
                            return $query->where('name', 'LIKE', '%'.$keyword.'%')
                            ->orWhere('code', 'LIKE', '%'.$keyword.'%');
                        });
                    });
                })
                ->orderColumn('suppliers', function ($query, $order) {
                    return pleaseSortMe($query, $order, Suppliers::select('suppliers.name')
                        ->whereColumn('suppliers.id', 'quotations.supplier_id')
                        ->take(1)
                    );
                })
                ->addColumn('options', function($quotation){
                    $options = '';
                    if(collect($quotation->relSelfQuotationSupplierByProposalId)->whereIn('is_approved', (auth()->user()->hasRole('Purchase-Department') ? ['processing', 'approved', 'halt'] : ['processing', 'approved', 'halt']))->count() == 0){
                        $options .= '<a href="'.route('pms.quotation.quotations.cs.compare.list', $quotation->request_proposal_id).'"  title="Compare Process Analysis"  class="btn btn-success btn-xs"><i class="las la-list"></i></a>';
                    }

                    $options .= '<a target="_blank" href="'.route('pms.quotation.cs.history',$quotation->request_proposal_id).'" class="btn btn-warning btn-xs ml-1" title="CS History"><i class="las la-history"></i></a>';

                    return $options;
                })
                ->rawColumns(['request_proposal', 'requisitions', 'suppliers', 'options'])
                ->toJson();
            }

            return view('pms.backend.pages.quotation.analysis-index', [
                'title' => 'Quotations Analysis',
                'headerColumns' => $this->analysisIndexHeaderColumns()
            ]);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function quotationItems($quotation_id){
        $title = "Quotation wise items";
        $quotations = Quotations::with([
            'relSuppliers.SupplierRatings',
            'relSupplierPaymentTerm',
            'relRequestProposal.createdBy',
            'exchangeRate.currency',
            'relQuotationItems.relProduct.productUnit',
            'relQuotationItems.relProduct.category.category',
            'relQuotationItems.relProduct.attributes.attributeOption.attribute',
        ])->where('id',$quotation_id)->where('status','active')->first();
        $systemCurrency = systemCurrency();
        $exchangeRate = exchangeRate($quotations->exchangeRate, $systemCurrency->id);
        $same = ($quotations->exchangeRate->currency_id == $systemCurrency->id ? true : false);
        $approved = request()->has('approved');
        try {
            return view('pms.backend.pages.quotation.item-show', compact('quotations', 'title', 'systemCurrency', 'exchangeRate', 'same', 'approved'));
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

     /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
     public function quotationGenerate($proposal_id){  
        $title = 'Quotation Generate';
        
        $requestProposal = RequestProposal::where('id',$proposal_id)
        ->with([
            'requestProposalRequisition.relRequisition.Unit',
            'defineToSupplier.supplier.suppleierCurrencies',
            'createdBy',
            'requestProposalDetails.product.category.category', 
            'requestProposalDetails.product.productUnit', 
            'requestProposalDetails.product.attributes.attributeOption.attribute', 
        ])
        ->first();

        $clue = 'GRP';
        $units = \App\Models\Hr\Unit::whereIn('hr_unit_id', $requestProposal->requestProposalRequisition->pluck('relRequisition.hr_unit_id'))->get();
        if($units->count() == 1){
            $clue = $units[0]->hr_unit_short_name;
        }

        $prefix = 'QG-'.date('y', strtotime(date('Y-m-d'))).'-'.$clue.'-';
        $refNo = uniqueCode(15,$prefix,'quotations','id');
        try {

            $supplierPaymentTerms = supplierPaymentTerm();
            $quotationSupplier = Quotations::where('request_proposal_id', $proposal_id)->select('supplier_id')->get();

            $quotationSupplierArray = array();
            foreach($quotationSupplier as $values){
                array_push($quotationSupplierArray,$values->supplier_id);
            }

            if($requestProposal->defineToSupplier->whereNotIn('supplier_id', $quotationSupplierArray)->count() <= 0){
                return redirect('pms/rfp/request-proposal');
            }

            $currencyTypes = CurrencyType::whereHas('currencies.suppliers', function($query) use($requestProposal, $quotationSupplierArray){
                return $query->whereIn('supplier_id', $requestProposal->defineToSupplier->whereNotIn('supplier_id', $quotationSupplierArray)->pluck('supplier_id')->toArray());
            })->get();

            return view('pms.backend.pages.quotation.create', compact('title','requestProposal','refNo','supplierPaymentTerms','quotationSupplierArray', 'currencyTypes'));

        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */

    public function store(Request $request)
    {   
        $request->validate([
            'currency_id' => ['required'],
            'quotation_date' => ['required', 'date'],
            'reference_no' => 'required|max:15|unique:quotations',
            "supplier_id"    => "required",
            "supplier_id.*"  => "exists:suppliers,id",
            "request_proposal_id"    => "required",
            "request_proposal_id.*"  => "exists:request_proposals,id",
            'sum_of_subtoal' => 'required',
            'discount' => 'nullable',
            'vat' => 'nullable',
            'gross_price' => 'required',
            'type' => 'required|in:online,manual',
        ]);

        $type=$request->type;
        $modal=Quotations::where([
            'supplier_id'=>$request->supplier_id,
            'request_proposal_id'=>$request->request_proposal_id,
            'type'=>$type
        ])->first();

        if(!empty($modal)){
            return $this->backWithError('Already generate a quotation using this supplier!!');
        }

        DB::beginTransaction();
        try {

            $quotationFilePath='';
            if ($request->hasFile('quotation_file'))
            {
                $quotationFilePath=$this->fileUpload($request->file('quotation_file'),'upload/quotation/pdf-file');
            }

            $quotation=Quotations::create([
                'supplier_id'=>$request->supplier_id,
                'request_proposal_id'=>$request->request_proposal_id,
                'reference_no'=>$request->reference_no,
                'quotation_date'=>date('Y-m-d',strtotime($request->quotation_date)),
                'exchange_rate_id'=>getExchangeRates($request->currency_id)['rate']->id,
                'total_price'=>$request->sum_of_subtoal,
                'discount'=>$request->discount,
                'vat'=>$request->vat==null?0:$request->vat,
                'gross_price'=>$request->gross_price,
                'status'=>'active',
                'type'=>$type,
                'quotation_file'=>$quotationFilePath
            ]);

            foreach ($request->product_id as $i=>$product_id){
                $quotationItemsInput[]=[
                    'quotation_id'=>$quotation->id,
                    'product_id'=>$product_id,
                    'unit_price'=>$request->unit_price[$product_id],
                    'qty'=>$request->qty[$product_id],
                    'sub_total_price'=>$request->sub_total_price[$product_id],
                    'discount'=>$request->item_discount_percent[$product_id]==null?0:$request->item_discount_percent[$product_id],
                    'discount_amount'=>$request->item_discount_amount[$product_id],
                    'vat_percentage'=>$request->product_vat[$product_id],
                    'vat'=>$request->sub_total_vat_price[$product_id],
                    'total_price'=>($request->sub_total_price[$product_id]-$request->item_discount_amount[$product_id])+$request->sub_total_vat_price[$product_id],
                    'created_at'=>date('Y-m-d h:i'),
                ];
            }

            //Quotation items insert.
            QuotationsItems::insert($quotationItemsInput);

            if (!is_null($request->payment_term_id)) {
                $this->storeSupplierPaymentTerm($quotation->id, $request);
            }

            DB::commit();
            return $this->backWithSuccess('Quotation Generated Successfully');
        }
        catch (Throwable $th){
            DB::rollback();
            return $this->backWithError($th->getMessage());
        }
    }

    public function storeSupplierPaymentTerm($quotationId,$request){
     SupplierPaymentTerm::create(
        [
            'quotation_id'=>$quotationId,
            'supplier_id'=>$request->supplier_id,
            'payment_term_id'=>$request->payment_term_id,
            'payment_percent'=>$request->payment_percent??0,
            'remarks'=>$request->remarks,
        ]
    );
 }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function compareGridView($request_proposal_id)
    {
        try {

            $title='Quotations Compare Analysis';
            $quotations=Quotations::where('status','active')
            ->where('is_approved','pending')
            ->where('request_proposal_id',$request_proposal_id)
            ->orderby('gross_price','asc')
            ->get();

            return view('pms.backend.pages.quotation._compare2', compact('title','quotations'));

        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }

    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */

    public function compareListView($request_proposal_id)
    {
        try {
            $title = 'Quotations Compare Analysis';
            $quotations = Quotations::where('status','active')
            ->with([
                'exchangeRate.currency',
                'relRequestProposal.createdBy',
                'relSuppliers.relPaymentTerms',
                'relSuppliers.SupplierRatings',
                'exchangeRate.currency',
                'relQuotationItems.relProduct.productUnit',
                'relQuotationItems.relProduct.category.category',
                'relQuotationItems.relProduct.attributes.attributeOption.attribute'
            ])
            ->whereIn('is_approved', (auth()->user()->hasRole('Purchase-Department') ? ['pending', 'pre-processing'] : ['pending', 'pre-processing']))
            ->where('request_proposal_id',$request_proposal_id)
            ->orderby('gross_price','asc')
            ->get();
            $systemCurrency = systemCurrency();
            if (isset($quotations[0])) {
                return view('pms.backend.pages.quotation._compare', compact('title','quotations', 'systemCurrency'));
            }
            return back();
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */

    public function compareStore(Request $request){
        if(isset($request->quotation_id[0])){
            foreach($request->quotation_id as $key => $quotation_id){
                if(empty($request->supplier_payment_terms_id[$quotation_id])){
                    return response()->json([
                        'success' => false,
                        'message' => "Please choose Supplier Payment Term for the selected quotations",
                    ]);
                }

                if(empty($request->delivery_date[$quotation_id])){
                    return response()->json([
                        'success' => false,
                        'message' => "Please enter Delivery date for the selected quotations",
                    ]);
                }
            }
        }else{
            return response()->json([
                'success' => false,
                'message' => "Please choose at leat one quotation to send to the Management.",
            ]);
        }

        DB::beginTransaction();
        try {

            foreach ($request->quotation_id as $key=>$quotation_id){
                $modal=Quotations::where([
                    'id' => $quotation_id,
                    'request_proposal_id' => $request->request_proposal_id
                ])
                ->whereIn('is_approved', (auth()->user()->hasRole('Purchase-Department') ? ['pending', 'pre-processing'] : ['pending', 'pre-processing']))
                ->first();

                if(isset($modal)){
                    // $modal->is_approved = (auth()->user()->hasRole('Purchase-Employee') ? 'pre-processing' : 'processing' );
                    $modal->is_approved = 'processing';
                    $modal->note = $request->note[$quotation_id];
                    $modal->delivery_date = $request->delivery_date[$quotation_id];
                    $modal->supplier_payment_terms_id=$request->supplier_payment_terms_id[$quotation_id];
                    $modal->save();
                }
            }
            
            //Notification
            if(auth()->user()->hasRole('Purchase-Employee')){
                $message = '<span class="notification-links" data-src="'.url('pms/quotation/cs-compare-view-notification/'.$request->request_proposal_id).'" data-title="Quotation CS">Reference No:'.$modal->reference_no.'. Watting for Purchase Approval.</span>';

                CreateOrUpdateNotification('',getManagerInfo('Purchase-Department'), $message,'unread','send-to-purchase-department','');
            }else{
                $message = '<span class="notification-links" data-src="'.url('pms/quotation/cs-compare-view-notification/'.$request->request_proposal_id).'" data-title="Quotation CS">Reference No:'.$modal->reference_no.'. Watting for Management Approval.</span>';

                CreateOrUpdateNotification('',getManagerInfo('Management'), $message,'unread','send-to-manager','');
            }

            DB::commit();

            session()->flash('alert-type','success');
            session()->flash('message','Successfully Send for approval');
            return response()->json([
                'success' => true,
                'url' => route('pms.quotation.quotations.cs.analysis'),
            ]);

        }catch (Throwable $th){
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage(),
            ]);
        }
    }


    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function approvalHeaderColumns($value='')
    {
        return array(
            ['SL', 'SL'], 
            ['request_proposal', 'request_proposal', 'text-center'],
            ['requisitions', 'requisitions', 'text-center'],
            ['products', 'products', 'text-center'],
            ['supplier', 'supplier', 'text-left'],
            ['status', 'status', 'text-center'],
            ['actions', 'actions', 'text-center action']
        );
    }
    public function approvalList()
    {
        $title = 'Quotations Request For Approved';

        try {
            $quotations = Quotations::with([
                'relQuotationItems',
                'relRequestProposal',
                'relSuppliers',
                'exchangeRate.currency',
                'relSelfQuotationSupplierByProposalId.relSuppliers'
            ])
            ->where([
                'status' => 'active',
                'is_po_generate' => 'no',
            ])
            ->where('is_approved', 'processing')
            ->whereDoesntHave('relRequestProposal.relQuotations', function($query){
                return $query->where('is_approved', 'approved');
            })
            ->whereNotIn('type', ['direct-purchase'])
            ->when(!datatableOrdering(), function($query){
                return $query->orderby('id', 'desc');
            })
            ->groupBy('request_proposal_id');

            $approvalRange = Auth::user()->relApprovalRange;

            if (request()->ajax()) {
                return DataTables::of($quotations)
                ->addIndexColumn()
                ->addColumn('request_proposal', function($values){
                    return '<a href="javascript:void(0)" class="btn btn-link" onclick="requestProposalDetails('.$values->relRequestProposal->id.')">'.(isset($values->relRequestProposal->reference_no)?$values->relRequestProposal->reference_no:'').'</a>';
                })
                ->filterColumn('request_proposal', function ($query, $keyword) {
                    return $query->whereHas('relRequestProposal', function ($query) use($keyword) {
                        $query->where('reference_no', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('request_proposal', function ($query, $order) {
                    return pleaseSortMe($query, $order, RequestProposal::select('request_proposals.reference_no')
                        ->whereColumn('request_proposals.id', 'quotations.request_proposal_id')
                        ->take(1)
                    );
                })

                ->addColumn('requisitions', function($quotation){
                    $requisitions = '';
                    
                    if($quotation->relRequestProposal->requestProposalRequisition->count() > 0){
                        foreach($quotation->relRequestProposal->requestProposalRequisition as $key => $requisition){
                            $requisitions .= ($key > 0 ? ', ' : '').'<a href="javascript:void(0)" data-src="'.route('pms.requisition.list.view.show',$requisition->relRequisition->id).'" class="text-primary requisition m-1 rounded showRequistionDetails" onclick="requistionDetails($(this))">'. $requisition->relRequisition->reference_no .'</a>';
                        }
                    }

                    return $requisitions;
                })
                ->filterColumn('requisitions', function ($query, $keyword) {
                    $query->whereHas('relRequestProposal.requestProposalRequisition.relRequisition', function($query) use($keyword){
                        return $query->where('reference_no', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('requisitions', function ($query, $order) {
                    return pleaseSortMe($query, $order, RequestProposal::select('requisitions.reference_no')
                        ->join('requisitions', 'requisitions.id', '=', 'request_proposal_requisitions.requisition_id')
                        ->join('request_proposal_requisitions', 'request_proposal_requisitions.request_proposal_id', '=', 'request_proposals.id')
                        ->whereColumn('request_proposals.id', 'quotations.request_proposal_id')
                        ->take(1)
                    );
                })

                ->addColumn('products', function($quotation){
                    $products = '';
                    $sl = 0;
                    if($quotation->relRequestProposal->requestProposalDetails->count() > 0){
                        foreach($quotation->relRequestProposal->requestProposalDetails as $key => $product){
                            if(isset($product->product->name)){
                                $sl++;
                                $products .= ($sl > 1 ? ', ' : '').$product->product->name.' '.getProductAttributesFaster($product->product);
                            }
                        }
                    }

                    return $products;
                })
                ->filterColumn('products', function ($query, $keyword) {
                    return $query->where(function($query) use($keyword){
                        return $query->where(function($query) use($keyword){
                            return  $query->whereHas('relRequestProposal.requestProposalDetails.product', function($query) use($keyword){
                                return $query->where('name', 'LIKE', '%'.$keyword.'%');
                            });
                        })
                         ->orWhere(function($query) use($keyword){
                            return $query->whereHas('relRequestProposal.requestProposalDetails.product.attributes.attributeOption', function ($query) use($keyword) {
                                $query->where('name', 'LIKE', '%'.$keyword.'%');
                            })
                            ->orWhereHas('relRequestProposal.requestProposalDetails.product.attributes.attributeOption.attribute', function ($query) use($keyword) {
                                $query->where('name', 'LIKE', '%'.$keyword.'%');
                            });
                         });
                    });
                    
                })
                ->orderColumn('products', function ($query, $order) {
                    return pleaseSortMe($query, $order, RequestProposal::select('products.name')
                        ->join('products', 'products.id', '=', 'request_proposal_details.product_id')
                        ->join('request_proposal_details', 'request_proposal_details.request_proposal_id', '=', 'request_proposals.id')
                        ->join('request_proposal_requisitions', 'request_proposal_requisitions.request_proposal_id', '=', 'request_proposals.id')
                        ->whereColumn('request_proposals.id', 'quotations.request_proposal_id')
                        ->take(1)
                    );
                })


                ->addColumn('supplier', function($values){
                    $data = '';
                    if ($values->relSelfQuotationSupplierByProposalId) {
                        foreach ($values->relSelfQuotationSupplierByProposalId->whereNotIn('is_approved',['pending','approved','halt']) as $supplier) {
                            if(isset($supplier->relSuppliers->name)){
                                $data .= '<button class="btn btn-sm btn-xs m-1 '.($supplier->is_approved=='halt'?' btn-warning':'btn-success').'">'.$supplier->relSuppliers->name.' ('.$supplier->relSuppliers->code.')</button>';
                            }
                        }
                    }
                    
                    return $data;
                })
                ->filterColumn('supplier', function ($query, $keyword) {
                    return $query->whereHas('relSuppliers', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('supplier', function ($query, $order) {
                    return pleaseSortMe($query, $order, Suppliers::select('suppliers.name')
                        ->whereColumn('suppliers.id', 'quotations.supplier_id')
                        ->take(1)
                    );
                })
                ->addColumn('status', function($values){
                    $status = '';
                    $approvedCount = Quotations::where('request_proposal_id', $values->request_proposal_id)->where('is_approved','approved')->count();
                    if($approvedCount > 0) {
                        $status.='<a class="btn btn-xs btn-success">Approved ('.$approvedCount.' Supplier)</a>';
                    }else{
                        $status.='<a class="btn btn-xs btn-warning">Waiting for Approval</a>';
                    }

                    return $status;
                })
                ->addColumn('actions', function($values) use($approvalRange){
                    $actions = '';
                    $count = 0;
                    if(isset($approvalRange[0])){
                        foreach ($approvalRange as $range){
                            if ($range->min_amount <= $values->relQuotationItems->sum('total_price') && $range->max_amount >= $values->relQuotationItems->sum('total_price')){
                                $count++;
                            }
                        }

                        if($count >= 0){
                            if ($values->relSelfQuotationSupplierByProposalId->whereIn('is_approved', ['approved','halt'])->count() == 0) {
                                $actions.='<a href="'.route('pms.quotation.quotations.cs.compare.view',['id'=>$values->request_proposal_id,'slug'=>'list']).'?type=rfp"  title="Compare Process Analysis"  class="btn btn-success btn-xs"><i class="las la-list"></i></a>';
                            }
                        }else{
                            $actions.='<a title="Out of Approval Range"  class="btn btn-danger btn-xs"><i class="las la-ban"></i></a>';
                        }
                    }else{
                        if ($values->relSelfQuotationSupplierByProposalId->whereIn('is_approved', ['approved','halt'])->count() == 0) {
                            $actions.='<a href="'.route('pms.quotation.quotations.cs.compare.view',['id'=>$values->request_proposal_id,'slug'=>'list']).'?type=rfp"  title="Compare Process Analysis"  class="btn btn-success btn-xs"><i class="las la-list"></i></a>';
                        }
                    }

                    $actions.='<a target="_blank" href="'.route('pms.quotation.cs.history',$values->request_proposal_id).'" class="btn btn-warning btn-xs ml-1" title="CS History"><i class="las la-history"></i></a>';
                    
                    return $actions;
                })
                ->rawColumns(['request_proposal', 'requisitions', 'supplier', 'status', 'actions'])
                ->make(true);
            }

            return view('pms.backend.pages.quotation.approval-index', [
                'title' => $title,
                'headerColumns' => $this->approvalHeaderColumns()
            ]);

        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */

    public function estimateApprovalList()
    {
        $title = 'Estimate Request For Approved';

        try {
            $quotations = Quotations::with([
                'relQuotationItems',
                'relRequestProposal',
                'relSuppliers',
                'exchangeRate.currency',
                'relSelfQuotationSupplierByProposalId.relSuppliers'
            ])
            ->where([
                'status' => 'active',
                'is_po_generate' => 'no',
            ])
            ->where('is_approved','processing')
            ->where('type','direct-purchase');

            $approvalRange = Auth::user()->relApprovalRange;

            if (request()->ajax()) {
                $options = [
                    'Management' => auth()->user()->hasRole('Management'),
                ];
                return DataTables::of($quotations)
                ->addIndexColumn()
                ->addColumn('request_proposal', function($values){
                    return '<a href="javascript:void(0)" class="btn btn-link" onclick="requestProposalDetails('.$values->relRequestProposal->id.')">'.(isset($values->relRequestProposal->reference_no)?$values->relRequestProposal->reference_no:'').'</a>';
                })
                ->filterColumn('request_proposal', function ($query, $keyword) {
                    return $query->whereHas('relRequestProposal', function ($query) use($keyword) {
                        $query->where('reference_no', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('request_proposal', function ($query, $order) {
                    return pleaseSortMe($query, $order, RequestProposal::select('request_proposals.reference_no')
                        ->whereColumn('request_proposals.id', 'quotations.request_proposal_id')
                        ->take(1)
                    );
                })

                ->addColumn('requisitions', function($quotation){
                    $requisitions = '';
                    
                    if($quotation->relRequestProposal->requestProposalRequisition->count() > 0){
                        foreach($quotation->relRequestProposal->requestProposalRequisition as $key => $requisition){
                            $requisitions .= ($key > 0 ? ', ' : '').'<a href="javascript:void(0)" data-src="'.route('pms.requisition.list.view.show',$requisition->relRequisition->id).'" class="text-primary requisition m-1 rounded showRequistionDetails" onclick="requistionDetails($(this))">'. $requisition->relRequisition->reference_no .'</a>';
                        }
                    }

                    return $requisitions;
                })
                ->filterColumn('requisitions', function ($query, $keyword) {
                    $query->whereHas('relRequestProposal.requestProposalRequisition.relRequisition', function($query) use($keyword){
                        return $query->where('reference_no', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('requisitions', function ($query, $order) {
                    return pleaseSortMe($query, $order, RequestProposal::select('requisitions.reference_no')
                        ->join('requisitions', 'requisitions.id', '=', 'request_proposal_requisitions.requisition_id')
                        ->join('request_proposal_requisitions', 'request_proposal_requisitions.request_proposal_id', '=', 'request_proposals.id')
                        ->whereColumn('request_proposals.id', 'quotations.request_proposal_id')
                        ->take(1)
                    );
                })

                ->addColumn('products', function($quotation){
                    $products = '';
                    $sl = 0;
                    if($quotation->relRequestProposal->requestProposalDetails->count() > 0){
                        foreach($quotation->relRequestProposal->requestProposalDetails as $key => $product){
                            if(isset($product->product->name)){
                                $sl++;
                                $products .= ($sl > 1 ? ', ' : '').$product->product->name.' '.getProductAttributesFaster($product->product);
                            }
                        }
                    }

                    return $products;
                })
                ->filterColumn('products', function ($query, $keyword) {
                    return $query->where(function($query) use($keyword){
                        return $query->where(function($query) use($keyword){
                            return  $query->whereHas('relRequestProposal.requestProposalDetails.product', function($query) use($keyword){
                                return $query->where('name', 'LIKE', '%'.$keyword.'%');
                            });
                        })
                         ->orWhere(function($query) use($keyword){
                            return $query->whereHas('relRequestProposal.requestProposalDetails.product.attributes.attributeOption', function ($query) use($keyword) {
                                $query->where('name', 'LIKE', '%'.$keyword.'%');
                            })
                            ->orWhereHas('relRequestProposal.requestProposalDetails.product.attributes.attributeOption.attribute', function ($query) use($keyword) {
                                $query->where('name', 'LIKE', '%'.$keyword.'%');
                            });
                         });
                    });
                    
                })
                ->orderColumn('products', function ($query, $order) {
                    return pleaseSortMe($query, $order, RequestProposal::select('products.name')
                        ->join('products', 'products.id', '=', 'request_proposal_details.product_id')
                        ->join('request_proposal_details', 'request_proposal_details.request_proposal_id', '=', 'request_proposals.id')
                        ->join('request_proposal_requisitions', 'request_proposal_requisitions.request_proposal_id', '=', 'request_proposals.id')
                        ->whereColumn('request_proposals.id', 'quotations.request_proposal_id')
                        ->take(1)
                    );
                })

                ->addColumn('supplier', function($values){
                    $data = '';
                    if ($values->relSelfQuotationSupplierByProposalId) {
                        foreach ($values->relSelfQuotationSupplierByProposalId->whereNotIn('is_approved',['pending','approved','halt']) as $supplier) {
                            $data.='<button class="btn btn-sm btn-xs mr-1 '.($supplier->is_approved=='halt'?' btn-warning':'btn-success').'">'.$supplier->relSuppliers->name.' ('.$supplier->relSuppliers->code.')</button>';
                        }
                    }
                    
                    return $data;
                })
                ->filterColumn('supplier', function ($query, $keyword) {
                    return $query->whereHas('relSuppliers', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('supplier', function ($query, $order) {
                    return pleaseSortMe($query, $order, Suppliers::select('suppliers.name')
                        ->whereColumn('suppliers.id', 'quotations.supplier_id')
                        ->take(1)
                    );
                })
                ->addColumn('status', function($values){
                    $status = '';
                    $approvedCount = Quotations::where('request_proposal_id',$values->request_proposal_id)->where('is_approved','approved')->count();
                    if($approvedCount > 0) {
                        $status.='<a class="btn btn-xs btn-success">Approved Once</a>';
                    }else{
                        $status.='<a class="btn btn-xs btn-warning">Waiting for Approval</a>';
                    }
                    return $status;
                })
                ->addColumn('actions', function($values) use($approvalRange, $options){
                    $actions = '';
                    $count = 0;
                    if(isset($approvalRange[0])){
                        foreach ($approvalRange as $range){
                            if ($range->min_amount <= $values->relQuotationItems->sum('total_price') && $range->max_amount >= $values->relQuotationItems->sum('total_price')){
                                $count++;
                            }
                        }

                        if($count >= 0){
                            if ($options['Management']) {
                                $actions.='<a href="'.route('pms.quotation.quotations.cs.compare.view',['id'=>$values->request_proposal_id,'slug'=>'list']).'?type=direct-purchase"  title="Compare Process Analysis"  class="btn btn-success btn-xs"><i class="las la-list"></i></a>';
                            }
                        }else{
                            $actions.='<a title="Out of Approval Range"  class="btn btn-danger btn-xs"><i class="las la-ban"></i></a>';
                        }
                    }else{
                        if ($options['Management']) {
                            $actions.='<a href="'.route('pms.quotation.quotations.cs.compare.view',['id'=>$values->request_proposal_id,'slug'=>'list']).'?type=direct-purchase"  title="Compare Process Analysis"  class="btn btn-success btn-xs"><i class="las la-list"></i></a>';
                        }
                    }

                    $actions.='<a target="__blank" href="'.route('pms.quotation.cs.history',$values->request_proposal_id).'" class="btn btn-warning btn-xs ml-1" title=" CS History"><i class="las la-history"></i></a>';
                    
                    return $actions;
                })
                ->rawColumns(['request_proposal','supplier','status','actions', 'requisitions', 'products'])
                ->make(true);
            }

            return view('pms.backend.pages.quotation.estimate-index', ['title'=>$title,'headerColumns'=>$this->approvalHeaderColumns()]);

        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */

    public function compareView($id,$slug){
        $title = 'Quotations Compare Analysis';
        $requestProposalId = $id;
        try {
            $quotations = Quotations::with([
                'relRequestProposal.createdBy',
                'relSuppliers.SupplierRatings',
                'exchangeRate.currency',
                'relSuppliers',
                'relQuotationItems.relProduct.category.category',
                'relQuotationItems.relProduct.productUnit',
                'relQuotationItems.relProduct.attributes.attributeOption.attribute',
            ])
            ->where([
                'status' => 'active',
                'request_proposal_id' => $id
            ])
            ->whereIn('is_approved',['processing','halt'])
            ->orderby('gross_price','asc')
            ->get();
            $systemCurrency = systemCurrency();

            if($slug == 'list'){
                return view('pms.backend.pages.quotation._compare_view_list', compact('title','quotations','requestProposalId', 'systemCurrency'));
            }else{
                return view('pms.backend.pages.quotation._compare_view_grid', compact('title','quotations','requestProposalId'));
            }
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */

    public function compareViewNotification($id){
        try {
            $quotations = Quotations::with([
                'relRequestProposal.createdBy',
                'relSuppliers.SupplierRatings',
                'exchangeRate.currency',
                'relQuotationItems.relProduct.productUnit',
                'relQuotationItems.relProduct.category.category',
                'relQuotationItems.relProduct.attributes.attributeOption.attribute',
            ])->where([
                'status' => 'active',
                'request_proposal_id' => $id
            ])
            ->whereNotIn('is_approved',['pending'])
            ->orderby('gross_price','asc')->get();
            
            $systemCurrency = systemCurrency();

            return view('pms.backend.pages.quotation._compare_view_list_notification', compact('quotations', 'systemCurrency'));
        }catch (\Throwable $th){
            return $th->getMessage();
        }
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */

    public function compareViewPdfView($id){
        try {
            $quotations = Quotations::with([
                'relRequestProposal.createdBy',
                'relSuppliers.SupplierRatings',
                'exchangeRate.currency',
                'relQuotationItems.relProduct.productUnit',
                'relQuotationItems.relProduct.category.category',
                'relQuotationItems.relProduct.attributes.attributeOption.attribute',
            ])->where([
                'status' => 'active',
                'request_proposal_id' => $id
            ])
            ->whereNotIn('is_approved',['pending'])
            ->orderby('gross_price','asc')->get();
            
            $systemCurrency = systemCurrency();
            $title="CS View";
            $purchaseOrderId=$id;

            if(request()->has('downloadpdf')){
                return viewMPDF('pms.backend.pages.quotation.compare_view_list_pdf_download', [
                    'title' => $title,
                    'quotations' => $quotations,
                    'systemCurrency' => $systemCurrency,
                ], $title, $title, 'a3','L');
            }

            return view('pms.backend.pages.quotation.compare_view_list_pdf', compact('quotations', 'systemCurrency','title','purchaseOrderId'));
        }catch (\Throwable $th){
            return $th->getMessage();
        }
    }


    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */

    public function approved(Request $request){  
        DB::beginTransaction();
        try {
            $proposal = RequestProposal::with([
                'requestProposalDetails', 'relQuotations'
            ])
            ->findOrFail($request->request_proposal_id);
            if($proposal->requestProposalDetails->count() > (isset($request->item_radios) && is_array($request->item_radios) ? count($request->item_radios) : 0)){
                return response()->json([
                    'success' => false,
                    'message' => "Please Chhose All ".$proposal->requestProposalDetails->count()." Products"
                ]);
            }

            $quotationItems = QuotationsItems::with([
                'relQuotation'
            ])
            ->whereIn('id', $request->item_radios)
            ->get();
            $quotations = [];
            $references = [];
            if($quotationItems->count() > 0){
                foreach($quotationItems as $key => $quotationItem){
                    $quotationItem->is_approved = 'approved';
                    $quotationItem->save();

                    $quotationItem->relQuotation->is_approved = 'approved';
                    $quotationItem->relQuotation->remarks = $request->remarks;
                    $quotationItem->relQuotation->save();

                    array_push($references, $quotationItem->relQuotation->reference_no);
                    array_push($quotations, $quotationItem->relQuotation->id);
                }
            }

            $quotations = Quotations::whereIn('id', $quotations)
            ->where('type', 'direct-purchase')
            ->get();
            if(isset($quotations[0])){
                foreach($quotations as $key => $quotation){
                    $purchaseOrder = $this->directPurchaseStore($quotation);
                    if($purchaseOrder){
                        $message = '<span class="notification-links" data-src="'.route('pms.purchase.order-list.show',$purchaseOrder->id).'?view" data-title="Purchase Order Details">Reference No:'.$purchaseOrder->reference_no.'. Request for cash approved.</span>';
                        CreateOrUpdateNotification('',getManagerInfo('Accounts'),$message,'unread','send-to-accounts','');
                    }
                }
            }

            $message = '<span class="notification-links" data-src="'.url('pms/quotation/cs-compare-view-notification/'.$request->request_proposal_id).'" data-title="Quotation CS">References ('.implode(', ', $references).') Approved By Management.</span>';
            CreateOrUpdateNotification('',getManagerInfo('Purchase-Department'),$message,'unread','sent-to-purchase','');

            DB::commit();
            session()->flash('alert-type', 'success');
            session()->flash('message', 'CS approved successfully.');
            return response()->json([
                'success' => true,
                'url' => (isset($proposal->relQuotations[0]->type) && $proposal->relQuotations[0]->type == 'direct-purchase' ? route('pms.quotation.quotations.estimate.reject.list') : route('pms.quotation.approval.list'))
            ]);
        }catch (Throwable $th){
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $th->getMessage()
            ]);
        }
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */


    public function rejectAll($id)
    {  

        $type = (request()->has('type'))?request()->get('type'):'';

        DB::beginTransaction();
        try {

            $quotation = Quotations::where('request_proposal_id',$id)
            ->where('is_po_generate','no')
            ->whereNotIn('is_approved',['pending'])
            ->when($type == 'direct-purchase', function($query){
                return $query->where('type','direct-purchase');
            })
            ->when($type != 'direct-purchase', function($query){
                return $query->whereNotIn('type',['direct-purchase']);
            })
            ->update([
                'is_approved'=>'halt'
            ]);


            $proposal = RequestProposal::findOrFail($id);

            $message = '<span class="notification-links" data-src="'.url('pms/quotation/cs-compare-view-notification/'.$id).'" data-title="Quotation CS">Reference No:'.$proposal->reference_no.'. Rejected All By Management.</span>';
            
            CreateOrUpdateNotification('',getManagerInfo('Purchase-Department'),$message,'unread','sent-to-purchase','');

            DB::commit();

            if ($type == 'direct-purchase') {
             return $this->redirectBackWithSuccess('Successfully Rejected!!','pms.quotation.quotations.estimate.reject.list');
         }

         return $this->redirectBackWithSuccess('Successfully Rejected!!','pms.quotation.quotations.reject.list');

     }catch (Throwable $th){
        DB::rollback();
        return $this->backWithError($th->getMessage());
    }
}   

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */

    public function directPurchaseStore($quotation)
    {   
        $requisition = isset($quotation->relRequestProposal->requestProposalRequisition[0])?$quotation->relRequestProposal->requestProposalRequisition[0]->relRequisition:false;

        if($requisition){

            $prefix = 'IJO-'.date('y', strtotime(date('Y-m-d'))).'-'.unitName($requisition->hr_unit_id)->hr_unit_short_name.'-';
            $refNo = uniqueCode(17,$prefix,'purchase_orders','id');

            $po_data = new PurchaseOrder();
            $po_data->quotation_id = $quotation->id;
            $po_data->hr_unit_id = $requisition->hr_unit_id;
            $po_data->reference_no = $refNo;
            $po_data->po_date = date('Y-m-d h:i:s');
            $po_data->remarks = $quotation->remarks;
            $po_data->save();

            $poSubTotal = 0;
            $poVat = 0;
            $poGrossTotal = 0;

            $collectProductId = [];
            if($quotation->relQuotationItems->where('is_approved', 'approved')->count() > 0){
                foreach($quotation->relQuotationItems->where('is_approved', 'approved') as $key => $values){
                    $discount = ($values->discount > 0 ? $values->unit_price*($values->discount/100) : 0);
                    $unit_price = systemDoubleValue($values->unit_price-$discount);

                    $poQty = $values->qty;
                    $subTotal = $unit_price*$poQty;
                    $poSubTotal += $subTotal;

                    $vatAmount = systemDoubleValue($values->vat_percentage > 0 ? $subTotal*($values->vat_percentage/100) : 0);
                    $poVat += $vatAmount;

                    $grossTotal = systemDoubleValue($subTotal+$vatAmount);
                    $poGrossTotal += $grossTotal;

                    $po_items = new PurchaseOrderItem();
                    $po_items->po_id = $po_data->id; 
                    $po_items->product_id = $values->product_id; 
                    $po_items->unit_price = $unit_price; 
                    $po_items->qty = $poQty;
                    $po_items->sub_total_price = $subTotal;
                    $po_items->discount_percentage = 0;
                    $po_items->discount = 0;
                    $po_items->vat_percentage = $values->vat_percentage;
                    $po_items->vat = $vatAmount;
                    $po_items->total_price = $grossTotal;
                    $po_items->save();

                    array_push($collectProductId,$values->product_id);
                }
            }

            //Update Purcahse Order
            $po_data->update([
                'total_price' => $poSubTotal,
                'discount' => 0,
                'vat' => $poVat,
                'gross_price' => $poGrossTotal,
            ]);
            
            if($quotation->relSupplierPaymentTerm->type == 'paid'){
                //Add Supplier Pyaments
                $pay_amount = ($quotation->relSupplierPaymentTerm->payment_percent > 0 ? ($poGrossTotal*($quotation->relSupplierPaymentTerm->payment_percent/100)) : 0);
                if($pay_amount > 0){
                    $duration_date = $quotation->relSupplierPaymentTerm->day_duration;
                    $pay_date=date('Y-m-d h:i:s', strtotime('+'.$duration_date.' day', strtotime($po_data->po_date)));
                    //Payment date based on advance & due
                    $supplier_payment = new SupplierPayment();
                    $supplier_payment->supplier_id = $quotation->supplier_id;
                    $supplier_payment->purchase_order_id = $po_data->id;
                    $supplier_payment->transection_date = date('Y-m-d h:i:s');
                    $supplier_payment->transection_type = 'purchase';
                    $supplier_payment->exchange_rate_id = $quotation->exchange_rate_id;
                    $supplier_payment->bill_number = $po_data->reference_no;
                    $supplier_payment->pay_amount = $pay_amount;
                    $supplier_payment->pay_date = $pay_date;
                    $supplier_payment->bill_type = 'po-advance';
                    $supplier_payment->save();

                    //Notification send to accounts
                    $message = '<span class="notification-links"  data-title="Purchase Order Details">Reference No:'.$po_data->reference_no.'. A PO has been submitted with an advance amount of TK '.$supplier_payment->pay_amount.'</span>';

                    CreateOrUpdateNotification('',getManagerInfo('Accounts'),$message,'unread','send-to-accounts','');
                }
            }
            
            //Update requisition
            $requisition->items()->whereIn('product_id', $collectProductId)->where('is_send','yes')
            ->where('po_generate','no')
            ->update(['po_generate'=>'yes']);
            //update quotation
            $quotation->update(['is_po_generate'=>'yes']);

            $uncommon = Category::doesntHave('category')->where('type', 'uncommon')
            ->whereHas('subCategory.products', function($query) use($requisition){
                return $query->where('id', $requisition->items->pluck('product_id')->toArray());
            })->count();

            PurchaseOrderRequisition::updateOrCreate([
                'purchase_order_id' => $po_data->id,
                'requisition_id' => $requisition->id,
            ],[
                'hr_department_id' => $uncommon > 0 ? $requisition->relUsersList->employee->as_department_id : 0,
            ]);

            //Requisition tracking with requisiton id
            RequisitionTracking::storeRequisitionTracking($requisition->id,'PO-Issue');
            
            return $po_data;
        }

        return false;

    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */

    public function toggleQuotationStatus(Request $request){
        $quotation = Quotations::where('id',$request->id)->first();

        if(isset($quotation->id)){
            $newStatus = $request->status;
            $newText = $newStatus == 'approved' ? 'Approved' : (($newStatus == 'halt')? 'Halt' : 'Pending');
            $update = $quotation->update(['is_approved' => $newStatus,'updated_at' => date('Y-m-d H:i:s'),'updated_by' => Auth::user()->id]);
            if($update){
                return response()->json([
                    'success' => true,
                    'new_text' => $newText,
                    'message' => 'Data has been updated!'
                ]);
            }
            return response()->json([
                'success' => false,
                'message' => 'Something Went Wrong!'
            ]);
        }
        return response()->json([
            'success' => false,
            'message' => 'Data not found!'
        ]);
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */


    public function haltStatus(Request $request){
        $quotation = Quotations::findOrFail($request->id);
        try{
            $quotation->update([
                'remarks' => $request->remarks,
                'is_approved' => 'halt',
                'updated_at' => date('Y-m-d H:i:s'),
                'updated_by' => Auth::user()->id
            ]);
            return $this->backWithSuccess('Quotation Successfully Halt!!');
        }catch (\Throwable $th){

            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */

    public function search(Request $request)
    {
        $response = [];

        $from_date=date('Y-m-d',strtotime($request->from_date));
        $to_date=date('Y-m-d',strtotime($request->to_date));

        $is_approved=$request->is_approved;
        $is_po_generate=$request->is_po_generate;

        $datas = Quotations::whereDate('quotation_date', '>=', $from_date)
        ->whereDate('quotation_date', '<=', $to_date)
        ->when($is_approved, function($query) use($is_approved){
            return $query->where('is_approved',$is_approved);
        })
        ->when($is_po_generate, function($query) use($is_po_generate){
            return $query->where('is_po_generate',$is_po_generate);
        })
        ->where('status','active')
        ->where('type','!=','direct-purchase')
        ->orderBy('id','desc')
        ->paginate(100);

        $quotationList = [];
        foreach ($datas as $data){
            foreach (Auth::user()->relApprovalRange as $range){
                if ($range->min_amount <= $data->relQuotationItems->sum('total_price') && $range->max_amount >= $data->relQuotationItems->sum('total_price')){
                    $quotationList[] = $data;
                }
            }
        }
        $quotationList = $this->paginate($quotationList, 100);

        try {
            if(count($quotationList)>0)
            {
                $body = \Illuminate\Support\Facades\View::make('pms.backend.pages.quotation._quotation-list-search',
                    ['quotationList'=> $quotationList]);
                $contents = $body->render();

                $response['result'] = 'success';
                $response['body'] = $contents;
            }else{

                $response['result'] = 'error';
                $response['message'] = 'Data not found.!!';
            }

        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }

        return $response;
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */

    public function gpListHeaderColumns($value='')
    {
        return array(
            ['SL', 'SL'], 
            ['date', 'quotation_date', 'text-center'],
            ['delivery_date', 'delivery_date', 'text-center'],
            ['request_proposal', 'request_proposal', 'text-center'],
            ['requisitions', 'requisitions', 'text-center'],
            ['products', 'products', 'text-center'],
            ['reference_no', 'reference_no'],
            ['supplier', 'supplier', 'text-left'],
            ['actions', 'actions', 'text-center action']
        );
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */

    public function generatePoList()
    {
        $title = 'Quotations Approved List';

        try {

            $quotationList = Quotations::with([
                'relRequestProposal',
                'relSuppliers',
                'relSelfQuotationSupplierByProposalId.relSuppliers',
                'exchangeRate.currency'
            ])
            ->where([
                'status' => 'active',
                'is_approved' => 'approved',
                'is_po_generate' => 'no'
            ])
            ->whereNotIn('type',['direct-purchase'])
            ->when(!datatableOrdering(), function($query){
                return $query->orderby('id', 'desc');
            });

            $options = [
                'quotation-halt' => auth()->user()->hasPermissionTo('quotation-halt'),
                'generate-po' => auth()->user()->hasPermissionTo('generate-po')
            ];

            if (request()->ajax()) {
                return DataTables::of($quotationList)
                ->addIndexColumn()
                ->addColumn('date', function($values){
                    return date('Y-m-d', strtotime($values->quotation_date));
                })
                ->filterColumn('date', function ($query, $keyword) {
                    return $query->where('quotation_date', 'LIKE', '%'.$keyword.'%');
                })
                ->orderColumn('date', function ($query, $order) {
                    return $query->orderBy('quotation_date', $order);
                })
                ->addColumn('delivery_date', function($values){
                    return !empty($values->delivery_date) ? date('Y-m-d',strtotime($values->delivery_date)):'';
                })
                ->filterColumn('delivery_date', function ($query, $keyword) {
                    return $query->where('delivery_date', 'LIKE', '%'.$keyword.'%');
                })
                ->orderColumn('delivery_date', function ($query, $order) {
                    return $query->orderBy('delivery_date', $order);
                })
                ->addColumn('request_proposal', function($values){
                    return '<a href="javascript:void(0)" class="btn btn-link" onclick="requestProposalDetails('.$values->relRequestProposal->id.')">'.(isset($values->relRequestProposal->reference_no)?$values->relRequestProposal->reference_no:'').'</a>';
                })
                ->filterColumn('request_proposal', function ($query, $keyword) {
                    return $query->whereHas('relRequestProposal', function ($query) use($keyword) {
                        $query->where('reference_no', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('request_proposal', function ($query, $order) {
                    return pleaseSortMe($query, $order, RequestProposal::select('request_proposals.reference_no')
                        ->whereColumn('request_proposals.id', 'quotations.request_proposal_id')
                        ->take(1)
                    );
                })

                ->addColumn('requisitions', function($quotation){
                    $requisitions = '';
                    
                    if($quotation->relRequestProposal->requestProposalRequisition->count() > 0){
                        foreach($quotation->relRequestProposal->requestProposalRequisition as $key => $requisition){
                            $requisitions .= ($key > 0 ? ', ' : '').'<a href="javascript:void(0)" data-src="'.route('pms.requisition.list.view.show',$requisition->relRequisition->id).'" class="text-primary requisition m-1 rounded showRequistionDetails" onclick="requistionDetails($(this))">'. $requisition->relRequisition->reference_no .'</a>';
                        }
                    }

                    return $requisitions;
                })
                ->filterColumn('requisitions', function ($query, $keyword) {
                    $query->whereHas('relRequestProposal.requestProposalRequisition.relRequisition', function($query) use($keyword){
                        return $query->where('reference_no', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('requisitions', function ($query, $order) {
                    return pleaseSortMe($query, $order, RequestProposal::select('requisitions.reference_no')
                        ->join('requisitions', 'requisitions.id', '=', 'request_proposal_requisitions.requisition_id')
                        ->join('request_proposal_requisitions', 'request_proposal_requisitions.request_proposal_id', '=', 'request_proposals.id')
                        ->whereColumn('request_proposals.id', 'quotations.request_proposal_id')
                        ->take(1)
                    );
                })

                ->addColumn('products', function($quotation){
                    $products = '';
                    if($quotation->relRequestProposal->requestProposalDetails->count() > 0){
                        foreach($quotation->relRequestProposal->requestProposalDetails as $key => $product){
                            $products .= ($key > 0 ? ', ' : '').$product->product->name.' '.getProductAttributesFaster($product->product);
                        }
                    }

                    return $products;
                })
                ->filterColumn('products', function ($query, $keyword) {
                    return $query->where(function($query) use($keyword){
                        return $query->where(function($query) use($keyword){
                            return  $query->whereHas('relRequestProposal.requestProposalDetails.product', function($query) use($keyword){
                                return $query->where('name', 'LIKE', '%'.$keyword.'%');
                            });
                        })
                         ->orWhere(function($query) use($keyword){
                            return $query->whereHas('relRequestProposal.requestProposalDetails.product.attributes.attributeOption', function ($query) use($keyword) {
                                $query->where('name', 'LIKE', '%'.$keyword.'%');
                            })
                            ->orWhereHas('relRequestProposal.requestProposalDetails.product.attributes.attributeOption.attribute', function ($query) use($keyword) {
                                $query->where('name', 'LIKE', '%'.$keyword.'%');
                            });
                         });
                    });
                    
                })
                ->orderColumn('products', function ($query, $order) {
                    return pleaseSortMe($query, $order, RequestProposal::select('products.name')
                        ->join('products', 'products.id', '=', 'request_proposal_details.product_id')
                        ->join('request_proposal_details', 'request_proposal_details.request_proposal_id', '=', 'request_proposals.id')
                        ->join('request_proposal_requisitions', 'request_proposal_requisitions.request_proposal_id', '=', 'request_proposals.id')
                        ->whereColumn('request_proposals.id', 'quotations.request_proposal_id')
                        ->take(1)
                    );
                })

                ->addColumn('reference_no', function($values){
                    return '<a href="javascript:void(0)" onclick="openModal('.$values->id.')"  class="btn btn-link">'.$values->reference_no.'</a>';
                })
                ->filterColumn('reference_no', function ($query, $keyword) {
                    return $query->where('reference_no', 'LIKE', '%'.$keyword.'%');
                })
                ->addColumn('supplier', function($values){
                    return '<button class="btn btn-sm btn-xs mr-1 '.($values->is_approved=='halt'?' btn-warning':'btn-success').'">'.$values->relSuppliers->name.' ('.$values->relSuppliers->code.')</button>';
                })
                ->filterColumn('supplier', function ($query, $keyword) {
                    return $query->whereHas('relSuppliers', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%')->orWhere('code', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('supplier', function ($query, $order) {
                    return pleaseSortMe($query, $order, Suppliers::select('suppliers.name')
                        ->whereColumn('suppliers.id', 'quotations.supplier_id')
                        ->take(1)
                    );
                })
                ->addColumn('actions', function($values) use($options){
                    $actions = '';
                    
                    $actions.='<div class="btn-group"><button class="btn dropdown-toggle" data-toggle="dropdown"><span id="statusName'.$values->id.'">'.ucfirst($values->is_approved).'</span></button><ul class="dropdown-menu">';

                    $actions.='<li><a href="javascript:void(0)" onclick="openModal('.$values->id.')">Show</a></li>';

                    if ($values->is_approved === 'approved') {
                        if ($options['quotation-halt']) {
                         $actions.='<li><a class="requisitionApprovedBtn" onclick="requisitionApprovedBtn($(this))" data-id="'.$values->id.'" data-status="halt">Halt</a></li>';
                     }

                     if ($options['generate-po']) {
                         $actions.='<li><a href="'.route('pms.quotation.generate.po.process',$values->id).'">Generate PO</a></li>';
                         if ($values->relPurchaseOrder) {

                           $actions.='<li><a class="completeQuotation" onclick="completeQuotation($(this))" data-id="'.$values->id.'" data-status="completeQuotation">Complete</a></li>';
                       }
                     }
                 }

                 $actions.='<li><a target="__blank" href="'.url('pms/quotation/cs-compare-view-pdf/'.$values->request_proposal_id).'" data-title="Quotation CS">CS View</a></li>';

                 $actions.='<li><a target="__blank" href="'.route('pms.quotation.cs.history',$values->request_proposal_id).'" data-title="Quotation CS">CS History</a></li>';

                 $actions.='</ul></div>';

                 return $actions;
             })
                ->rawColumns(['request_proposal', 'requisitions', 'supplier', 'reference_no', 'actions'])
                ->make(true);
            }

            return view('pms.backend.pages.quotation.generate-po-list', ['title'=>$title,'headerColumns'=>$this->gpListHeaderColumns()]);

        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */

    public function quotationRejectList()
    {
        $title = 'Quotations Rejected List';

        try {

            $quotationList = Quotations::with([
                'relRequestProposal',
                'relSelfQuotationSupplierByProposalId.relSuppliers',
                'relSuppliers'
            ])
            ->where([
                'status' => 'active', 'is_approved'=>'halt', 'is_po_generate'=>'no'
            ])
            ->where('type','!=','direct-purchase')
            ->when(!datatableOrdering(), function($query){
                return $query->orderby('id', 'desc');
            })
            ->groupBy('request_proposal_id');

            if (request()->ajax()) {
                $options = [
                    'quotation-halt' => auth()->user()->hasPermissionTo('quotation-halt')
                ];

                return DataTables::of($quotationList)
                ->addIndexColumn()
                ->addColumn('date', function($values){
                    return date('Y-m-d', strtotime($values->quotation_date));
                })
                ->filterColumn('date', function ($query, $keyword) {
                    return $query->where('quotation_date', 'LIKE', '%'.$keyword.'%');
                })
                ->orderColumn('date', function ($query, $order) {
                    return $query->orderBy('quotation_date', $order);
                })
                ->addColumn('delivery_date', function($values){
                    return !empty($values->delivery_date) ? date('Y-m-d',strtotime($values->delivery_date)):'';
                })
                ->filterColumn('delivery_date', function ($query, $keyword) {
                    return $query->where('delivery_date', 'LIKE', '%'.$keyword.'%');
                })
                ->orderColumn('delivery_date', function ($query, $order) {
                    return $query->orderBy('delivery_date', $order);
                })
                ->addColumn('request_proposal', function($values){
                    return '<a href="javascript:void(0)" class="btn btn-link" onclick="requestProposalDetails('.$values->relRequestProposal->id.')">'.(isset($values->relRequestProposal->reference_no)?$values->relRequestProposal->reference_no:'').'</a>';
                })
                ->filterColumn('request_proposal', function ($query, $keyword) {
                    return $query->whereHas('relRequestProposal', function ($query) use($keyword) {
                        $query->where('reference_no', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('request_proposal', function ($query, $order) {
                    return pleaseSortMe($query, $order, RequestProposal::select('request_proposals.reference_no')
                        ->whereColumn('request_proposals.id', 'quotations.request_proposal_id')
                        ->take(1)
                    );
                })
                ->addColumn('reference_no', function($values){
                    return '<a href="javascript:void(0)" onclick="openModal('.$values->id.')"  class="btn btn-link">'.$values->reference_no.'</a>';
                })
                ->filterColumn('reference_no', function ($query, $keyword) {
                    return $query->where('reference_no', 'LIKE', '%'.$keyword.'%');
                })
                ->addColumn('supplier', function($values){
                    $data = '';
                    if ($values->relSelfQuotationSupplierByProposalId) {
                        foreach ($values->relSelfQuotationSupplierByProposalId->where('is_approved','halt') as $supplier) {

                            $data.='<button class="btn btn-sm btn-xs mr-1 '.($supplier->is_approved=='halt'?' btn-warning':'btn-success').'">'.$supplier->relSuppliers->name.' ('.$supplier->relSuppliers->code.')</button>';
                        }
                    }
                    
                    return $data;
                })
                ->filterColumn('supplier', function ($query, $keyword) {
                    return $query->whereHas('relSuppliers', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%')->orWhere('code', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('supplier', function ($query, $order) {
                    return pleaseSortMe($query, $order, Suppliers::select('suppliers.name')
                        ->whereColumn('suppliers.id', 'quotations.supplier_id')
                        ->take(1)
                    );
                })
                ->addColumn('actions', function($values) use($options){
                    $actions = '';
                    
                    $actions.='<div class="btn-group"><button class="btn dropdown-toggle" data-toggle="dropdown"><span id="statusName'.$values->id.'">'.ucfirst($values->is_approved).'</span></button><ul class="dropdown-menu">';

                    $actions.='<li><a target="__blank" href="'.url('pms/quotation/cs-compare-view-pdf/'.$values->request_proposal_id).'" data-title="Quotation CS">CS View</a></li>';

                    $actions.='<li><a target="__blank" href="'.route('pms.quotation.cs.history',$values->request_proposal_id).'" data-title="Quotation CS">CS History</a></li>';

                    $actions.='</ul></div>';

                    if ($options['quotation-halt']) {
                        $actions.='<a href="'.route('pms.quotation.quotations.cs.compare.view',['id'=>$values->relRequestProposal->id,'slug'=>'list']).'?type=rfp"  title="Compare Process Analysis" class="btn btn-success btn-xs"><i class="las la-list"></i></a>';
                    }

                    return $actions;
                })
                ->rawColumns(['request_proposal','supplier','reference_no','actions'])
                ->make(true);
            }

            return view('pms.backend.pages.quotation.rejected-list', ['title'=>$title,'headerColumns'=>$this->gpListHeaderColumns()]);

        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */

    public function estimateRejectList()
    {
        $title = 'Estimate Rejected List';

        try {
            $quotationList = Quotations::with([
                'relQuotationItems',
                'relRequestProposal',
                'relSuppliers',
                'exchangeRate.currency',
                'relSelfQuotationSupplierByProposalId.relSuppliers'
            ])
            ->where([
                'status'=>'active',
                'is_approved'=>'halt',
                'is_po_generate'=>'no'
            ])
            ->where('type','direct-purchase')
            ->when(!datatableOrdering(), function($query){
                return $query->orderby('id', 'desc');
            });

            if (request()->ajax()) {
                $options = [
                    'quotation-halt' => auth()->user()->hasPermissionTo('quotation-halt')
                ];
                
                return DataTables::of($quotationList)
                ->addIndexColumn()
                ->addColumn('date', function($values){
                    return date('Y-m-d', strtotime($values->quotation_date));
                })
                ->filterColumn('date', function ($query, $keyword) {
                    $query->where('quotation_date', 'LIKE', '%'.$keyword.'%');
                })
                ->orderColumn('date', function ($query, $order) {
                    return $query->orderBy('quotation_date', $order);
                })
                ->addColumn('delivery_date', function($values){
                    return !empty($values->delivery_date) ? date('Y-m-d',strtotime($values->delivery_date)):'';
                })
                ->filterColumn('delivery_date', function ($query, $keyword) {
                    $query->where('delivery_date', 'LIKE', '%'.$keyword.'%');
                })
                ->orderColumn('delivery_date', function ($query, $order) {
                    return $query->orderBy('delivery_date', $order);
                })
                ->addColumn('request_proposal', function($values){
                    return '<a href="javascript:void(0)" class="btn btn-link" onclick="requestProposalDetails('.$values->relRequestProposal->id.')">'.(isset($values->relRequestProposal->reference_no)?$values->relRequestProposal->reference_no:'').'</a>';
                })
                ->filterColumn('request_proposal', function ($query, $keyword) {
                    return $query->whereHas('relRequestProposal', function ($query) use($keyword) {
                        $query->where('reference_no', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('request_proposal', function ($query, $order) {
                    return pleaseSortMe($query, $order, RequestProposal::select('request_proposals.reference_no')
                        ->whereColumn('request_proposals.id', 'quotations.request_proposal_id')
                        ->take(1)
                    );
                })
                ->addColumn('reference_no', function($values){
                    return '<a href="javascript:void(0)" onclick="openModal('.$values->id.')"  class="btn btn-link">'.$values->reference_no.'</a>';
                })
                ->filterColumn('reference_no', function($query, $keyword){
                    return $query->where('reference_no', 'LIKE', '%'.$keyword.'%');;
                })
                ->addColumn('supplier', function($values){
                    $data = '';
                    if ($values->relSelfQuotationSupplierByProposalId) {
                        foreach ($values->relSelfQuotationSupplierByProposalId->where('is_approved','halt') as $supplier) {
                            $data.='<button class="btn btn-sm btn-xs mr-1 '.($supplier->is_approved=='halt'?' btn-warning':'btn-success').'">'.$supplier->relSuppliers->name.' ('.$supplier->relSuppliers->code.')</button>';
                        }
                    }
                    return $data;
                })
                ->filterColumn('supplier', function ($query, $keyword) {
                    return $query->whereHas('relSuppliers', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%')->orWhere('code', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('supplier', function ($query, $order) {
                    return pleaseSortMe($query, $order, Suppliers::select('suppliers.name')
                        ->whereColumn('suppliers.id', 'quotations.supplier_id')
                        ->take(1)
                    );
                })
                ->addColumn('actions', function($values) use($options){
                    $actions = '';
                    if ($values->relSelfQuotationSupplierByProposalId->whereIn('is_approved', ['approved'])->count() == 0) {
                        $actions.='<div class="btn-group"><button class="btn dropdown-toggle" data-toggle="dropdown"><span id="statusName'.$values->id.'">'.ucfirst($values->is_approved).'</span></button><ul class="dropdown-menu">';

                        $actions.='<li><a target="__blank" href="'.url('pms/quotation/cs-compare-view-pdf/'.$values->request_proposal_id).'" data-title="Quotation CS">CS View</a></li>';

                        $actions.='<li><a target="__blank" href="'.route('pms.quotation.cs.history',$values->request_proposal_id).'" data-title="Quotation CS">CS History</a></li>';

                        $actions.='</ul></div>';

                        if ($options['quotation-halt']) {
                            $actions.='<a href="'.route('pms.quotation.quotations.cs.compare.view',['id'=>$values->relRequestProposal->id,'slug'=>'list']).'?type=rfp"  title="Compare Process Analysis" class="btn btn-success btn-xs"><i class="las la-list"></i></a>';
                        }
                    }
                    return $actions;
                })
                ->rawColumns(['request_proposal','supplier','reference_no','actions'])
                ->make(true);
            }

            return view('pms.backend.pages.quotation.estimate-rejected-list', ['title'=>$title,'headerColumns'=>$this->gpListHeaderColumns()]);

        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */

    public function generatePoProcess($id)
    {
        $title = 'Generate Purchase Order';
        $quotation = Quotations::with([
            'relQuotationItems',
            'relRequestProposal.requestProposalRequisition'
        ])->where(['status'=>'active', 'is_approved'=>'approved', 'is_po_generate'=>'no'])->findOrFail($id);

        $uncommon = Category::whereHas('subCategory.products', function($query) use($quotation){
            return $query->whereIn('id', $quotation->relQuotationItems->pluck('product_id')->toArray());
        })->where('type', 'uncommon')->count();

        $requisitions = Requisition::with([
            'relUsersList.employee'
        ])
        ->whereHas('requestProposalRequisition.relRequestProposal.relQuotations', function($query) use($quotation){
            return $query->where('id', $quotation->id);
        })
        ->whereHas('items', function($query) use($quotation){
            return $query->whereIn('product_id', $quotation->relQuotationItems->where('is_approved', 'approved')->pluck('product_id')->toArray());
        })
        ->get();

        $unit_ids = $requisitions->pluck('hr_unit_id')->toArray();
        $department_ids = [];
        if($requisitions->count() > 0){
            foreach($requisitions as $key => $requisition){
                array_push($department_ids, $requisition->relUsersList->employee->as_department_id);
            }
        }

        try{

            $units = Unit::whereIn('hr_unit_id', $unit_ids)->get();
            $departments = Department::whereIn('hr_department_id', $department_ids)->get();

            $systemCurrency = systemCurrency();
            $currency = $quotation->exchangeRate->currency->code;
            $exchangeRate = exchangeRate($quotation->exchangeRate, $systemCurrency->id);
            $same = ($systemCurrency->id == $quotation->exchangeRate->currency_id ? true : false);

            return view('pms.backend.pages.quotation.generate-po-process',compact('title','quotation','units', 'departments', 'uncommon', 'systemCurrency', 'exchangeRate', 'currency', 'same'));

        }catch(\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */

    public function unitWiseRequisition($unitId,$quotationId)
    {
        try{

            $productIds = QuotationsItems::where('quotation_id', $quotationId)
            ->pluck('product_id')->toArray();

            $array1 = Requisition::where([
                'hr_unit_id' => $unitId,
                'is_po_generate' => 'no',
                'is_send_to_rfp' => 'yes',
                'delivery_status' => 'rfp',
                'approved_id' => 1,
                'status' => 1,
            ]) 
            ->whereHas('requisitionItems', function($query) use($productIds) {
                return $query->where('is_send','yes')
                ->where('po_generate','no')
                ->whereIn('product_id',$productIds);
            })
            ->whereHas('requestProposalRequisition.relRequestProposal.relQuotations', function($query) use($quotationId){
                return $query->where('id', $quotationId);
            })
            ->when(request()->get('uncommon') > 0, function($query){
                return $query->whereHas('relUsersList.employee', function($query){
                    return $query->where('as_department_id', request()->get('hr_department_id'));
                });
            })
            ->pluck('id')->toArray();

            $array2 = Requisition::where([
                'hr_unit_id' =>$unitId,
                'approved_id' => 1,
                'status' => 1,
                'is_po_generate' => 'no',
                'is_send_to_rfp' => 'yes',
                'request_status' => 'send_rfp',
                'delivery_status' => 'partial-delivered',
            ]) 
            ->whereHas('requisitionItems', function($query) use($productIds) {
                return $query->where('is_send','yes')
                ->where('po_generate','no')
                ->whereIn('product_id',$productIds);
            })
            ->whereHas('requestProposalRequisition.relRequestProposal.relQuotations', function($query) use($quotationId){
                return $query->where('id', $quotationId);
            })
            ->when(request()->get('uncommon') > 0, function($query){
                return $query->whereHas('relUsersList.employee', function($query){
                    return $query->where('as_department_id', request()->get('hr_department_id'));
                });
            })
            ->pluck('id')->toArray();

            $array = array_unique(array_merge($array1, $array2));

            return Requisition::whereIn('id',$array)->get(['id','reference_no']);

        }catch(\Throwable $th){
            return response()->json($th->getMessage());
        }
    }

    public function getCostCentres(Request $request)
    {
        $requisitions = Requisition::with([
            'relUsersList.employee'
        ])
        ->whereIn('id', $request->requisitions)
        ->get();
        $departments = [];
        if(isset($requisitions[0])){
            foreach($requisitions as $key => $requisition){
                array_push($departments, $requisition->relUsersList->employee->as_department_id);
            }
        }

        $costCentres = CostCentre::with([
            'company'
        ])
        ->where('hr_unit_id', $request->hr_unit_id)
        ->whereIn('hr_department_id', $departments)
        ->get();

        $centres = '';
        if(isset($costCentres[0])){
            foreach($costCentres as $key => $costCentre){
                $centres .= '<option value="'.$costCentre->id.'">['.$costCentre->code.'] '.$costCentre->name.' ('.$costCentre->company->name.')</option>';
            }
        }

        return $centres;
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */

    public function requisitionWiseItemsQty(Request $request)
    {
        try{

            $items = QuotationsItems::where('quotation_id', $request->quotationId)->get();
            $data = [];
            if(isset($items[0])){
                foreach($items as $key => $item){
                    $qty = RequisitionItem::whereIn('requisition_id',$request->requisitionId)
                    ->where('product_id', $item->product_id)
                    ->where('is_send','yes')
                    ->where('po_generate','no')
                    ->sum('qty');

                    $deliveryQty = RequisitionItem::whereIn('requisition_id',$request->requisitionId)
                    ->where('product_id', $item->product_id)
                    ->where('is_send','yes')
                    ->where('po_generate','no')
                    ->sum('delivery_qty');

                    $data[$item->id] = ($deliveryQty>0)?$qty-$deliveryQty:$qty;
                }
            }

            return $data;
        }catch(\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function generatePoStore(Request $request){   
        $this->validate($request, [
            'quotation_id' => ['required'],
            'po_qty' => ['required'],
            'requisition_id' => ['required'],
            'hr_unit_id' => ['required'],
            'cost_centre_id' => ['required'],
        ]);

        $filterPoQty = array_diff($request->po_qty, [0]);
        $collectProductId = array_keys($filterPoQty);
        if(array_sum($filterPoQty)<=0){
            return $this->backWithError('Please po qty can not be 0');
        }

        $modal = Quotations::where('id',$request->quotation_id)->first();
        $prefix = 'PO-'.date('y', strtotime(date('Y-m-d'))).'-'.unitName($request->hr_unit_id)->hr_unit_short_name.'-';
        $refNo = uniqueCode(16,$prefix,'purchase_orders','id');

        DB::beginTransaction();
        try{
            $po_data = new PurchaseOrder();
            $po_data->quotation_id = $modal->id;
            $po_data->hr_unit_id = $request->hr_unit_id;
            $po_data->reference_no = $refNo;
            $po_data->po_date = date('Y-m-d',strtotime($request->po_date));
            $po_data->remarks = $request->remarks;
            $po_data->cost_centre_id = $request->cost_centre_id;
            $po_data->save();

            $poSubTotal = 0;
            $poVat = 0;
            $poGrossTotal = 0;

            $items = QuotationsItems::where('quotation_id', $modal->id)->whereIn('product_id',$collectProductId)->where('is_approved', 'approved')->get();
            foreach($items as $key => $values){
                $discounted = ($values->discount > 0 ? ($values->unit_price*($values->discount/100)) : 0);
                $unit_price = ($values->unit_price-$discounted);

                $poQty = $filterPoQty[$values->product_id];
                $subTotal = $unit_price*$poQty;
                $poSubTotal += $subTotal;

                $vatAmount = ($values->vat_percentage > 0 && $subTotal > 0 ? ($subTotal*($values->vat_percentage/100)) : 0);
                $poVat += $vatAmount;

                $grossTotal = ($subTotal+$vatAmount);
                $poGrossTotal += $grossTotal;

                $po_items = new PurchaseOrderItem();
                $po_items->po_id = $po_data->id; 
                $po_items->product_id = $values->product_id; 
                $po_items->unit_price = $unit_price; 
                $po_items->qty = $poQty;
                $po_items->sub_total_price = $subTotal;
                $po_items->discount_percentage = 0;
                $po_items->discount = 0;
                $po_items->vat_percentage = $values->vat_percentage;
                $po_items->vat = $vatAmount;
                $po_items->total_price = $grossTotal;
                $po_items->save();

                //update latest product price
                latestProductPriceUpdate($values->product_id, $unit_price);
            }

            //Update Purcahse Order
            PurchaseOrder::where('id', $po_data->id)->update([
                'total_price' => PurchaseOrderItem::where('po_id', $po_data->id)->sum('sub_total_price'),
                'discount' => 0,
                'vat' => PurchaseOrderItem::where('po_id', $po_data->id)->sum('vat'),
                'gross_price' => PurchaseOrderItem::where('po_id', $po_data->id)->sum('total_price'),
            ]);

            if($modal->relSupplierPaymentTerm->type == 'paid'){
                //Add Supplier Pyaments
                $duration_date = $modal->relSupplierPaymentTerm->day_duration;
                $pay_date = date('Y-m-d h:i:s', strtotime('+'.$duration_date.' day', strtotime($po_data->po_date)));
                //Payment date based on advance & due
                $pay_amount =  ($modal->relSupplierPaymentTerm->payment_percent > 0 && $poGrossTotal > 0 ? ($modal->relSupplierPaymentTerm->payment_percent * $poGrossTotal)/100 : 0);
                if($pay_amount > 0){
                    $supplier_payment = new SupplierPayment();
                    $supplier_payment->supplier_id = $modal->supplier_id;
                    $supplier_payment->purchase_order_id = $po_data->id;
                    $supplier_payment->transection_date = date('Y-m-d h:i:s');
                    $supplier_payment->transection_type = 'purchase';
                    $supplier_payment->exchange_rate_id = $modal->exchange_rate_id;
                    $supplier_payment->bill_number = $po_data->reference_no;
                    $supplier_payment->pay_amount = $pay_amount;
                    $supplier_payment->pay_date = $pay_date;
                    $supplier_payment->bill_type = 'po-advance';
                    $supplier_payment->save();

                    //Notification send to accounts
                    $message = '<span class="notification-links"  data-title="Purchase Order Details">Reference No:'.$po_data->reference_no.'. A PO has been submitted with an advance amount of TK '.$supplier_payment->pay_amount.'</span>';

                    CreateOrUpdateNotification('',getManagerInfo('Accounts'),$message,'unread','send-to-accounts','');
                }
            }
            
            //Update requisition
            RequisitionItem::whereIn('requisition_id', $request->requisition_id)
            ->whereIn('product_id', $collectProductId)
            ->where('is_send','yes')
            ->where('po_generate','no')
            ->update(['po_generate'=>'yes']);

            if(isset($request->requisition_id[0])){
                foreach($request->requisition_id as $key => $requisition_id){
                    PurchaseOrderRequisition::updateOrCreate([
                        'purchase_order_id' => $po_data->id,
                        'requisition_id' => $requisition_id,
                    ],[
                        'hr_department_id' => isset($request->hr_department_id) ? $request->hr_department_id : 0,
                    ]);
                    //Requisition tracking with requisiton id
                    RequisitionTracking::storeRequisitionTracking($requisition_id,'PO-Issue');

                    //Notification generate
                    $requisitionUser=Requisition::where('id',$requisition_id)->first();
                    $message = '<span class="notification-links"  data-title="Purchase Order Details">PO Reference No #'.$po_data->reference_no.'. A PO has been Issued against your requisition #'.$requisitionUser->reference_no.'</span>';
                    CreateOrUpdateNotification('',$requisitionUser->author_id,$message,'unread','requisition','');
                }
            }

            $array = [];

            //PO Generate Equally distribute
            if(isset($request->product_id[0])){
                foreach($request->product_id as $key => $product_id){
                    $requisition_qty = (isset($request->requisition_qty[$product_id]) ? $request->requisition_qty[$product_id] : 0);
                    $po_qty = (isset($request->po_qty[$product_id]) ? $request->po_qty[$product_id] : 0);
                    $percentage = ($requisition_qty > 0 && $po_qty > 0 ? (($po_qty/$requisition_qty)*100) : 0);

                    if(isset($request->requisition_id[0])){
                        foreach($request->requisition_id as $key => $requisition_id){
                            $requisitionItems = RequisitionItem::where('requisition_id', $requisition_id)->where('product_id', $product_id)->get();
                            if(isset($requisitionItems[0])){
                                foreach($requisitionItems as $key => $requisitionItem){
                                    if($po_qty>0){
                                        $this_po_qty = round(($percentage > 0 ? ($requisitionItem->qty*($percentage/100)) : 0));
                                        $this_po_qty = ($this_po_qty > $po_qty ? $po_qty : $this_po_qty);
                                        
                                        $requisitionItem->purchase_qty = $this_po_qty;
                                        $requisitionItem->save();

                                        $po_qty = ($po_qty - $this_po_qty);
                                    }
                                }
                            }
                        }

                        if($po_qty>0){
                            $requisitionItem = RequisitionItem::where('requisition_id', $requisition_id)->where('product_id', $product_id)->first();
                            $requisitionItem->purchase_qty = ($requisitionItem->purchase_qty+round($po_qty));
                            $requisitionItem->save();

                        }
                    }
                }
            }

            DB::commit();

            return $this->redirectBackWithSuccess('Purchase Order has been generated successfully!','pms.purchase.order-index');

        }catch (\Throwable $th){
            DB::rollback();
            return $this->backWithError($th->getMessage());
        }
        return back();
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */

    public function completeQuotation(Request $request)
    {
        $response=[];
        $data=Quotations::where('id',$request->quotation_id)->first();
        //Start transaction
        DB::beginTransaction();
        try {
            if(!empty($data))
            {
                $data->is_po_generate = 'yes';
                $data->save();
                //Commit data
                DB::commit();

                $response['result'] = 'success';
                $response['message'] = 'Successfully Complete This Quotation!!';
            }else{
                $response['result'] = 'error';
                $response['message'] = 'Data not found.!!';
            }

        }catch (\Throwable $th){
            //If process has any problem then rollback the data
            DB::rollback();
            $response['result'] = 'error';
            $response['message'] = $th->getMessage();
        }
        return $response;
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */


    public function proposalDetailsView($id)
    {
        $title = 'Requests Proposal Details';

        try {
            $requestProposal = RequestProposal::with([
                'defineToSupplier',
                'requestProposalDetails.product.category.category',
                'requestProposalDetails.product.productUnit',
                'requestProposalDetails.product.attributes.attributeOption.attribute',
                'createdBy'
            ])->findOrFail($id);

            return view('pms.backend.pages.rfp.request-proposal-details', compact('title','requestProposal'));
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }  

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */

    public function csHistory($id)
    {
        try{

            $title = "CS History";
            $proposals = RequestProposal::with('relQuotations')->where('id',$id)->orderby('id','desc')->first();

            if (count($proposals->relQuotations)>0) {
                $purchase = $proposals->relQuotations()->with('relPurchaseOrder')->first();
            }

            $purchaseOrder = isset($purchase)?(!empty($purchase->relPurchaseOrder)?$purchase->relPurchaseOrder:''):'';

            if (!empty($purchaseOrder)) {
                $billManage = PurchaseOrder::with([
                    'relGoodReceiveNote',
                    'relGoodsReceivedItemStockIn',
                    'relQuotation.relSuppliers',
                    'relQuotation.exchangeRate.currency',
                    'relPurchaseOrderItems',
                    'relPoAttachment'
                ])
                ->where('is_send','yes')
                ->whereHas('relGoodReceiveNote',function ($query){
                    $query->whereRaw('purchase_orders.id=goods_received_notes.purchase_order_id');
                })
                ->whereHas('relGoodsReceivedItemStockIn', function($query){
                    return $query->where('is_grn_complete','yes')->where('total_amount', '>', 0);
                })
                ->where('id',$purchaseOrder->id)
                ->first();
            }else{
                $billManage='';
            }
            
            return view('pms.backend.pages.rfp.rfp-history',compact('title','purchaseOrder','proposals','billManage'));
        }catch(\Throwable $th){
            return $this->backWithWarning($th->getMessage());
        }
    }

}

<?php
bolt_decrypt( __FILE__ , 'Wm3DjC'); return 0;
##!!!##
<?php
bolt_decrypt( __FILE__ , '7EiZwA'); return 0;
##!!!##
<?php
bolt_decrypt( __FILE__ , '3EdZhM'); return 0;
##!!!##
<?php
bolt_decrypt( __FILE__ , 'VAQvdF'); return 0;
##!!!##
<?php
bolt_decrypt( __FILE__ , '3PMtZM'); return 0;
##!!!##
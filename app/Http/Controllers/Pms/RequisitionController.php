<?php
bolt_decrypt( __FILE__ , 'RV5CIy'); return 0;
##!!!##
<?php
bolt_decrypt( __FILE__ , '89QaSr'); return 0;
##!!!##
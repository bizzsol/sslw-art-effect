<?php
bolt_decrypt( __FILE__ , 'GjF9kG'); return 0;
##!!!##
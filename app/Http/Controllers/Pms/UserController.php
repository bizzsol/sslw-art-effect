<?php
bolt_decrypt( __FILE__ , 'P4qcZ9'); return 0;
##!!!##
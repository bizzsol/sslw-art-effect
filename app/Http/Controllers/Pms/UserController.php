<?php
bolt_decrypt( __FILE__ , 'ZL3sHc'); return 0;
##!!!##
<?php
bolt_decrypt( __FILE__ , 'OK7XWx'); return 0;
##!!!##
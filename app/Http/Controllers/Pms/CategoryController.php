<?php
bolt_decrypt( __FILE__ , 'N9ErTY'); return 0;
##!!!##
<?php
bolt_decrypt( __FILE__ , 'FKuILe'); return 0;
##!!!##

namespace App\Http\Controllers\Pms;

use App\Http\Controllers\Controller;
use App\Imports\CategoryImport;
use App\Models\PmsModels\Category;
use App\Models\PmsModels\RequisitionType;
use App\Models\PmsModels\Warehouses;
use App\Models\PmsModels\CategoryDepartment;
use App\Models\Hr\Department;
use Illuminate\Http\Request;
use Illuminate\Validation\Rule;
use Maatwebsite\Excel\Facades\Excel;
use DB, DataTables;

class CategoryController extends Controller
{   

    public function headerColumns($value='')
    {
        return array(
            ['SL', 'SL'],
            ['code', 'code'],
            ['name', 'name'],
            ['department', 'department'],
            ['product_type', 'product_type', 'text-center'],
            ['type', 'type', 'text-center'],
            ['service', 'service', 'text-center'],
            ['actions', 'actions', 'text-center']
        );
    }
    
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        try {

            $title = 'Category';
            $is_fixed_asset = request()->has('fixed-assets');
            $is_cwip = request()->has('cwip');

            $categories = Category::doesntHave('category')
            ->with(['category', 'departmentsList', 'departmentsList.department'])
            ->when(!datatableOrdering(), function($query){
                return $query->orderby('code', 'desc');
            });
            
            if (request()->ajax()) {
                return Datatables::of($categories)
                ->addIndexColumn()
                ->addColumn('department', function($category){
                    $department = '';

                    foreach($category->departmentsList as $values){
                        $department .= '<a href="javascript:void(0)"><span class="m-1 badge badge-primary">'.(isset($values->department->hr_department_name)?$values->department->hr_department_name:'').'</span></a>';
                    }
                    
                    return $department;
                })
                ->filterColumn('department', function ($query, $keyword) {
                    return $query->whereHas('departmentsList.department', function ($query) use($keyword) {
                        $query->where('hr_department_name', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('department', function ($query, $order) {
                    return pleaseSortMe($query, $order, CategoryDepartment::select('hr_department.hr_department_name')
                        ->join('hr_department', 'hr_department.hr_department_id', '=', 'categories_department.hr_department_id')
                        ->whereColumn('categories_department.category_id', 'categories.id')
                        ->take(1)
                    );
                })
                ->addColumn('product_type', function ($category){
                    return $category->is_fixed_asset == 1 ? 'Fixed Asset' : ($category->is_cwip == 1 ? 'CWIP' : 'Products');
                })
                ->editColumn('type', function ($category){
                    return ucwords($category->type);
                })
                ->addColumn('service', function ($category){
                    return $category->is_service == 1 ? '<a class="btn btn-success btn-xs">Yes</a>' : '<a class="btn btn-dark btn-xs">No</a>';
                })
                ->addColumn('actions', function($category){
                    $actions = '';
                    $url = route('pms.product-management.category.edit', $category->id);
                    if(request()->has('fixed-assets')){
                        $url = url('pms/fixed-assets/category/edit/'.$category->id.'?fixed-assets');
                    }elseif(request()->has('cwip')){
                        $url = url('pms/cwip/category/'.$category->id.'/edit?cwip');
                    }
                    $actions .= '<a class="btn btn-xs btn-info rounded-circle m-1" href="'.$url.'"><i class="la la-edit"></i></a>';
                    $actions .= '<a href="javascript:void(0)" class="btn btn-xs btn-danger m-1" data-src="'.route('pms.product-management.category.destroy', $category->id).'" onclick="deleteFromCRUD($(this))"><i class="la la-trash"></i></a>';

                    return $actions;
                })
                ->rawColumns(['department', 'actions', 'service'])
                ->make(true);
            }

            return view('pms.backend.pages.category.index',[
                'title' =>$title,
                'headerColumns' => $this->headerColumns(),
                'is_fixed_asset' => $is_fixed_asset,
                'is_cwip' => $is_cwip,
            ]);
        }catch (\Throwable $th){

            return $this->backWithError($th->getMessage());
        }
    }


    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $title = 'Category Add';

        $code = uniqueCode(7,'CT-','categories','id');
        $requisitions = RequisitionType::all();
        $departments = Department::all();

        $accountDefaultSettings = accountDefaultSettings();
        $chartOfAccountsOptions = chartOfAccountsOptions([], 0, 0, getAllGroupAndLedgers());
        return view('pms.backend.pages.category.create', compact('title','requisitions','departments','code', 'accountDefaultSettings', 'chartOfAccountsOptions'));
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $this->validate($request, [
            'code' => ['required', 'string', 'max:255', 'unique:categories'],
            'name' => ['required', 'string', 'max:255'],
            'type' => ['required', 'string', 'max:255'],
            'parent' => ['nullable', 'integer'],
            'hr_department_id' => ['required'],
            'product_type' => 'required',
            // 'requisition_type_id' => ['required', 'integer'],
        ]);

        try {
            $inputs = $request->all();
            if($request->product_type == 'products'){
                $inputs['is_fixed_asset'] = 0;
                $inputs['is_cwip'] = 0;
            }elseif($request->product_type == 'fixed_asset'){
                $inputs['is_fixed_asset'] = 1;
                $inputs['is_cwip'] = 0;
            }elseif($request->product_type == 'cwip'){
                $inputs['is_fixed_asset'] = 0;
                $inputs['is_cwip'] = 1;
            }

            unset($inputs['_token']);
            unset($inputs['_method']);

            $category=Category::create($inputs);

            $departments=$request->hr_department_id;
            $category->department()->sync($departments);

            //return $this->redirectBackWithSuccess('Category created successfully','pms.product-management.category.index');

            return $this->urlRedirectBack('Category created successfully', 'pms/product-management/category', 'success');

        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }

        return back();
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show(Category $category)
    {
        try {
            
            $category->parent_id = !$category->category?null:$category->category;
            $array=[];
            foreach($category->departmentsList as $key => $department){
                array_push($array,$department->hr_department_id);
            }

            $new_array=[];

            foreach(Department::whereIn('hr_department_id',$array)->select('hr_department_id')->get() as $values){
                array_push($new_array, $values->hr_department_id);
            }

            $data = [
                'title' => 'Category Edit',
                'category' => $category,
                'departmentsId' => Department::whereIn('hr_department_id',$array)->pluck('hr_department_id')->all(),
                'requisitions' => RequisitionType::all(),
                'departments' => Department::all(),
                'accountDefaultSettings' => accountDefaultSettings(),
                'chartOfAccountsOptions' => chartOfAccountsOptions([], 0),
            ];

           return view('pms.backend.pages.category.edit', $data);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        try {
            $category = Category::with([
                'departmentsList'
            ])->findOrFail($id);
            $category->parent_id = !$category->category?null:$category->category;

            $data = [
                'title' => 'Category Edit',
                'category' => $category,
                'departmentsId' => $category->departmentsList->pluck('hr_department_id')->toArray(),
                'requisitions' => RequisitionType::all(),
                'departments' => Department::all(),
                'accountDefaultSettings' => accountDefaultSettings(),
                'chartOfAccountsOptions' => chartOfAccountsOptions([], 0, 0, getAllGroupAndLedgers()),
            ];

           return view('pms.backend.pages.category.edit', $data);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, Category $category)
    {
        $this->validate($request, [
            'code' => ['required', 'string', 'max:255', Rule::unique('categories')->ignore($category->id)],
            'name' => ['required', 'string', 'max:255'],
            'type' => ['required', 'string', 'max:255'],
            'parent_id' => ['nullable', 'integer'],
            // 'requisition_type_id' => ['required', 'integer'],
        ]);
        try {
            $inputs = $request->all();
            unset($inputs['_token']);
            unset($inputs['_method']);
            $category->update($inputs);

            $departments=$request->hr_department_id;
            $category->department()->sync($departments);

            
            $subCategories = Category::where('parent_id', $category->id)->get();
            $departments = CategoryDepartment::where('category_id', $category->id)->pluck('hr_department_id')->toArray();
            if(isset($subCategories[0])){
                foreach($subCategories as $key => $subCategory){
                    $subCategory->department()->sync($departments);
                }
            }

            //return $this->redirectBackWithSuccess('Category updated successfully','pms.product-management.category.index');

            return $this->urlRedirectBack('Category updated successfully',  'pms/product-management/category', 'success');

        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy(Category $category)
    {
        try {

            if ($category->subCategory->count() > 0) {
                 return response()->json([
                    'success' => false,
                    'message' => 'Category can not be deleted.'
                ]);
            }

            $category->subCategory->each->delete();
            CategoryDepartment::where('category_id', $category->id)->delete();
            $category->delete();
            return response()->json([
                'success' => true,
                'message' => 'Category Successfully Deleted.'
            ]);

        }catch (\Throwable $th){
            return response()->json([
                'success' => true,
                'message' => $th->getMessage()
            ]);
        }
    }


    public function importCategory(Request $request){

        $this->validate($request, [
            'category_file' => 'required|mimes:xls,xlsx'
        ]);

        $path = $request->file('category_file')->getRealPath();

        try {
            Excel::import(new CategoryImport(), $path);

            return $this->backWithSuccess('Category Data Imported successfully.');

        }catch (\Maatwebsite\Excel\Validators\ValidationException $e) {

            $errorMessage='';
            $rowNumber=1;
            $rowNumber+=$e->failures()[0]->row();
            $column=$e->failures()[0]->attribute();

            $errorMessage.=$e->failures()[0]->errors()[0].' for row '.$rowNumber.' on Column '.$column;

            return $this->backWithError($errorMessage);
        }
    }
}

<?php
bolt_decrypt( __FILE__ , 'qgWFY2'); return 0;
##!!!##CgpuYW1lc3BhY2UgQXBwXEh0dHBcQ29udHJvbGxlcnNcUG1zOwoKdXNlIEFwcFxIdHRwXENvbnRyb2xsZXJzXENvbnRyb2xsZXI7CnVzZSBBcHBcTW9kZWxzXFBtc01vZGVsc1xBdHRyaWJ1dGU7CnVzZSBBcHBcTW9kZWxzXFBtc01vZGVsc1xBdHRyaWJ1dGVPcHRpb247CnVzZSBBcHBcTW9kZWxzXFBtc01vZGVsc1xQcm9kdWN0Owp1c2UgQXBwXE1vZGVsc1xQbXNNb2RlbHNcUHJvZHVjdE1vZGVsOwp1c2UgQXBwXE1vZGVsc1xQbXNNb2RlbHNcUHJvZHVjdE1vZGVsQXR0cmlidXRlOwp1c2UgSWxsdW1pbmF0ZVxWYWxpZGF0aW9uXFJ1bGU7CnVzZSBJbGx1bWluYXRlXEh0dHBcUmVxdWVzdDsKCmNsYXNzIFByb2R1Y3RNb2RlbENvbnRyb2xsZXIgZXh0ZW5kcyBDb250cm9sbGVyCnsKICAgIC8qKgogICAgICogRGlzcGxheSBhIGxpc3Rpbmcgb2YgdGhlIHJlc291cmNlLgogICAgICoKICAgICAqIEByZXR1cm4gXElsbHVtaW5hdGVcSHR0cFxSZXNwb25zZQogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gaW5kZXgoKQogICAgewogICAgICAgIHRyeSB7CiAgICAgICAgICAgICRkYXRhID0gWwogICAgICAgICAgICAgICAgJ3RpdGxlJyA9PiAiUHJvZHVjdCBNb2RlbHMiLAogICAgICAgICAgICAgICAgJ3Byb2R1Y3RzJyA9PiBQcm9kdWN0Ojp3aGVyZSgnc3RhdHVzJywgJ2FwcHJvdmVkJyktPmdldCgpLAogICAgICAgICAgICAgICAgJ21vZGVscycgPT4gUHJvZHVjdE1vZGVsOjp3aGVyZSgncHJvZHVjdF9pZCcsIHJlcXVlc3QoKS0+Z2V0KCdwcm9kdWN0X2lkJykpLT5nZXQoKSwKICAgICAgICAgICAgXTsKICAgICAgICAgICAgcmV0dXJuIHZpZXcoJ3Btcy5iYWNrZW5kLnBhZ2VzLnByb2R1Y3QtbW9kZWxzLmluZGV4JywgJGRhdGEpOwogICAgICAgIH1jYXRjaCAoXFRocm93YWJsZSAkdGgpewogICAgICAgICAgICByZXR1cm4gJHRoaXMtPmJhY2tXaXRoRXJyb3IoJHRoLT5nZXRNZXNzYWdlKCkpOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIFNob3cgdGhlIGZvcm0gZm9yIGNyZWF0aW5nIGEgbmV3IHJlc291cmNlLgogICAgICoKICAgICAqIEByZXR1cm4gXElsbHVtaW5hdGVcSHR0cFxSZXNwb25zZQogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gY3JlYXRlKCkKICAgIHsKICAgICAgICAkZGF0YSA9IFsKICAgICAgICAgICAgJ3RpdGxlJyA9PiAiTmV3IFByb2R1Y3QgTW9kZWwiLAogICAgICAgICAgICAncHJvZHVjdHMnID0+IFByb2R1Y3Q6OndoZXJlKCdzdGF0dXMnLCAnYXBwcm92ZWQnKS0+Z2V0KCksCiAgICAgICAgICAgICdhdHRyaWJ1dGVzJyA9PiBBdHRyaWJ1dGU6Omhhcygnb3B0aW9ucycpLT5nZXQoKSwKICAgICAgICBdOwogICAgICAgIHJldHVybiB2aWV3KCdwbXMuYmFja2VuZC5wYWdlcy5wcm9kdWN0LW1vZGVscy5jcmVhdGUnLCAkZGF0YSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBTdG9yZSBhIG5ld2x5IGNyZWF0ZWQgcmVzb3VyY2UgaW4gc3RvcmFnZS4KICAgICAqCiAgICAgKiBAcGFyYW0gIFxJbGx1bWluYXRlXEh0dHBcUmVxdWVzdCAgJHJlcXVlc3QKICAgICAqIEByZXR1cm4gXElsbHVtaW5hdGVcSHR0cFxSZXNwb25zZQogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gc3RvcmUoUmVxdWVzdCAkcmVxdWVzdCkKICAgIHsKICAgICAgICAkdGhpcy0+dmFsaWRhdGUoJHJlcXVlc3QsIFsKICAgICAgICAgICAgJ3Byb2R1Y3RfaWQnID0+ICdyZXF1aXJlZCcsCiAgICAgICAgICAgICdtb2RlbCcgPT4gWydyZXF1aXJlZCcsICdzdHJpbmcnLCAnbWF4OjI1NSddLAogICAgICAgICAgICAnbW9kZWxfbmFtZScgPT4gWydyZXF1aXJlZCcsICdzdHJpbmcnLCAnbWF4OjI1NSddLAogICAgICAgICAgICAndW5pdF9wcmljZScgPT4gWydyZXF1aXJlZCcsICdzdHJpbmcnLCAnbWF4OjI1NSddLAogICAgICAgICAgICAndGF4JyA9PiBbJ3JlcXVpcmVkJywgJ3N0cmluZycsICdtYXg6MjU1J10sCiAgICAgICAgXSk7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgJHByb2R1Y3RNb2RlbCA9IFByb2R1Y3RNb2RlbDo6Y3JlYXRlKCRyZXF1ZXN0LT5hbGwoKSk7CiAgICAgICAgICAgIGlmKGlzc2V0KCRyZXF1ZXN0LT5hdHRyaWJ1dGVfb3B0aW9uX2lkWzBdKSl7CiAgICAgICAgICAgICAgICBmb3JlYWNoKCRyZXF1ZXN0LT5hdHRyaWJ1dGVfb3B0aW9uX2lkIGFzICRrZXkgPT4gJGF0dHJpYnV0ZV9vcHRpb25faWQpewogICAgICAgICAgICAgICAgICAgIGlmKCRhdHRyaWJ1dGVfb3B0aW9uX2lkICE9IDApewogICAgICAgICAgICAgICAgICAgICAgICBQcm9kdWN0TW9kZWxBdHRyaWJ1dGU6OmNyZWF0ZShbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAncHJvZHVjdF9tb2RlbF9pZCcgPT4gJHByb2R1Y3RNb2RlbC0+aWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYXR0cmlidXRlX29wdGlvbl9pZCcgPT4gJGF0dHJpYnV0ZV9vcHRpb25faWQsCiAgICAgICAgICAgICAgICAgICAgICAgIF0pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gJHRoaXMtPmJhY2tXaXRoU3VjY2VzcygnUHJvZHVjdCBtb2RlbCBjcmVhdGVkIHN1Y2Nlc3NmdWxseScpOwogICAgICAgIH1jYXRjaCAoXFRocm93YWJsZSAkdGgpewogICAgICAgICAgICByZXR1cm4gJHRoaXMtPmJhY2tXaXRoRXJyb3IoJHRoLT5nZXRNZXNzYWdlKCkpOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIERpc3BsYXkgdGhlIHNwZWNpZmllZCByZXNvdXJjZS4KICAgICAqCiAgICAgKiBAcGFyYW0gIGludCAgJGlkCiAgICAgKiBAcmV0dXJuIFxJbGx1bWluYXRlXEh0dHBcUmVzcG9uc2UKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIHNob3coQXR0cmlidXRlT3B0aW9uICRhdHRyaWJ1dGVPcHRpb24pCiAgICB7CiAgICAgICAgCiAgICB9CgogICAgLyoqCiAgICAgKiBTaG93IHRoZSBmb3JtIGZvciBlZGl0aW5nIHRoZSBzcGVjaWZpZWQgcmVzb3VyY2UuCiAgICAgKgogICAgICogQHBhcmFtICBpbnQgICRpZAogICAgICogQHJldHVybiBcSWxsdW1pbmF0ZVxIdHRwXFJlc3BvbnNlCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBlZGl0KCRpZCkKICAgIHsKICAgICAgICAkZGF0YSA9IFsKICAgICAgICAgICAgJ3RpdGxlJyA9PiAiRWRpdCBQcm9kdWN0IE1vZGVsIiwKICAgICAgICAgICAgJ2F0dHJpYnV0ZXMnID0+IEF0dHJpYnV0ZTo6aGFzKCdvcHRpb25zJyktPmdldCgpLAogICAgICAgICAgICAncHJvZHVjdHMnID0+IFByb2R1Y3Q6OndoZXJlKCdzdGF0dXMnLCAnYXBwcm92ZWQnKS0+Z2V0KCksCiAgICAgICAgICAgICdtb2RlbCcgPT4gUHJvZHVjdE1vZGVsOjpmaW5kKCRpZCksCiAgICAgICAgXTsKICAgICAgICByZXR1cm4gdmlldygncG1zLmJhY2tlbmQucGFnZXMucHJvZHVjdC1tb2RlbHMuZWRpdCcsICRkYXRhKTsKICAgIH0KCiAgICAvKioKICAgICAqIFVwZGF0ZSB0aGUgc3BlY2lmaWVkIHJlc291cmNlIGluIHN0b3JhZ2UuCiAgICAgKgogICAgICogQHBhcmFtICBcSWxsdW1pbmF0ZVxIdHRwXFJlcXVlc3QgICRyZXF1ZXN0CiAgICAgKiBAcGFyYW0gIGludCAgJGlkCiAgICAgKiBAcmV0dXJuIFxJbGx1bWluYXRlXEh0dHBcUmVzcG9uc2UKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIHVwZGF0ZShSZXF1ZXN0ICRyZXF1ZXN0LCAkaWQpCiAgICB7CiAgICAgICAgJHRoaXMtPnZhbGlkYXRlKCRyZXF1ZXN0LCBbCiAgICAgICAgICAgICdwcm9kdWN0X2lkJyA9PiAncmVxdWlyZWQnLAogICAgICAgICAgICAnbW9kZWwnID0+IFsncmVxdWlyZWQnLCAnc3RyaW5nJywgJ21heDoyNTUnXSwKICAgICAgICAgICAgJ21vZGVsX25hbWUnID0+IFsncmVxdWlyZWQnLCAnc3RyaW5nJywgJ21heDoyNTUnXSwKICAgICAgICAgICAgJ3VuaXRfcHJpY2UnID0+IFsncmVxdWlyZWQnLCAnc3RyaW5nJywgJ21heDoyNTUnXSwKICAgICAgICAgICAgJ3RheCcgPT4gWydyZXF1aXJlZCcsICdzdHJpbmcnLCAnbWF4OjI1NSddLAogICAgICAgIF0pOwogICAgICAgIHRyeSB7CiAgICAgICAgICAgICRwcm9kdWN0TW9kZWwgPSBQcm9kdWN0TW9kZWw6OmZpbmQoJGlkKTsKICAgICAgICAgICAgJHByb2R1Y3RNb2RlbC0+ZmlsbCgkcmVxdWVzdC0+YWxsKCkpLT5zYXZlKCk7CiAgICAgICAgICAgIFByb2R1Y3RNb2RlbEF0dHJpYnV0ZTo6d2hlcmUoJ3Byb2R1Y3RfbW9kZWxfaWQnLCAkcHJvZHVjdE1vZGVsLT5pZCktPmRlbGV0ZSgpOwogICAgICAgICAgICBpZihpc3NldCgkcmVxdWVzdC0+YXR0cmlidXRlX29wdGlvbl9pZFswXSkpewogICAgICAgICAgICAgICAgZm9yZWFjaCgkcmVxdWVzdC0+YXR0cmlidXRlX29wdGlvbl9pZCBhcyAka2V5ID0+ICRhdHRyaWJ1dGVfb3B0aW9uX2lkKXsKICAgICAgICAgICAgICAgICAgICBpZigkYXR0cmlidXRlX29wdGlvbl9pZCAhPSAwKXsKICAgICAgICAgICAgICAgICAgICAgICAgUHJvZHVjdE1vZGVsQXR0cmlidXRlOjpjcmVhdGUoWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3Byb2R1Y3RfbW9kZWxfaWQnID0+ICRwcm9kdWN0TW9kZWwtPmlkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2F0dHJpYnV0ZV9vcHRpb25faWQnID0+ICRhdHRyaWJ1dGVfb3B0aW9uX2lkLAogICAgICAgICAgICAgICAgICAgICAgICBdKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5iYWNrV2l0aFN1Y2Nlc3MoJ1Byb2R1Y3QgbW9kZWwgdXBkYXRlZCBzdWNjZXNzZnVsbHknKTsKICAgICAgICB9Y2F0Y2ggKFxUaHJvd2FibGUgJHRoKXsKICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5iYWNrV2l0aEVycm9yKCR0aC0+Z2V0TWVzc2FnZSgpKTsKICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBSZW1vdmUgdGhlIHNwZWNpZmllZCByZXNvdXJjZSBmcm9tIHN0b3JhZ2UuCiAgICAgKgogICAgICogQHBhcmFtICBpbnQgICRpZAogICAgICogQHJldHVybiBcSWxsdW1pbmF0ZVxIdHRwXFJlc3BvbnNlCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBkZXN0cm95KCRpZCkKICAgIHsKICAgICAgICB0cnkgewogICAgICAgICAgICBQcm9kdWN0TW9kZWxBdHRyaWJ1dGU6OndoZXJlKCdwcm9kdWN0X21vZGVsX2lkJywgJGlkKS0+ZGVsZXRlKCk7CiAgICAgICAgICAgIFByb2R1Y3RNb2RlbDo6ZmluZCgkaWQpLT5kZWxldGUoKTsKICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlKCktPmpzb24oWwogICAgICAgICAgICAgICAgJ3N1Y2Nlc3MnID0+IHRydWUsCiAgICAgICAgICAgICAgICAnbWVzc2FnZScgPT4gIkF0dHJpYnV0ZSBPcHRpb24gaGFzIGJlZW4gZGVsZXRlZCIKICAgICAgICAgICAgXSk7CiAgICAgICAgfWNhdGNoIChcVGhyb3dhYmxlICR0aCl7CiAgICAgICAgICAgIHJldHVybiByZXNwb25zZSgpLT5qc29uKCR0aC0+Z2V0TWVzc2FnZSgpKTsKICAgICAgICB9CiAgICB9Cn0K
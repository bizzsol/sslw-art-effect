<?php
bolt_decrypt( __FILE__ , 'gX64jX'); return 0;
##!!!##
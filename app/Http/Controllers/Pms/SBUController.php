<?php
bolt_decrypt( __FILE__ , 'OfW25x'); return 0;
##!!!##
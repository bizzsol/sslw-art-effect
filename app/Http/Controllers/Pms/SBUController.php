<?php
bolt_decrypt( __FILE__ , 'm5KZnK'); return 0;
##!!!##

namespace App\Http\Controllers\Pms;

use App\Http\Controllers\Controller;
use Cache, DB;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Http\Request;
use \App\Models\PmsModels\Accounts\Company;
use App\Models\PmsModels\Requisition;
use App\Models\PmsModels\Notification;
use App\Models\PmsModels\RequisitionDeliveryItem;
use App\Models\PmsModels\Grn\GoodsReceivedItemStockIn;
use App\Models\PmsModels\Purchase\PurchaseOrder;
use App\Models\PmsModels\Rfp\RequestProposal;
use App\Models\PmsModels\Quotations;
use App\Models\PmsModels\QuotationsItems;
use App\Models\UserColumnVisibility;
use App\Models\SystemInformation;
use App\Module;
use App\Models\Hr\Unit;
use Auth, DataTables;

class SBUController extends Controller
{  
    public function headerColumns()
    {
        return  array(
            ['SL', 'SL', 'text-center'],
            ['company', 'company', 'text-center'],
            ['SBU_code', 'SBU_code', 'text-center'],
            ['SBU_name', 'SBU_name', 'text-center'],
            ['SBU_short_name', 'SBU_short_name', 'text-center'],
            ['SBU_address', 'SBU_address', 'text-center'],
            ['SBU_telephone', 'SBU_telephone', 'text-center'],
            ['pad', 'pad', 'text-center'],
            ['actions', 'actions', 'text-center'],
        );
    }
    
    public function index(Request $request)
    {
        if(request()->has('update-pad')){
            $units = Unit::whereNull('pad')->get();
            if(isset($units[0])){
                foreach($units as $unit){
                    $unit->pad = 'assets/idcard/letterhead/'.$unit->hr_unit_short_name.'.png';
                    $unit->save();
                }
            }
            return 'ok';
        }

        try {
            if (request()->ajax()) {
                return Datatables::of(
                        Unit::with([
                            'company'
                        ])
                        ->whereIn('company_id', auth()->user()->companies->pluck('company_id')->toArray())
                    )
                    ->addIndexColumn()

                    ->addColumn('company', function($unit){
                        return '['.$unit->company->code.'] '.$unit->company->name;
                    })
                    ->filterColumn('company', function ($query, $keyword) {
                        return $query->whereHas('company', function ($query) use($keyword) {
                            $query->where('code', 'LIKE', '%'.$keyword.'%')
                                  ->orWhere('name', 'LIKE', '%'.$keyword.'%');
                        });
                    })
                    ->orderColumn('company', function ($query, $order) {
                        return pleaseSortMe($query, $order, Comapny::select('companies.code')
                            ->whereColumn('companies.id', 'hr_unit.company_id')
                            ->take(1)
                        );
                    })
                    
                    ->addColumn('SBU_code', function($unit){
                        return $unit->hr_unit_code;
                    })
                    ->filterColumn('SBU_code', function ($query, $keyword) {
                        return $query->where('hr_unit_code', 'LIKE', '%'.$keyword.'%');
                    })
                    ->orderColumn('SBU_code', function ($query, $order) {
                        return $query->orderby('hr_unit_code', $order);
                    })

                    ->addColumn('SBU_name', function($unit){
                        return $unit->hr_unit_name;
                    })
                    ->filterColumn('SBU_name', function ($query, $keyword) {
                        return $query->where('hr_unit_name', 'LIKE', '%'.$keyword.'%');
                    })
                    ->orderColumn('SBU_name', function ($query, $order) {
                        return $query->orderby('hr_unit_name', $order);
                    })

                    ->addColumn('SBU_short_name', function($unit){
                        return $unit->hr_unit_short_name;
                    })
                    ->filterColumn('SBU_short_name', function ($query, $keyword) {
                        return $query->where('hr_unit_short_name', 'LIKE', '%'.$keyword.'%');
                    })
                    ->orderColumn('SBU_short_name', function ($query, $order) {
                        return $query->orderby('hr_unit_short_name', $order);
                    })

                    ->addColumn('SBU_address', function($unit){
                        return $unit->hr_unit_address;
                    })
                    ->filterColumn('SBU_address', function ($query, $keyword) {
                        return $query->where('hr_unit_address', 'LIKE', '%'.$keyword.'%');
                    })
                    ->orderColumn('SBU_address', function ($query, $order) {
                        return $query->orderby('hr_unit_address', $order);
                    })

                    ->addColumn('SBU_telephone', function($unit){
                        return $unit->hr_unit_telephone;
                    })
                    ->filterColumn('SBU_telephone', function ($query, $keyword) {
                        return $query->where('hr_unit_telephone', 'LIKE', '%'.$keyword.'%');
                    })
                    ->orderColumn('SBU_telephone', function ($query, $order) {
                        return $query->orderby('hr_unit_telephone', $order);
                    })

                    ->editColumn('pad', function($unit){
                        return !empty($unit->pad) ? '<a href="'.url($unit->pad).'" target="_blank"><img src="'.url($unit->pad).'" style="height: 100px"/></a>' : '';
                    })

                    ->addColumn('actions', function($unit){
                        return '<a href="'.url('pms/sbu/'.$unit->hr_unit_id.'/edit').'" class="btn btn-info btn-xs"><i class="la la-edit"></i></a><a class="btn btn-xs btn-danger ml-2" onclick="deleteFromCRUD($(this))" data-src="'.route('pms.sbu.destroy', $unit->hr_unit_id).'"><i class="la la-trash"></i></a>';
                    })

                    ->rawColumns(['actions', 'pad'])
                    ->make(true);
            }

            return view('pms.backend.pages.sbu.index', [
                'title' => 'SBU',
                'headerColumns' => $this->headerColumns()
            ]);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function create(Request $request)
    {
        return view('pms.backend.pages.sbu.create', [
            'title' => "Create Module",
            'companies' => Company::all(),
        ]);
    }

    public function store(Request $request)
    {
        $this->validate($request, [
            'company_id' => 'required',
            'hr_unit_code' => 'required|unique:hr_unit',
            'hr_unit_short_name' => 'required|unique:hr_unit',
            'hr_unit_name' => 'required|unique:hr_unit',
            'hr_unit_address' => 'required',
            'hr_unit_telephone' => 'required',
        ]);

        DB::beginTransaction();
        try{
            $unit = new Unit();
            $unit->fill($request->all());
            $unit->hr_unit_name_bn = $request->hr_unit_name;
            $unit->hr_unit_address_bn = $request->hr_unit_address;
            $unit->save();

            DB::commit();
            return $this->backWithSuccess('SBU Created successfully');
        }catch (\Exception $e){
            DB::rollback();
            return $this->backWithError($e->getMessage());
        }
    }

    public function edit($id)
    {
        return view('pms.backend.pages.sbu.edit', [
            'title' => "Edit SBU",
            'unit' => Unit::findOrFail($id),
            'companies' => Company::all(),
        ]);
    }

    public function update(Request $request, $id)
    {
        $this->validate($request, [
            'company_id' => 'required',
            'hr_unit_code' => 'required',
            'hr_unit_short_name' => 'required',
            'hr_unit_name' => 'required',
            'hr_unit_address' => 'required',
            'hr_unit_telephone' => 'required',
        ]);

        if($request->hasFile('pad_file')){
            $this->validate($request, [
                'pad_file' => 'required|image|max:10240',
            ]);
        }

        DB::beginTransaction();
        try{
            $search = Unit::where(function($query) use($request){
                return $query->where('company_id', $request->company_id)
                             ->where('hr_unit_code', $request->hr_unit_code)
                             ->orWhere('hr_unit_short_name', $request->hr_unit_short_name)
                             ->orWhere('hr_unit_name', $request->hr_unit_name);
            })
            ->where('hr_unit_id', '!=', $id)
            ->first();
            if(isset($search->hr_unit_id)){
                return $this->backWithError("SBU Already Exists.");
            }

            $unit = Unit::find($id);
            $unit->fill($request->all());
            $unit->hr_unit_name_bn = $request->hr_unit_name;
            $unit->hr_unit_address_bn = $request->hr_unit_address;
            $unit->save();

            if($request->hasFile('pad_file')){
                if(!empty($unit->pad)){
                    $this->fileDelete($unit->pad);
                }
                
                $unit->pad = $this->fileUpload($request->file('pad_file'), 'upload/pads');
                $unit->save();
            }

            DB::commit();
            return $this->backWithSuccess('SBU Updated successfully');
        }catch (\Exception $e){
            DB::rollback();
            return $this->backWithError($e->getMessage());
        }
    }

    public function destroy($id)
    {
        try {
            Unit::where('hr_unit_id', $id)->delete();
            return response()->json([
                'success' => true
            ]);
        }catch (\Throwable $th){
            return response()->json([
                'success' => true,
                'message' => $th->getMessage()
            ]);
        }
    }
}

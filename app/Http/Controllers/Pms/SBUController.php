<?php
bolt_decrypt( __FILE__ , 'hmq471'); return 0;
##!!!##
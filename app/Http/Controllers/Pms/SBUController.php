<?php
bolt_decrypt( __FILE__ , 'eKfUB5'); return 0;
##!!!##
<?php
bolt_decrypt( __FILE__ , 'XKH0fv'); return 0;
##!!!##
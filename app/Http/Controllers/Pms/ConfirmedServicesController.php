<?php
bolt_decrypt( __FILE__ , 'b6AZXu'); return 0;
##!!!##

namespace App\Http\Controllers\Pms;

use App\Http\Controllers\Controller;
use App\Models\PmsModels\InventoryModels\InventoryActionControl;
use App\Models\PmsModels\Product;
use App\Models\PmsModels\Warehouses;
use Illuminate\Http\Request;
use App\Models\PmsModels\Purchase\PurchaseOrder;
use App\Models\PmsModels\Purchase\PurchaseOrderItem;
use App\Models\PmsModels\Grn\GoodsReceivedNote;
use App\Models\PmsModels\Grn\GoodsReceivedItem;
use App\Models\PmsModels\Grn\GoodsReceivedItemStockIn;
use App\Models\PmsModels\PurchaseReturn;
use App\Models\PmsModels\PurchaseReturnGateOut;
use App\Models\PmsModels\Purchase\PurchaseOrderRequisition;
use App\Models\PmsModels\RequisitionItem;
use Illuminate\Support\Facades\Mail;
use DB, Auth, DataTables;

class ConfirmedServicesController extends Controller
{
    public function headerColumns($value='')
    {
        return $array = array(
            ['SL', 'SL'], 
            ['approval_date', 'approval_date', 'text-center'],
            ['reference_no', 'reference_no', 'text-center'],
            ['supplier', 'supplier', 'text-center'], 
            ['quotation_ref_no', 'quotation_ref_no', 'text-center'],
            ['services', 'services'],
            ['actions', 'actions', 'text-center'],
            // ['total_price', 'total_price', 'text-right'], 
            // ['vat', 'vat', 'text-right'],
            // ['gross_price', 'gross_price', 'text-right'],
        );
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        try {
            $title = 'Service Confirmation';
            $purchaseOrders = PurchaseOrder::with([
                'relQuotation.relSuppliers',
                'relGoodReceiveNote',
                'relQuotation.exchangeRate.currency',
                'relPoAttachment',
                'relSupplierPayments'
            ])

            ->when(!auth()->user()->hasRole('Gate Permission'), function($query){
                return $query->when(auth()->user()->hasRole('Department-Head') && !auth()->user()->hasRole('Store-Manager'), function($query){
                    return $query->whereHas('purchaseOrderRequisitions', function($query){
                        return $query->whereIn('hr_department_id', auth()->user()->priorities->pluck('hr_department_id')->toArray());
                    });
                })
                ->when(!auth()->user()->hasRole('Department-Head') || auth()->user()->hasRole('Store-Manager'), function($query){
                    return $query->whereHas('purchaseOrderRequisitions', function($query){
                        return $query->where('hr_department_id', 0);
                    });
                });
            })
            ->when(auth()->user()->hasRole('Gate Permission'), function($query){
                return $query->whereIn('hr_unit_id', auth()->user()->priorities->pluck('hr_unit_id')->toArray());
            })
            
            ->whereHas('relQuotation', function($query){
                return $query->whereNotIn('type',['direct-purchase']);
            })
            ->whereHas('purchaseOrderRequisitions.requisition.requisitionItems.product', function($query){
                return $query->where('is_service', 1);
            })
            ->whereHas('relGoodsReceivedItemStockIn.relGoodsReceivedItems.relProduct', function($query){
                return $query->where('is_service', 1);
            })
            ->whereIn('is_send',['yes'])
            ->when(!datatableOrdering(), function($query){
                return $query->orderby('id', 'desc');
            });

            if (request()->ajax()) {
                return DataTables::of($purchaseOrders)
                ->addIndexColumn()
                ->addColumn('approval_date', function($po){
                    return date('Y-m-d',strtotime($po->po_date));
                })
                ->filterColumn('approval_date', function ($query, $keyword) {
                    $query->where('po_date', 'LIKE', '%'.$keyword.'%');
                })
                ->orderColumn('approval_date', function ($query, $order) {
                    return $query->orderBy('po_date', $order);
                })
                ->editColumn('reference_no', function($po){
                    return  '<a href="javascript:void(0)" onclick="purchaseOrderDetails($(this))" class="btn btn-link" data-src="'.route('pms.purchase.order-list.show',$po->id).'">'.$po->reference_no.'</a>';
                })
                ->addColumn('supplier', function($po){
                    return  isset($po->relQuotation->relSuppliers) ? (isset($po->relQuotation->relSuppliers->name) ? $po->relQuotation->relSuppliers->name.' ('.$po->relQuotation->relSuppliers->code.')' : '') : '';
                })
                ->filterColumn('supplier', function ($query, $keyword) {
                    return $query->whereHas('relQuotation.relSuppliers', function ($query) use($keyword) {
                        $query->where('name', 'LIKE', '%'.$keyword.'%')
                              ->orWhere('code', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('supplier', function ($query, $order) {
                    return pleaseSortMe($query, $order, Quotations::select('suppliers.name')
                        ->join('suppliers', 'suppliers.id', '=', 'quotations.supplier_id')
                        ->whereColumn('quotations.id', 'purchase_orders.quotation_id')
                        ->take(1)
                    );
                })
                ->addColumn('quotation_ref_no', function($po){
                    return isset($po->relQuotation->reference_no)?$po->relQuotation->reference_no:'';
                })
                ->filterColumn('quotation_ref_no', function ($query, $keyword) {
                    return $query->whereHas('relQuotation', function ($query) use($keyword) {
                        $query->where('reference_no', 'LIKE', '%'.$keyword.'%');
                    });
                })
                ->orderColumn('quotation_ref_no', function ($query, $order) {
                    return pleaseSortMe($query, $order, Quotations::select('quotations.reference_no')
                        ->whereColumn('quotations.id', 'purchase_orders.quotation_id')
                        ->take(1)
                    );
                })
                ->addColumn('services', function($po){
                    $services = '';
                    $count = 0;
                    if($po->relPurchaseOrderItems->count() > 0){
                        foreach($po->relPurchaseOrderItems as $key => $item){
                            if($item->relProduct->is_service == 1){
                                $count++;
                                $services .= ($count > 1 ? ', ' : '').$item->relProduct->name.' '.getProductAttributesFaster($item->relProduct);
                            }
                        }
                    }

                    return $services;
                })
                ->filterColumn('services', function ($query, $keyword) {
                    return $query->whereHas('relPurchaseOrderItems.relProduct', function($query) use($keyword){
                        return $query->where('name', 'LIKE', '%'.$keyword.'%');
                    })
                    ->orWhere(function($query) use($keyword){
                        return $query->whereHas('relPurchaseOrderItems.relProduct.attributes.attributeOption', function ($query) use($keyword) {
                            $query->where('name', 'LIKE', '%'.$keyword.'%');
                        })
                        ->orWhereHas('relPurchaseOrderItems.relProduct.attributes.attributeOption.attribute', function ($query) use($keyword) {
                            $query->where('name', 'LIKE', '%'.$keyword.'%');
                        });
                    });
                })
                ->orderColumn('services', function ($query, $order) {
                    return pleaseSortMe($query, $order, PurchaseOrderItem::select('products.name')
                        ->join('products', 'products.id', '=', 'purchase_order_items.product_id')
                        ->whereColumn('purchase_order_items.id', 'purchase_orders.id')
                        ->take(1)
                    );
                })
                // ->editColumn('total_price', function($po){
                //     return ((isset($po->relQuotation->exchangeRate->currency->symbol)?$po->relQuotation->exchangeRate->currency->symbol:'').' '.systemMoneyFormat($po->total_price));
                // })
                // ->editColumn('vat', function($po){
                //     return ((isset($po->relQuotation->exchangeRate->currency->symbol)?$po->relQuotation->exchangeRate->currency->symbol:'').' '.systemMoneyFormat($po->vat));
                // })
                // ->editColumn('gross_price', function($po){
                //     return ((isset($po->relQuotation->exchangeRate->currency->symbol)?$po->relQuotation->exchangeRate->currency->symbol:'') .' '.systemMoneyFormat($po->gross_price));
                // })
                ->addColumn('actions', function($po){
                    return '<a href="'.url('pms/grn/confirmed-services/'.$po->id).'" class="btn btn-xs btn-success"><i class="la la-eye"></i>&nbsp;View Confirmed Services</a>';
                })
                ->rawColumns(['reference_no','supplier','total_price','vat','gross_price', 'actions'])
                ->make(true);
            }

            return view('pms.backend.pages.service.confirmed', [
                'title' => $title,
                'headerColumns' => $this->headerColumns()
            ]);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }

    public function show($id)
    {
        try{
            $purchaseOrder = PurchaseOrder::with([
                'relQuotation.relSuppliers',
                'relGoodReceiveNote.relGoodsReceivedItems.relProduct.category',
                'relGoodReceiveNote.relGoodsReceivedItems.relProduct.productUnit',
                'relGoodReceiveNote.relGoodsReceivedItems.relProduct.attributes.attributeOption.attribute',
                'relQuotation.exchangeRate.currency',
                'relPoAttachment',
                'relSupplierPayments'
            ])
            ->whereHas('relQuotation', function($query){
                return $query->whereNotIn('type',['direct-purchase']);
            })
            ->whereHas('purchaseOrderRequisitions.requisition.requisitionItems.product', function($query){
                return $query->where('is_service', 1);
            })
            ->whereHas('relGoodsReceivedItemStockIn.relGoodsReceivedItems.relProduct', function($query){
                return $query->where('is_service', 1);
            })
            ->whereIn('is_send',['yes'])
            ->where('id', $id)
            ->first();

            return view('pms.backend.pages.service.confirmed-services', [
                'title' => 'Confirmed Services for #'.$purchaseOrder->reference_no,
                'currency' => $purchaseOrder->relQuotation->exchangeRate->currency->symbol,
                'purchaseOrder' => $purchaseOrder,
            ]);
        }catch (\Throwable $th){
            return $this->backWithError($th->getMessage());
        }
    }
}

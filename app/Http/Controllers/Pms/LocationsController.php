<?php
bolt_decrypt( __FILE__ , 'JCWt3l'); return 0;
##!!!##
<?php
bolt_decrypt( __FILE__ , 'i7N4mq'); return 0;
##!!!##

namespace App\Http\Controllers\API;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use DB;

use App\Models\Hr\Unit;
use App\Models\Hr\Department;
use App\Models\Hr\Section;
use App\Models\Hr\Location;
use App\Models\Hr\Designation;
use App\Models\Employee;

class SectionController extends Controller
{
    /**
     * List of Sections
     * 
     * Get the list of available sections.
     * 
     * @queryParam token string required Authentication Token List would be provided by BIZZSOL Example: abcdefghijklmnopqrstuvwxyzabcdef
     * 
     * @group Section
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request){
        try{
            return response()->json([
                'success' => true,
                'status' => true,
                'status_code' => 200,
                'data' => [
                    'sections' => Section::join('hr_department', 'hr_department.hr_department_id', '=', 'hr_section.hr_section_department_id')
                    ->join('hr_unit', 'hr_unit.hr_unit_id', '=', 'hr_department.hr_unit_id')
                    ->join('companies', 'companies.id', '=', 'hr_unit.company_id')

                    ->when($request->get('department_id') > 0, function($query) use($request){
                        return $query->where('hr_section_department_id', $request->get('department_id'));
                    })
                    ->get([
                      DB::raw('hr_section.hr_section_id as id'),
                      DB::raw('hr_section.hr_section_code as code'),
                      DB::raw('hr_section.hr_section_name as name'),

                      DB::raw('hr_department.hr_department_id as department_id'),
                      DB::raw('hr_department.hr_department_name as department_name'),

                      DB::raw('hr_unit.hr_unit_code as unit_code'),
                      DB::raw('hr_unit.hr_unit_name as unit_name'),

                      DB::raw('companies.code as company_code'),
                      DB::raw('companies.name as company_name'),
                    ]),
                ]
            ], 200);
        }catch (\Throwable $th){
            return response()->json([
                'success' => false,
                'status' => false,
                'status_code' => 500,
                'message' => $th->getMessage()
            ], 500);
        }
    }

    /**
     * Store Section
     * 
     * Store a new Section.
     * 
     * @queryParam token string required Authentication Token List would be provided by BIZZSOL Example: abcdefghijklmnopqrstuvwxyzabcdef
     * @bodyParam department_id int required department_id of the Section Example: 0
     * @bodyParam code string required Code of the Section Example: ICT
     * @bodyParam name string required Name of the Section Example: Information Technology
     *
     * @response {
     *       "success": true,
     *       "status": true,
     *       "success_code": 200,
     *       "data": {
     *           "message": "Section has been stored successfully."
     *       }
     *   }
     * 
     * @group Section
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'code' => 'required',
            'name' => 'required',
            'department_id' => 'required',
        ]);

        if ($validator->passes()) {
            DB::beginTransaction();
            try{
                Section::create([
                    'hr_section_department_id' => $request->department_id,
                    'hr_section_code' => $request->code,
                    'hr_section_name' => $request->name,
                    'hr_section_name_bn' => $request->name,
                ]);

                DB::commit();
                return response()->json([
                    'success' => true,
                    'status' => true,
                    'status_code' => 200,
                    'data' => [
                        'message' => "Section has been stored successfully."
                    ]
                ], 200);
            }catch (\Throwable $th){
                DB::rollback();
                return response()->json([
                    'success' => false,
                    'status' => false,
                    'status_code' => 500,
                    'message' => $th->getMessage()
                ], 500);
            }
        }

        return response()->json([
            'success' => false,
            'status' => false,
            'status_code' => 422,
            'errors' => $validator->errors()->all()
        ], 422);
    }

    /**
     * Section Details
     * 
     * Get Section by it's unique ID.
     * 
     * @queryParam token string required Authentication Token List would be provided by BIZZSOL Example: abcdefghijklmnopqrstuvwxyzabcdef
     * @pathParam section_id int required ID of the Section Example: 100
     * 
     * @group Section
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show(Section $section)
    {
        try{
            return response()->json([
                'success' => true,
                'status' => true,
                'status_code' => 200,
                'data' => [
                    'section' => [
                      'id' => $section->hr_section_id,
                      'code' => $section->hr_section_code,
                      'name' => $section->hr_section_name,
                      'department_id' => $section->department->hr_department_id,
                      'department_name' => $section->department->hr_department_name,
                    ]
                ]
            ], 200);
        }catch (\Throwable $th){
            return response()->json([
                'success' => false,
                'status' => false,
                'status_code' => 500,
                'message' => $th->getMessage()
            ], 500);
        }
    }

    /**
     * Update Section
     * 
     * Update an available Section.
     * 
     * @queryParam token string required Authentication Token List would be provided by BIZZSOL Example: abcdefghijklmnopqrstuvwxyzabcdef
     * @bodyParam department_id int required department_id of the Section Example: 0
     * @bodyParam code string required Code of the Section Example: ICT
     * @bodyParam name string required Name of the Section Example: Information Technology
     *
     * @response {
     *       "success": true,
     *       "status": true,
     *       "success_code": 200,
     *       "data": {
     *           "message": "Section has been updated successfully."
     *       }
     *   }
     * 
     * @group Section
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $validator = \Validator::make($request->all(), [
            'code' => 'required',
            'name' => 'required',
            'department_id' => 'required',
        ]);

        if ($validator->passes()) {
            DB::beginTransaction();
            try{
                Section::updateOrCreate([
                    'hr_section_id' => $id
                ],[
                    'hr_section_department_id' => $request->department_id,
                    'hr_section_code' => $request->code,
                    'hr_section_name' => $request->name,
                    'hr_section_name_bn' => $request->name,
                ]);

                DB::commit();
                return response()->json([
                    'success' => true,
                    'status' => true,
                    'status_code' => 200,
                    'data' => [
                        'message' => "Section has been updated successfully."
                    ]
                ], 200);
            }catch (\Throwable $th){
                DB::rollback();
                return response()->json([
                    'success' => false,
                    'status' => false,
                    'status_code' => 500,
                    'message' => $th->getMessage()
                ], 500);
            }
        }

        return response()->json([
            'success' => false,
            'status' => false,
            'status_code' => 422,
            'errors' => $validator->errors()->all()
        ], 422);
    }

    /**
     * Delete Section
     * 
     * Delete an available Section.
     * 
     * @queryParam token string required Authentication Token List would be provided by BIZZSOL Example: abcdefghijklmnopqrstuvwxyzabcdef
     * @pathParam section_id int required Unique ID of the Section Example: 100
     *
     * @response {
     *       "success": true,
     *       "status": true,
     *       "success_code": 200,
     *       "data": {
     *           "message": "Section has been Deleted successfully."
     *       }
     *   }
     * 
     * @group Section
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        DB::beginTransaction();
        try{
            Section::where('hr_section_id', $id)->delete();

            DB::commit();
            return response()->json([
                'success' => true,
                'status' => true,
                'status_code' => 200,
                'data' => [
                    'message' => "Section has been deleted successfully."
                ]
            ], 200);
        }catch (\Throwable $th){
            DB::rollback();
            return response()->json([
                'success' => false,
                'status' => false,
                'status_code' => 500,
                'message' => $th->getMessage()
            ], 500);
        }
    }
}

<?php
bolt_decrypt( __FILE__ , 'tc0WWC'); return 0;
##!!!##
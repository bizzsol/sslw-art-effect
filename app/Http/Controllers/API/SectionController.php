<?php
bolt_decrypt( __FILE__ , 'DYT1jk'); return 0;
##!!!##
<?php
bolt_decrypt( __FILE__ , 'zLgbgF'); return 0;
##!!!##
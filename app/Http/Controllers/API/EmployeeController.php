<?php
bolt_decrypt( __FILE__ , 'TNsFVO'); return 0;
##!!!##

namespace App\Http\Controllers\API;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use DB;

use App\Models\Hr\Unit;
use App\Models\Hr\Department;
use App\Models\Hr\Section;
use App\Models\Hr\Location;
use App\Models\Hr\Designation;
use App\Models\Employee;

class EmployeeController extends Controller
{
    /**
     * List of Employees
     * 
     * Get List of all available Employees.
     * 
     * @queryParam token string required Authentication Token List would be provided by BIZZSOL Example: abcdefghijklmnopqrstuvwxyzabcdef
     *
     * @group Employee
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request){
        try{
            $data = Employee::with([
                'designation',
                'unit',
                'department',
                'section',
                'location',
            ])
            ->when($request->get('designation_id') > 0, function($query) use($request){
                return $query->where('as_designation_id', $request->get('designation_id'));
            })
            ->when($request->get('unit_id') > 0, function($query) use($request){
                return $query->where('as_unit_id', $request->get('unit_id'));
            })
            ->when($request->get('department_id') > 0, function($query) use($request){
                return $query->where('as_department_id', $request->get('department_id'));
            })
            ->when($request->get('section_id') > 0, function($query) use($request){
                return $query->where('as_section_id', $request->get('section_id'));
            })
            ->when($request->get('location_id') > 0, function($query) use($request){
                return $query->where('as_location', $request->get('location_id'));
            })
            ->get();
            $employees = [];
            if(isset($data[0])){
                foreach ($data as $key => $employee) {
                    array_push($employees, [
                        'id' => $employee->as_id,
                        'uid' => $employee->associate_id,
                        
                        'designation_id' => $employee->as_designation_id,
                        'designation' => isset($employee->designation->hr_designation_name) ? $employee->designation->hr_designation_name : '',
                        
                        'unit_id' => $employee->as_unit_id,
                        'unit' => isset($employee->unit->hr_unit_name) ? $employee->unit->hr_unit_name : '',
                        
                        'location_id' => $employee->as_location,
                        'location' => isset($employee->location->hr_location_name) ? $employee->location->hr_location_name : '',
                        
                        'department_id' => $employee->as_department_id,
                        'department' => isset($employee->department->hr_department_name) ? $employee->department->hr_department_name : '',
                        
                        'section_id' => $employee->as_section_id,
                        'section' => isset($employee->section->hr_section_name) ? $employee->section->hr_section_name : '',
                        
                        'name' => $employee->as_name,
                        'gender' => $employee->as_gender,

                        'date_of_birth' => date('Y-m-d', strtotime($employee->as_dob)),
                        'age' => ageInShortText(date('Y-m-d', strtotime($employee->as_dob))),

                        'date_of_joining' => date('Y-m-d', strtotime($employee->as_doj)),
                        'service_years' => ageInShortText(date('Y-m-d', strtotime($employee->as_doj))),

                        'contact' => $employee->as_contact,
                    ]);
                }
            }

            return response()->json([
                'success' => true,
                'status' => true,
                'status_code' => 200,
                'data' => [
                    'employees' => $employees,
                ]
            ], 200);
        }catch (\Throwable $th){
            return response()->json([
                'success' => false,
                'status' => false,
                'status_code' => 500,
                'message' => $th->getMessage()
            ], 500);
        }
    }

    /**
     * Store Employee
     * 
     * Store a new Employee.
     * 
     * @queryParam token string required Authentication Token List would be provided by BIZZSOL Example: abcdefghijklmnopqrstuvwxyzabcdef
     * @bodyParam uid string required UID of the Employee Example: 1001
     * @bodyParam name string required Name of the Employee Example: john Doe
     * @bodyParam gender string required Gender of the Employee Example: Male/Female
     * @bodyParam date_of_birth date required Date of Birth of the Employee Example: 2000-01-01
     * @bodyParam designation_id int required Designation ID of the Employee Example: 100
     * @bodyParam location_id int required Location ID of the Employee Example: 100
     * @bodyParam unit_id int required Unit ID of the Employee Example: 100
     * @bodyParam department_id int required Department ID of the Employee Example: 100
     * @bodyParam section_id int required Section ID of the Employee Example: 100
     * @bodyParam date_of_joining date required Date of Joining of the Employee Example: 2024-10-10
     * @bodyParam contact string required Contact of the Employee Example: 01234567890
     *
     * @response {
     *       "success": true,
     *       "status": true,
     *       "success_code": 200,
     *       "data": {
     *           "message": "Employee has been stored successfully."
     *       }
     *   }
     * 
     * @group Employee
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'uid' => 'required|unique:hr_as_basic_info,associate_id',
            'name' => 'required',
            'gender' => 'required',
            'date_of_birth' => 'required',
            'designation_id' => 'required',
            'location_id' => 'required',
            'unit_id' => 'required',
            'department_id' => 'required',
            'section_id' => 'required',
            'date_of_joining' => 'required',
            'contact' => 'required',
        ]);

        if ($validator->passes()) {
            DB::beginTransaction();
            try{
                Employee::create([
                    'as_designation_id' => $request->designation_id,
                    'as_unit_id' => $request->unit_id,
                    'as_location' => $request->location_id,
                    'as_department_id' => $request->department_id,
                    'as_section_id' => $request->section_id,
                    'as_doj' => $request->date_of_joining,
                    'associate_id' => $request->uid,
                    'as_name' => $request->name,
                    'as_gender' => $request->gender,
                    'as_dob' => $request->date_of_birth,
                    'as_contact' => $request->contact,
                ]);

                DB::commit();
                return response()->json([
                    'success' => true,
                    'status' => true,
                    'status_code' => 200,
                    'data' => [
                        'message' => "Employee has been stored successfully."
                    ]
                ], 200);
            }catch (\Throwable $th){
                DB::rollback();
                return response()->json([
                    'success' => false,
                    'status' => false,
                    'status_code' => 500,
                    'message' => $th->getMessage()
                ], 500);
            }
        }

        return response()->json([
            'success' => false,
            'status' => false,
            'status_code' => 422,
            'errors' => $validator->errors()->all()
        ], 422);
    }

    /**
     * Employee Details
     * 
     * Get Employee by it's unique ID.
     * 
     * @queryParam token string required Authentication Token List would be provided by BIZZSOL Example: abcdefghijklmnopqrstuvwxyzabcdef
     * @pathParam employee_id int required ID of the Employee Example: 17156
     *
     * @response {
     *     "success": true,
     *     "status": true,
     *     "success_code": 200,
     *     "data": {
     *         "employee": {
     *             "id": 17156,
     *             "uid": "1948",
     *             "designation_id": 533,
     *             "designation": "Group Chief Financial Officer",
     *             "unit_id": 1,
     *             "unit": "SOFTWARE SHOP LTD.",
     *             "location_id": null,
     *             "location": "",
     *             "department_id": 106,
     *             "department": "Finance & Accounts",
     *             "section_id": 257,
     *             "section": "Finance & Accounts",
     *             "name": "Abdullah Al Mahbub",
     *             "gender": null,
     *             "date_of_birth": "2023-12-19",
     *             "age": "0 y 0 m 28 d",
     *             "date_of_joining": "2023-12-19",
     *             "service_years": "0 y 0 m 28 d",
     *             "contact": null
     *         }
     *     }
     * }
     * 
     * @group Employee
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show(Employee $employee)
    {
        try{
            return response()->json([
                'success' => true,
                'status' => true,
                'status_code' => 200,
                'data' => [
                    'employee' => [
                        'id' => $employee->as_id,
                        'uid' => $employee->associate_id,
                        
                        'designation_id' => $employee->as_designation_id,
                        'designation' => isset($employee->designation->hr_designation_name) ? $employee->designation->hr_designation_name : '',
                        
                        'unit_id' => $employee->as_unit_id,
                        'unit' => isset($employee->unit->hr_unit_name) ? $employee->unit->hr_unit_name : '',
                        
                        'location_id' => $employee->as_location,
                        'location' => isset($employee->location->hr_location_name) ? $employee->location->hr_location_name : '',
                        
                        'department_id' => $employee->as_department_id,
                        'department' => isset($employee->department->hr_department_name) ? $employee->department->hr_department_name : '',
                        
                        'section_id' => $employee->as_section_id,
                        'section' => isset($employee->section->hr_section_name) ? $employee->section->hr_section_name : '',
                        
                        'name' => $employee->as_name,
                        'gender' => $employee->as_gender,

                        'date_of_birth' => date('Y-m-d', strtotime($employee->as_dob)),
                        'age' => ageInShortText(date('Y-m-d', strtotime($employee->as_dob))),

                        'date_of_joining' => date('Y-m-d', strtotime($employee->as_doj)),
                        'service_years' => ageInShortText(date('Y-m-d', strtotime($employee->as_doj))),

                        'contact' => $employee->as_contact,
                    ]
                ]
            ], 200);
        }catch (\Throwable $th){
            return response()->json([
                'success' => false,
                'status' => false,
                'status_code' => 500,
                'message' => $th->getMessage()
            ], 500);
        }
    }

    /**
     * Update Employee
     * 
     * Update an available Employee.
     * 
     * @queryParam token string required Authentication Token List would be provided by BIZZSOL Example: abcdefghijklmnopqrstuvwxyzabcdef
     * @bodyParam uid string required UID of the Employee Example: 1001
     * @bodyParam name string required Name of the Employee Example: john Doe
     * @bodyParam gender string required Gender of the Employee Example: Male/Female
     * @bodyParam date_of_birth date required Date of Birth of the Employee Example: 2000-01-01
     * @bodyParam designation_id int required Designation ID of the Employee Example: 100
     * @bodyParam location_id int required Location ID of the Employee Example: 100
     * @bodyParam unit_id int required Unit ID of the Employee Example: 100
     * @bodyParam department_id int required Department ID of the Employee Example: 100
     * @bodyParam section_id int required Section ID of the Employee Example: 100
     * @bodyParam date_of_joining date required Date of Joining of the Employee Example: 2024-10-10
     * @bodyParam contact string required Contact of the Employee Example: 01234567890
     *
     * @response {
     *       "success": true,
     *       "status": true,
     *       "success_code": 200,
     *       "data": {
     *           "message": "Employee has been updated successfully."
     *       }
     *   }
     * 
     * @group Employee
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $validator = \Validator::make($request->all(), [
            'uid' => 'required|unique:hr_as_basic_info,associate_id,'.$id,
            'name' => 'required',
            'gender' => 'required',
            'date_of_birth' => 'required',
            'designation_id' => 'required',
            'location_id' => 'required',
            'unit_id' => 'required',
            'department_id' => 'required',
            'section_id' => 'required',
            'date_of_joining' => 'required',
            'contact' => 'required',
        ]);

        if ($validator->passes()) {
            DB::beginTransaction();
            try{
                Employee::create([
                    'as_id' => $id
                ], [
                    'as_designation_id' => $request->designation_id,
                    'as_unit_id' => $request->unit_id,
                    'as_location' => $request->location_id,
                    'as_department_id' => $request->department_id,
                    'as_section_id' => $request->section_id,
                    'as_doj' => $request->date_of_joining,
                    'associate_id' => $request->uid,
                    'as_name' => $request->name,
                    'as_gender' => $request->gender,
                    'as_dob' => $request->date_of_birth,
                    'as_contact' => $request->contact,
                ]);

                DB::commit();
                return response()->json([
                    'success' => true,
                    'status' => true,
                    'status_code' => 200,
                    'data' => [
                        'message' => "Employee has been updated successfully."
                    ]
                ], 200);
            }catch (\Throwable $th){
                DB::rollback();
                return response()->json([
                    'success' => false,
                    'status' => false,
                    'status_code' => 500,
                    'message' => $th->getMessage()
                ], 500);
            }
        }

        return response()->json([
            'success' => false,
            'status' => false,
            'status_code' => 422,
            'errors' => $validator->errors()->all()
        ], 422);
    }

    /**
     * Delete Employee
     * 
     * Delete an available Employee.
     * 
     * @queryParam token string required Authentication Token List would be provided by BIZZSOL Example: abcdefghijklmnopqrstuvwxyzabcdef
     * @pathParam employee_id int required Unique ID of the Employee Example: 100
     *
     * @response {
     *       "success": true,
     *       "status": true,
     *       "success_code": 200,
     *       "data": {
     *           "message": "Employee has been Deleted successfully."
     *       }
     *   }
     * 
     * @group Employee
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        DB::beginTransaction();
        try{
            Employee::where('as_id', $id)->delete();

            DB::commit();
            return response()->json([
                'success' => true,
                'status' => true,
                'status_code' => 200,
                'data' => [
                    'message' => "Employee has been deleted successfully."
                ]
            ], 200);
        }catch (\Throwable $th){
            DB::rollback();
            return response()->json([
                'success' => false,
                'status' => false,
                'status_code' => 500,
                'message' => $th->getMessage()
            ], 500);
        }
    }
}

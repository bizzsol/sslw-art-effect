<?php
bolt_decrypt( __FILE__ , '1MYNcx'); return 0;
##!!!##

namespace App\Http\Controllers\API;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use DB;

use App\Models\Hr\Unit;
use App\Models\Hr\Department;
use App\Models\Hr\Section;
use App\Models\Hr\Location;
use App\Models\Hr\Designation;
use App\Models\Employee;

class LocationController extends Controller
{
    /**
     * List of Locations
     * 
     * Get List of all available Locations.
     * 
     * @queryParam token string required Authentication Token List would be provided by BIZZSOL Example: abcdefghijklmnopqrstuvwxyzabcdef
     *
     * @group Location
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request){
        try{
            return response()->json([
                'success' => true,
                'data' => [
                    'locations' => Location::join('hr_unit', 'hr_unit.hr_unit_id', '=', 'hr_location.hr_location_unit_id')
                    ->when($request->get('unit_id') > 0, function($query) use($request){
                        return $query->where('hr_location_unit_id', $request->get('unit_id'));
                    })
                    ->get([
                      DB::raw('hr_location.hr_location_id as id'),
                      DB::raw('hr_location.hr_location_code as code'),
                      DB::raw('hr_location.hr_location_short_name as short_name'),
                      DB::raw('hr_location.hr_location_name as name'),
                      DB::raw('hr_unit.hr_unit_id as unit_id'),
                      DB::raw('hr_unit.hr_unit_name as unit_name'),
                    ]),
                ]
            ], 200);
        }catch (Exception $e){
            return response()->json([
                'success' => false,
                'message' => $e->getMessage()
            ], 500);
        }
    }

    /**
     * Store Location
     * 
     * Store a new Location.
     * 
     * @queryParam token string required Authentication Token List would be provided by BIZZSOL Example: abcdefghijklmnopqrstuvwxyzabcdef
     * @bodyParam code string required Code of the Location Example: ICT
     * @bodyParam name string required Name of the Location Example: Information Technology
     * @bodyParam short_name string required Short Name of the Location Example: 0
     * @bodyParam address text required Address of the Location Example: Dhaka
     * @bodyParam unit_id int required Unit ID of the Location Example: 100
     *
     * @response {
     *       "success": true,
     *       "data": {
     *           "message": "Location has been stored successfully."
     *       }
     *   }
     * 
     * @group Location
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'code' => 'required|unique:hr_location,hr_location_code',
            'short_name' => 'required|unique:hr_location,hr_location_short_name',
            'name' => 'required|unique:hr_location,hr_location_name',
            'address' => 'required',
            'unit_id' => 'required',
        ]);

        if ($validator->passes()) {
            DB::beginTransaction();
            try{
                Location::create([
                    'hr_location_code' => $request->code,
                    'hr_location_name' => $request->name,
                    'hr_location_name_bn' => $request->name,
                    'hr_location_short_name' => $request->short_name,
                    'hr_location_address' => $request->address,
                    'hr_location_address_bn' => $request->address,
                    'hr_location_unit_id' => $request->unit_id,
                ]);

                DB::commit();
                return response()->json([
                    'success' => true,
                    'data' => [
                        'message' => "Location has been stored successfully."
                    ]
                ], 200);
            }catch (Exception $e){
                DB::rollback();
                return response()->json([
                    'success' => false,
                    'message' => $e->getMessage()
                ], 500);
            }
        }

        return response()->json([
            'success' => false,
            'errors' => $validator->errors()->all()
        ], 422);
    }

    /**
     * Location Details
     * 
     * Get Location by it's unique ID.
     * 
     * @queryParam token string required Authentication Token List would be provided by BIZZSOL Example: abcdefghijklmnopqrstuvwxyzabcdef
     * @pathParam location_id int required ID of the Location Example: 100
     *
     * @response {
     *      "success": true,
     *      "data": {
     *          "location": {
     *              "id": 6,
     *              "code": "DHK",
     *              "name": "Dhaka",
     *              "short_name": "Dhaka",
     *              "address": "Dhaka",
     *              "unit_id": 1,
     *              "unit_name": "SOFTWARE SHOP LTD."
     *          }
     *      }
     *  }
     * 
     * @group Location
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show(Location $location)
    {
        try{
            return response()->json([
                'success' => true,
                'data' => [
                    'location' => [
                      'id' => $location->hr_location_id,
                      'code' => $location->hr_location_code,
                      'name' => $location->hr_location_name,
                      'short_name' => $location->hr_location_short_name,
                      'address' => $location->hr_location_address,
                      'unit_id' => $location->unit->hr_unit_id,
                      'unit_name' => $location->unit->hr_unit_name,
                    ]
                ]
            ], 200);
        }catch (Exception $e){
            return response()->json([
                'success' => false,
                'message' => $e->getMessage()
            ], 500);
        }
    }

    /**
     * Update Location
     * 
     * Update an available Location.
     * 
     * @queryParam token string required Authentication Token List would be provided by BIZZSOL Example: abcdefghijklmnopqrstuvwxyzabcdef
     * @bodyParam code string required Code of the Location Example: ICT
     * @bodyParam name string required Name of the Location Example: Information Technology
     * @bodyParam short_name string required Short Name of the Location Example: 0
     * @bodyParam address text required Address of the Location Example: Dhaka
     * @bodyParam unit_id int required Unit ID of the Location Example: 100
     *
     * @response {
     *       "success": true,
     *       "data": {
     *           "message": "Location has been updated successfully."
     *       }
     *   }
     * 
     * @group Location
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $validator = \Validator::make($request->all(), [
            'code' => 'required',
            'short_name' => 'required',
            'name' => 'required',
            'address' => 'required',
            'unit_id' => 'required',
        ]);

        if ($validator->passes()) {
            DB::beginTransaction();
            try{
                Location::updateOrCreate([
                    'hr_location_id' => $id
                ],[
                    'hr_location_code' => $request->code,
                    'hr_location_name' => $request->name,
                    'hr_location_name_bn' => $request->name,
                    'hr_location_short_name' => $request->short_name,
                    'hr_location_address' => $request->address,
                    'hr_location_address_bn' => $request->address,
                    'hr_location_unit_id' => $request->unit_id,
                ]);

                DB::commit();
                return response()->json([
                    'success' => true,
                    'data' => [
                        'message' => "Location has been updated successfully."
                    ]
                ], 200);
            }catch (Exception $e){
                DB::rollback();
                return response()->json([
                    'success' => false,
                    'message' => $e->getMessage()
                ], 500);
            }
        }

        return response()->json([
            'success' => false,
            'errors' => $validator->errors()->all()
        ], 422);
    }

    /**
     * Delete Location
     * 
     * Delete an available Location.
     * 
     * @queryParam token string required Authentication Token List would be provided by BIZZSOL Example: abcdefghijklmnopqrstuvwxyzabcdef
     * @pathParam location_id int required Unique ID of the Location Example: 100
     *
     * @response {
     *       "success": true,
     *       "data": {
     *           "message": "Location has been Deleted successfully."
     *       }
     *   }
     * 
     * @group Location
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        DB::beginTransaction();
        try{
            Location::where('hr_location_id', $id)->delete();

            DB::commit();
            return response()->json([
                'success' => true,
                'data' => [
                    'message' => "Location has been deleted successfully."
                ]
            ], 200);
        }catch (Exception $e){
            DB::rollback();
            return response()->json([
                'success' => false,
                'message' => $e->getMessage()
            ], 500);
        }
    }
}

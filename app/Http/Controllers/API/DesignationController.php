<?php
bolt_decrypt( __FILE__ , 'fJLbRH'); return 0;
##!!!##
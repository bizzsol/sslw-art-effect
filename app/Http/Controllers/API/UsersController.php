<?php
bolt_decrypt( __FILE__ , '1GHEsp'); return 0;
##!!!##
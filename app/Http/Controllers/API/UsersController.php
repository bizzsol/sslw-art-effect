<?php
bolt_decrypt( __FILE__ , 'ueTID0'); return 0;
##!!!##
<?php
bolt_decrypt( __FILE__ , 'NiYh1N'); return 0;
##!!!##
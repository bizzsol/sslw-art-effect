<?php
bolt_decrypt( __FILE__ , '0mDRwV'); return 0;
##!!!##

namespace App\Http\Controllers\API;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use \App\User;
use \App\Models\Hr\Section;
use \App\Models\PmsModels\Accounts\CostCentre;
use DB;

class UsersController extends Controller
{
    /**
     * List of Users
     * 
     * Get the List of all available Users.
     * 
     * @queryParam token string required Authentication Token List would be provided by BIZZSOL Example: abcdefghijklmnopqrstuvwxyzabcdef
     * 
     * @group User
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request){
        try{
            $data = User::with([
                'employee.designation',
                'priorities.unit',
                'priorities.department',
                'priorities.section',
                'companies.company',
                'costCentres.costCentre'
            ])
            ->when($request->get('uid') > 0, function($query) use($request){
                return $query->where('associate_id', $request->get('uid'));
            })
            ->when($request->get('email') > 0, function($query) use($request){
                return $query->where('email', $request->get('email'));
            })
            ->when($request->get('phone') > 0, function($query) use($request){
                return $query->where('phone', $request->get('phone'));
            })
            ->get();
            $users = [];
            if(isset($data[0])){
                foreach($data as $key => $user){
                    array_push($users, [
                        'id' => $user->id,
                        'uid' => $user->associate_id,
                        'name' => $user->name,
                        'designation' => isset($user->employee->designation->hr_designation_name) ? $user->employee->designation->hr_designation_name : '',
                        'email' => $user->email,
                        'phone' => $user->phone,
                        
                        'units' => $user->priorities->pluck('unit.hr_unit_name', 'unit.hr_unit_id')->toArray(),
                        'departments' => $user->priorities->pluck('department.hr_department_name', 'department.hr_department_id')->toArray(),
                        'sections' => $user->priorities->pluck('section.hr_section_name', 'section.hr_section_id')->toArray(),

                        'companies' => $user->companies->pluck('company.name')->implode(', '),
                        'costCentres' => $user->costCentres->pluck('costCentre.name')->implode(', '),

                        'roles' => $user->roles->pluck('name')->toArray()
                    ]);
                }
            }

            return response()->json([
                'success' => true,
                'status' => true,
                'status_code' => 200,
                'data' => [
                    'users' => $users,
                ]
            ], 200);
        }catch (\Throwable $th){
            return response()->json([
                'success' => false,
                'status' => false,
                'status_code' => 500,
                'message' => $th->getMessage()
            ], 500);
        }
    }

    /**
     * Store User
     * 
     * Store a new User.
     * 
     * @queryParam token string required Authentication Token List would be provided by BIZZSOL Example: abcdefghijklmnopqrstuvwxyzabcdef
     * @bodyParam name string required Name of the User Example: John Doe
     * @bodyParam uid string required UID of the User Example: 1001
     * @bodyParam email email required Email of the User Example: example@email.com
     * @bodyParam phone string Phone of the User Example: 01234567890
     * @bodyParam password string required Password of the User Example: 12345678
     * @bodyParam password_confirmation string required Password Confirmation of the User Example: 12345678
     * @bodyParam sections array required Array of Sections of the User Example: [1, 2, 3]
     * @bodyParam roles array required Array of Roles of the User Example: ["Admin", "Employee"]
     *
     * @response {
     *       "success": true,
     *       "status": true,
     *       "success_code": 200,
     *       "data": {
     *           "message": "User has been stored successfully."
     *       }
     *   }
     * 
     * @group User
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'name' => 'required',
            'uid' => 'required',
            'email' => 'required',
            'password' => 'required|min:6|confirmed',
            'sections' => 'required',
            'sections.*' => 'required',
            'roles' => 'required',
            'roles.*' => 'required',
        ]);

        if ($validator->passes()) {
            DB::beginTransaction();
            try{
                $user = User::create([
                    'name' => $request->name,
                    'associate_id' => $request->uid,
                    'email' => $request->email,
                    'phone' => $request->phone,
                    'password' => bcrypt($request->password),
                    'cost_centre_id' => CostCentre::whereNotNull('id')->first()->id,
                    'created_by' => auth()->user()->id,
                    'token' => \Str::random(32)
                ]);

                $priorities = [];
                if(isset($request->sections[0])){
                    foreach($request->sections as $key => $hr_section_id){
                        $section = Section::with([
                            'department'
                        ])->find($hr_section_id);
                        array_push($priorities, [
                            'user_id' => $user->id,
                            'hr_unit_id' => $section->department->hr_unit_id,
                            'hr_department_id' => $section->hr_section_department_id,
                            'hr_section_id' => $section->hr_section_id,
                        ]);
                    }
                }

                if(isset($priorities[0])){
                    UserPriority::insert($priorities);
                }

                $user->assignRole(Role::whereIn('name', $request->roles)->pluck('name')->toArray());

                DB::commit();
                return response()->json([
                    'success' => true,
                    'status' => true,
                    'status_code' => 200,
                    'data' => [
                        'message' => "User has been stored successfully."
                    ]
                ], 200);
            }catch (\Throwable $th){
                DB::rollback();
                return response()->json([
                    'success' => false,
                    'status' => false,
                    'status_code' => 500,
                    'message' => $th->getMessage()
                ], 500);
            }
        }

        return response()->json([
            'success' => false,
            'status' => false,
            'status_code' => 422,
            'errors' => $validator->errors()->all()
        ], 422);
    }

    /**
     * User Details
     * 
     * Get User by it's unique ID.
     * 
     * @queryParam token string required Authentication Token List would be provided by BIZZSOL Example: abcdefghijklmnopqrstuvwxyzabcdef
     * @pathParam user_id int required ID of the User Example: 17156
     * 
     * @group User
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show(User $user)
    {
        try{
            return response()->json([
                'success' => true,
                'status' => true,
                'status_code' => 200,
                'data' => [
                    'user' => [
                        'id' => $user->id,
                        'uid' => $user->associate_id,
                        'name' => $user->name,
                        'designation' => isset($user->employee->designation->hr_designation_name) ? $user->employee->designation->hr_designation_name : '',
                        'email' => $user->email,
                        'phone' => $user->phone,
                        
                        'units' => $user->priorities->pluck('unit.hr_unit_name', 'unit.hr_unit_id')->toArray(),
                        'departments' => $user->priorities->pluck('department.hr_department_name', 'department.hr_department_id')->toArray(),
                        'sections' => $user->priorities->pluck('section.hr_section_name', 'section.hr_section_id')->toArray(),

                        'companies' => $user->companies->pluck('company.name')->implode(', '),
                        'costCentres' => $user->costCentres->pluck('costCentre.name')->implode(', '),

                        'roles' => $user->roles->pluck('name')->toArray()
                    ]
                ]
            ], 200);
        }catch (\Throwable $th){
            return response()->json([
                'success' => false,
                'status' => false,
                'status_code' => 500,
                'message' => $th->getMessage()
            ], 500);
        }
    }

    /**
     * Update User
     * 
     * Update an available User.
     * 
     * @queryParam token string required Authentication Token List would be provided by BIZZSOL Example: abcdefghijklmnopqrstuvwxyzabcdef
     * @pathParam user_id int required ID of the User Example: 17156
     * @bodyParam name string required Name of the User Example: John Doe
     * @bodyParam uid string required UID of the User Example: 1001
     * @bodyParam email email required Email of the User Example: example@email.com
     * @bodyParam phone string Phone of the User Example: 01234567890
     * @bodyParam units array required Array of Units of the User Example: [1, 2, 3]
     * @bodyParam sections array required Array of Sections of the User Example: [1, 2, 3]
     * @bodyParam roles array required Array of Roles of the User Example: ["Admin", "Employee"]
     *
     * @response {
     *       "success": true,
     *       "status": true,
     *       "success_code": 200,
     *       "data": {
     *           "message": "User has been updated successfully."
     *       }
     *   }
     * 
     * @group User
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $validator = \Validator::make($request->all(), [
            'name' => 'required',
            'uid' => 'required',
            'email' => 'required',
            'sections' => 'required',
            'sections.*' => 'required',
            'roles' => 'required',
            'roles.*' => 'required',
        ]);

        if ($validator->passes()) {
            DB::beginTransaction();
            try{
                $user = User::updateOrCreate([
                    'as_id' => $id
                ], [
                    'name' => $request->name,
                    'associate_id' => $request->uid,
                    'email' => $request->email,
                    'phone' => $request->phone,
                ]);

                $priorities = [];
                UserPriority::where('user_id', $user->id)->delete();
                if(isset($request->sections[0])){
                    foreach($request->sections as $key => $hr_section_id){
                        $section = Section::with([
                            'department'
                        ])->find($hr_section_id);
                        array_push($priorities, [
                            'user_id' => $user->id,
                            'hr_unit_id' => $section->department->hr_unit_id,
                            'hr_department_id' => $section->hr_section_department_id,
                            'hr_section_id' => $section->hr_section_id,
                        ]);
                    }
                }

                if(isset($priorities[0])){
                    UserPriority::insert($priorities);
                }

                $user->assignRole(Role::whereIn('name', $request->roles)->pluck('name')->toArray());

                DB::commit();
                return response()->json([
                    'success' => true,
                    'status' => true,
                    'status_code' => 200,
                    'data' => [
                        'message' => "User has been updated successfully."
                    ]
                ], 200);
            }catch (\Throwable $th){
                DB::rollback();
                return response()->json([
                    'success' => false,
                    'status' => false,
                    'status_code' => 500,
                    'message' => $th->getMessage()
                ], 500);
            }
        }

        return response()->json([
            'success' => false,
            'status' => false,
            'status_code' => 422,
            'errors' => $validator->errors()->all()
        ], 422);
    }

    /**
     * Delete User
     * 
     * Delete an available User.
     * 
     * @queryParam token string required Authentication Token List would be provided by BIZZSOL Example: abcdefghijklmnopqrstuvwxyzabcdef
     * @pathParam user_id int required Unique ID of the User Example: 100
     *
     * @response {
     *       "success": true,
     *       "status": true,
     *       "success_code": 200,
     *       "data": {
     *           "message": "User has been Deleted successfully."
     *       }
     *   }
     * 
     * @group User
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        DB::beginTransaction();
        try{

            $user = User::find($id);
            $user->assignRole([]);
            $user->delete();

            DB::commit();
            return response()->json([
                'success' => true,
                'status' => true,
                'status_code' => 200,
                'data' => [
                    'message' => "User has been deleted successfully."
                ]
            ], 200);
        }catch (\Throwable $th){
            DB::rollback();
            return response()->json([
                'success' => false,
                'status' => false,
                'status_code' => 500,
                'message' => $th->getMessage()
            ], 500);
        }
    }

    /**
     * Update User Password
     * 
     * @queryParam token string required Authentication Token List would be provided by BIZZSOL Example: abcdefghijklmnopqrstuvwxyzabcdef
     * @pathParam user_id int required Unique ID of the User Example: John Doe
     * @bodyParam password string required Password of the User Example: 12345678
     * @bodyParam password_confirmation string required Password Confirmation of the User Example: 12345678
     *
     * @response {
     *       "success": true,
     *       "status": true,
     *       "success_code": 200,
     *       "data": {
     *           "message": "User Password has been Updated successfully."
     *       }
     *   }
     * 
     * @group User
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function updatePassword(Request $request, $id)
    {
        $validator = \Validator::make($request->all(), [
            'password' => 'required|min:6|confirmed',
        ]);

        if ($validator->passes()) {
            DB::beginTransaction();
            try{
                User::updateOrCreate([
                    'as_id' => $id
                ],[
                    'password' => bcrypt($request->password),
                ]);

                DB::commit();
                return response()->json([
                    'success' => true,
                    'status' => true,
                    'status_code' => 200,
                    'data' => [
                        'message' => "User password has been updated successfully."
                    ]
                ], 200);
            }catch (\Throwable $th){
                DB::rollback();
                return response()->json([
                    'success' => false,
                    'status' => false,
                    'status_code' => 500,
                    'message' => $th->getMessage()
                ], 500);
            }
        }

        return response()->json([
            'success' => false,
            'status' => false,
            'status_code' => 422,
            'errors' => $validator->errors()->all()
        ], 422);
    }
}

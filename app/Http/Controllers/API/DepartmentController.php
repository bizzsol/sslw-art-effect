<?php
bolt_decrypt( __FILE__ , '74TpYx'); return 0;
##!!!##

namespace App\Http\Controllers\API;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use DB;

use App\Models\Hr\Unit;
use App\Models\Hr\Department;
use App\Models\Hr\Section;
use App\Models\Hr\Location;
use App\Models\Hr\Designation;
use App\Models\Employee;

class DepartmentController extends Controller
{
    /**
     * List of Departments
     * 
     * Get List of all available Departments.
     * 
     * @queryParam token string required Authentication Token List would be provided by BIZZSOL Example: abcdefghijklmnopqrstuvwxyzabcdef
     *
     * @group Department
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request){
        try{
            return response()->json([
                'success' => true,
                'status' => true,
                'status_code' => 200,
                'data' => [
                    'departments' => Department::join('hr_unit', 'hr_unit.hr_unit_id', '=', 'hr_department.hr_unit_id')
                    ->join('companies', 'companies.id', '=', 'hr_unit.company_id')

                    ->get([
                      DB::raw('hr_department_id as id'),
                      DB::raw('hr_department_code as code'),
                      DB::raw('hr_department_name as name'),
                      DB::raw('hr_department_min_range as min_range'),
                      DB::raw('hr_department_max_range as max_range'),

                      DB::raw('hr_unit.hr_unit_code as unit_code'),
                      DB::raw('hr_unit.hr_unit_name as unit_name'),

                      DB::raw('companies.code as company_code'),
                      DB::raw('companies.name as company_name'),
                    ]),
                ]
            ], 200);
        }catch (\Throwable $th){
            return response()->json([
                'success' => false,
                'status' => false,
                'status_code' => 500,
                'message' => $th->getMessage()
            ], 500);
        }
    }

    /**
     * Store Department
     * 
     * Store a new Department.
     * 
     * @queryParam token string required Authentication Token List would be provided by BIZZSOL Example: abcdefghijklmnopqrstuvwxyzabcdef
     * @bodyParam hr_unit_id integer required Unit ID Example: 1
     * @bodyParam code string required Code of the Department Example: ICT
     * @bodyParam name string required Name of the Department Example: Information Technology
     * @bodyParam min_range number required Minimum Approval Range of the Department Example: 0
     * @bodyParam max_range number required Maximum Approval Range of the Department Example: 10000000
     *
     * @response {
     *       "success": true,
     *       "status": true,
     *       "success_code": 200,
     *       "data": {
     *           "message": "Department has been stored successfully."
     *       }
     *   }
     * 
     * @group Department
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $validator = \Validator::make($request->all(), [
            'hr_unit_id' => 'required',
            'code' => 'required|unique:hr_department,hr_department_code',
            'name' => 'required|unique:hr_department,hr_department_name',
            'min_range' => 'required',
            'max_range' => 'required',
        ]);

        if ($validator->passes()) {
            DB::beginTransaction();
            try{
                Department::create([
                    'hr_unit_id' => $request->hr_unit_id,
                    'hr_department_code' => $request->code,
                    'hr_department_name' => $request->name,
                    'hr_department_name_bn' => $request->name,
                    'hr_department_min_range' => $request->min_range,
                    'hr_department_max_range' => $request->max_range,
                ]);

                DB::commit();
                return response()->json([
                    'success' => true,
                    'status' => true,
                    'status_code' => 200,
                    'data' => [
                        'message' => "Department has been stored successfully."
                    ]
                ], 200);
            }catch (\Throwable $th){
                DB::rollback();
                return response()->json([
                    'success' => false,
                    'status' => false,
                    'status_code' => 500,
                    'message' => $th->getMessage()
                ], 500);
            }
        }

        return response()->json([
            'success' => false,
            'status' => false,
            'status_code' => 422,
            'errors' => $validator->errors()->all()
        ], 422);
    }

    /**
     * Department Details
     * 
     * Get Department by it's unique ID.
     * 
     * @queryParam token string required Authentication Token List would be provided by BIZZSOL Example: abcdefghijklmnopqrstuvwxyzabcdef
     * @pathParam deprtment_id int required ID of the Department Example: 100
     *
     * @response {
     *      "success": true,
     *      "status": true,
     *      "success_code": 200,
     *      "data": {
     *          "department": {
     *              "id": 106,
     *              "code": "Finance & Accounts",
     *              "name": "Finance & Accounts",
     *              "min_range": "0",
     *              "max_range": "1000000000"
     *          }
     *      }
     *  }
     * 
     * @group Department
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show(Department $department)
    {
        try{
            return response()->json([
                'success' => true,
                'status' => true,
                'status_code' => 200,
                'data' => [
                    'department' => [
                      'id' => $department->hr_department_id,
                      'code' => $department->hr_department_code,
                      'name' => $department->hr_department_name,
                      'min_range' => $department->hr_department_min_range,
                      'max_range' => $department->hr_department_max_range,
                    ]
                ]
            ], 200);
        }catch (\Throwable $th){
            return response()->json([
                'success' => false,
                'status' => false,
                'status_code' => 500,
                'message' => $th->getMessage()
            ], 500);
        }
    }

    /**
     * Update Department
     * 
     * Update an available Department.
     * 
     * @queryParam token string required Authentication Token List would be provided by BIZZSOL Example: abcdefghijklmnopqrstuvwxyzabcdef
     * @bodyParam hr_unit_id integer required Unit ID Example: 1
     * @bodyParam code string required Code of the Department Example: ICT
     * @bodyParam name string required Name of the Department Example: Information Technology
     * @bodyParam min_range number required Minimum Approval Range of the Department Example: 0
     * @bodyParam max_range number required Maximum Approval Range of the Department Example: 10000000
     *
     * @response {
     *       "success": true,
     *       "status": true,
     *       "success_code": 200,
     *       "data": {
     *           "message": "Department has been updated successfully."
     *       }
     *   }
     * 
     * @group Department
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $validator = \Validator::make($request->all(), [
            'hr_unit_id' => 'required',
            'code' => 'required|unique:hr_department,hr_department_code',
            'name' => 'required|unique:hr_department,hr_department_name',
            'min_range' => 'required',
            'max_range' => 'required',
        ]);

        if ($validator->passes()) {
            DB::beginTransaction();
            try{
                Department::updateOrCreate([
                    'hr_department_id' => $id
                ],[
                    'hr_unit_id' => $request->hr_unit_id,
                    'hr_department_code' => $request->code,
                    'hr_department_name' => $request->name,
                    'hr_department_name_bn' => $request->name,
                    'hr_department_min_range' => $request->min_range,
                    'hr_department_max_range' => $request->max_range,
                ]);

                DB::commit();
                return response()->json([
                    'success' => true,
                    'status' => true,
                    'status_code' => 200,
                    'data' => [
                        'message' => "Department has been updated successfully."
                    ]
                ], 200);
            }catch (\Throwable $th){
                DB::rollback();
                return response()->json([
                    'success' => false,
                    'status' => false,
                    'status_code' => 500,
                    'message' => $th->getMessage()
                ], 500);
            }
        }

        return response()->json([
            'success' => false,
            'status' => false,
            'status_code' => 422,
            'errors' => $validator->errors()->all()
        ], 422);
    }

    /**
     * Delete Department
     * 
     * Delete an available Department.
     * 
     * @queryParam token string required Authentication Token List would be provided by BIZZSOL Example: abcdefghijklmnopqrstuvwxyzabcdef
     * @pathParam department_id int required Unique ID of the Department Example: 100
     *
     * @response {
     *       "success": true,
     *       "status": true,
     *       "success_code": 200,
     *       "data": {
     *           "message": "Department has been Deleted successfully."
     *       }
     *   }
     * 
     * @group Department
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        DB::beginTransaction();
        try{
            Department::where('hr_department_id', $id)->delete();

            DB::commit();
            return response()->json([
                'success' => true,
                'status' => true,
                'status_code' => 200,
                'data' => [
                    'message' => "Department has been deleted successfully."
                ]
            ], 200);
        }catch (\Throwable $th){
            DB::rollback();
            return response()->json([
                'success' => false,
                'status' => false,
                'status_code' => 500,
                'message' => $th->getMessage()
            ], 500);
        }
    }
}

<?php
bolt_decrypt( __FILE__ , 'FKZPsJ'); return 0;
##!!!##